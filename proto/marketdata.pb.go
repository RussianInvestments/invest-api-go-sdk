// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.26.1
// source: marketdata.proto

package investapi

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Тип операции со списком подписок.
type SubscriptionAction int32

const (
	SubscriptionAction_SUBSCRIPTION_ACTION_UNSPECIFIED SubscriptionAction = 0 //Статус подписки не определён.
	SubscriptionAction_SUBSCRIPTION_ACTION_SUBSCRIBE   SubscriptionAction = 1 //Подписаться.
	SubscriptionAction_SUBSCRIPTION_ACTION_UNSUBSCRIBE SubscriptionAction = 2 //Отписаться.
)

// Enum value maps for SubscriptionAction.
var (
	SubscriptionAction_name = map[int32]string{
		0: "SUBSCRIPTION_ACTION_UNSPECIFIED",
		1: "SUBSCRIPTION_ACTION_SUBSCRIBE",
		2: "SUBSCRIPTION_ACTION_UNSUBSCRIBE",
	}
	SubscriptionAction_value = map[string]int32{
		"SUBSCRIPTION_ACTION_UNSPECIFIED": 0,
		"SUBSCRIPTION_ACTION_SUBSCRIBE":   1,
		"SUBSCRIPTION_ACTION_UNSUBSCRIBE": 2,
	}
)

func (x SubscriptionAction) Enum() *SubscriptionAction {
	p := new(SubscriptionAction)
	*p = x
	return p
}

func (x SubscriptionAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriptionAction) Descriptor() protoreflect.EnumDescriptor {
	return file_marketdata_proto_enumTypes[0].Descriptor()
}

func (SubscriptionAction) Type() protoreflect.EnumType {
	return &file_marketdata_proto_enumTypes[0]
}

func (x SubscriptionAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriptionAction.Descriptor instead.
func (SubscriptionAction) EnumDescriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{0}
}

// Интервал свечи.
type SubscriptionInterval int32

const (
	SubscriptionInterval_SUBSCRIPTION_INTERVAL_UNSPECIFIED     SubscriptionInterval = 0  //Интервал свечи не определён.
	SubscriptionInterval_SUBSCRIPTION_INTERVAL_ONE_MINUTE      SubscriptionInterval = 1  //Минутные свечи.
	SubscriptionInterval_SUBSCRIPTION_INTERVAL_FIVE_MINUTES    SubscriptionInterval = 2  //Пятиминутные свечи.
	SubscriptionInterval_SUBSCRIPTION_INTERVAL_FIFTEEN_MINUTES SubscriptionInterval = 3  //Пятнадцатиминутные свечи
	SubscriptionInterval_SUBSCRIPTION_INTERVAL_ONE_HOUR        SubscriptionInterval = 4  //Часовые свечи
	SubscriptionInterval_SUBSCRIPTION_INTERVAL_ONE_DAY         SubscriptionInterval = 5  //Дневные свечи
	SubscriptionInterval_SUBSCRIPTION_INTERVAL_2_MIN           SubscriptionInterval = 6  //Двухминутные свечи
	SubscriptionInterval_SUBSCRIPTION_INTERVAL_3_MIN           SubscriptionInterval = 7  //Трехминутные свечи
	SubscriptionInterval_SUBSCRIPTION_INTERVAL_10_MIN          SubscriptionInterval = 8  //Десятиминутные свечи
	SubscriptionInterval_SUBSCRIPTION_INTERVAL_30_MIN          SubscriptionInterval = 9  //Тридцатиминутные свечи
	SubscriptionInterval_SUBSCRIPTION_INTERVAL_2_HOUR          SubscriptionInterval = 10 //Двухчасовые свечи
	SubscriptionInterval_SUBSCRIPTION_INTERVAL_4_HOUR          SubscriptionInterval = 11 //Четырехчасовые свечи
	SubscriptionInterval_SUBSCRIPTION_INTERVAL_WEEK            SubscriptionInterval = 12 //Недельные свечи
	SubscriptionInterval_SUBSCRIPTION_INTERVAL_MONTH           SubscriptionInterval = 13 //Месячные свечи
)

// Enum value maps for SubscriptionInterval.
var (
	SubscriptionInterval_name = map[int32]string{
		0:  "SUBSCRIPTION_INTERVAL_UNSPECIFIED",
		1:  "SUBSCRIPTION_INTERVAL_ONE_MINUTE",
		2:  "SUBSCRIPTION_INTERVAL_FIVE_MINUTES",
		3:  "SUBSCRIPTION_INTERVAL_FIFTEEN_MINUTES",
		4:  "SUBSCRIPTION_INTERVAL_ONE_HOUR",
		5:  "SUBSCRIPTION_INTERVAL_ONE_DAY",
		6:  "SUBSCRIPTION_INTERVAL_2_MIN",
		7:  "SUBSCRIPTION_INTERVAL_3_MIN",
		8:  "SUBSCRIPTION_INTERVAL_10_MIN",
		9:  "SUBSCRIPTION_INTERVAL_30_MIN",
		10: "SUBSCRIPTION_INTERVAL_2_HOUR",
		11: "SUBSCRIPTION_INTERVAL_4_HOUR",
		12: "SUBSCRIPTION_INTERVAL_WEEK",
		13: "SUBSCRIPTION_INTERVAL_MONTH",
	}
	SubscriptionInterval_value = map[string]int32{
		"SUBSCRIPTION_INTERVAL_UNSPECIFIED":     0,
		"SUBSCRIPTION_INTERVAL_ONE_MINUTE":      1,
		"SUBSCRIPTION_INTERVAL_FIVE_MINUTES":    2,
		"SUBSCRIPTION_INTERVAL_FIFTEEN_MINUTES": 3,
		"SUBSCRIPTION_INTERVAL_ONE_HOUR":        4,
		"SUBSCRIPTION_INTERVAL_ONE_DAY":         5,
		"SUBSCRIPTION_INTERVAL_2_MIN":           6,
		"SUBSCRIPTION_INTERVAL_3_MIN":           7,
		"SUBSCRIPTION_INTERVAL_10_MIN":          8,
		"SUBSCRIPTION_INTERVAL_30_MIN":          9,
		"SUBSCRIPTION_INTERVAL_2_HOUR":          10,
		"SUBSCRIPTION_INTERVAL_4_HOUR":          11,
		"SUBSCRIPTION_INTERVAL_WEEK":            12,
		"SUBSCRIPTION_INTERVAL_MONTH":           13,
	}
)

func (x SubscriptionInterval) Enum() *SubscriptionInterval {
	p := new(SubscriptionInterval)
	*p = x
	return p
}

func (x SubscriptionInterval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriptionInterval) Descriptor() protoreflect.EnumDescriptor {
	return file_marketdata_proto_enumTypes[1].Descriptor()
}

func (SubscriptionInterval) Type() protoreflect.EnumType {
	return &file_marketdata_proto_enumTypes[1]
}

func (x SubscriptionInterval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriptionInterval.Descriptor instead.
func (SubscriptionInterval) EnumDescriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{1}
}

// Результат подписки.
type SubscriptionStatus int32

const (
	SubscriptionStatus_SUBSCRIPTION_STATUS_UNSPECIFIED                    SubscriptionStatus = 0 //Статус подписки не определён.
	SubscriptionStatus_SUBSCRIPTION_STATUS_SUCCESS                        SubscriptionStatus = 1 //Успешно.
	SubscriptionStatus_SUBSCRIPTION_STATUS_INSTRUMENT_NOT_FOUND           SubscriptionStatus = 2 //Инструмент не найден.
	SubscriptionStatus_SUBSCRIPTION_STATUS_SUBSCRIPTION_ACTION_IS_INVALID SubscriptionStatus = 3 //Некорректный статус подписки, список возможных значений: [SubscriptionAction](https://russianinvestments.github.io/investAPI/marketdata#subscriptionaction).
	SubscriptionStatus_SUBSCRIPTION_STATUS_DEPTH_IS_INVALID               SubscriptionStatus = 4 //Некорректная глубина стакана, доступные значения: 1, 10, 20, 30, 40, 50.
	SubscriptionStatus_SUBSCRIPTION_STATUS_INTERVAL_IS_INVALID            SubscriptionStatus = 5 //Некорректный интервал свечей, список возможных значений: [SubscriptionInterval](https://russianinvestments.github.io/investAPI/marketdata#subscriptioninterval).
	SubscriptionStatus_SUBSCRIPTION_STATUS_LIMIT_IS_EXCEEDED              SubscriptionStatus = 6 //Превышен лимит на общее количество подписок в рамках стрима, подробнее: [Лимитная политика](https://russianinvestments.github.io/investAPI/limits/).
	SubscriptionStatus_SUBSCRIPTION_STATUS_INTERNAL_ERROR                 SubscriptionStatus = 7 //Внутренняя ошибка сервиса.
	SubscriptionStatus_SUBSCRIPTION_STATUS_TOO_MANY_REQUESTS              SubscriptionStatus = 8 //Превышен лимит на количество запросов на подписки в течение установленного отрезка времени
	SubscriptionStatus_SUBSCRIPTION_STATUS_SUBSCRIPTION_NOT_FOUND         SubscriptionStatus = 9 // Активная подписка не найдена. Ошибка может возникнуть только при отписке от не существующей отписки
)

// Enum value maps for SubscriptionStatus.
var (
	SubscriptionStatus_name = map[int32]string{
		0: "SUBSCRIPTION_STATUS_UNSPECIFIED",
		1: "SUBSCRIPTION_STATUS_SUCCESS",
		2: "SUBSCRIPTION_STATUS_INSTRUMENT_NOT_FOUND",
		3: "SUBSCRIPTION_STATUS_SUBSCRIPTION_ACTION_IS_INVALID",
		4: "SUBSCRIPTION_STATUS_DEPTH_IS_INVALID",
		5: "SUBSCRIPTION_STATUS_INTERVAL_IS_INVALID",
		6: "SUBSCRIPTION_STATUS_LIMIT_IS_EXCEEDED",
		7: "SUBSCRIPTION_STATUS_INTERNAL_ERROR",
		8: "SUBSCRIPTION_STATUS_TOO_MANY_REQUESTS",
		9: "SUBSCRIPTION_STATUS_SUBSCRIPTION_NOT_FOUND",
	}
	SubscriptionStatus_value = map[string]int32{
		"SUBSCRIPTION_STATUS_UNSPECIFIED":                    0,
		"SUBSCRIPTION_STATUS_SUCCESS":                        1,
		"SUBSCRIPTION_STATUS_INSTRUMENT_NOT_FOUND":           2,
		"SUBSCRIPTION_STATUS_SUBSCRIPTION_ACTION_IS_INVALID": 3,
		"SUBSCRIPTION_STATUS_DEPTH_IS_INVALID":               4,
		"SUBSCRIPTION_STATUS_INTERVAL_IS_INVALID":            5,
		"SUBSCRIPTION_STATUS_LIMIT_IS_EXCEEDED":              6,
		"SUBSCRIPTION_STATUS_INTERNAL_ERROR":                 7,
		"SUBSCRIPTION_STATUS_TOO_MANY_REQUESTS":              8,
		"SUBSCRIPTION_STATUS_SUBSCRIPTION_NOT_FOUND":         9,
	}
)

func (x SubscriptionStatus) Enum() *SubscriptionStatus {
	p := new(SubscriptionStatus)
	*p = x
	return p
}

func (x SubscriptionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriptionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_marketdata_proto_enumTypes[2].Descriptor()
}

func (SubscriptionStatus) Type() protoreflect.EnumType {
	return &file_marketdata_proto_enumTypes[2]
}

func (x SubscriptionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriptionStatus.Descriptor instead.
func (SubscriptionStatus) EnumDescriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{2}
}

// Источники сделок
type TradeSourceType int32

const (
	TradeSourceType_TRADE_SOURCE_UNSPECIFIED TradeSourceType = 0 //Тип сделки не определён.
	TradeSourceType_TRADE_SOURCE_EXCHANGE    TradeSourceType = 1 // биржевые сделки
	TradeSourceType_TRADE_SOURCE_DEALER      TradeSourceType = 2 // сделки дилера
	TradeSourceType_TRADE_SOURCE_ALL         TradeSourceType = 3 // все сделки
)

// Enum value maps for TradeSourceType.
var (
	TradeSourceType_name = map[int32]string{
		0: "TRADE_SOURCE_UNSPECIFIED",
		1: "TRADE_SOURCE_EXCHANGE",
		2: "TRADE_SOURCE_DEALER",
		3: "TRADE_SOURCE_ALL",
	}
	TradeSourceType_value = map[string]int32{
		"TRADE_SOURCE_UNSPECIFIED": 0,
		"TRADE_SOURCE_EXCHANGE":    1,
		"TRADE_SOURCE_DEALER":      2,
		"TRADE_SOURCE_ALL":         3,
	}
)

func (x TradeSourceType) Enum() *TradeSourceType {
	p := new(TradeSourceType)
	*p = x
	return p
}

func (x TradeSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_marketdata_proto_enumTypes[3].Descriptor()
}

func (TradeSourceType) Type() protoreflect.EnumType {
	return &file_marketdata_proto_enumTypes[3]
}

func (x TradeSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeSourceType.Descriptor instead.
func (TradeSourceType) EnumDescriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{3}
}

// Направление сделки.
type TradeDirection int32

const (
	TradeDirection_TRADE_DIRECTION_UNSPECIFIED TradeDirection = 0 //Направление сделки не определено.
	TradeDirection_TRADE_DIRECTION_BUY         TradeDirection = 1 //Покупка.
	TradeDirection_TRADE_DIRECTION_SELL        TradeDirection = 2 //Продажа.
)

// Enum value maps for TradeDirection.
var (
	TradeDirection_name = map[int32]string{
		0: "TRADE_DIRECTION_UNSPECIFIED",
		1: "TRADE_DIRECTION_BUY",
		2: "TRADE_DIRECTION_SELL",
	}
	TradeDirection_value = map[string]int32{
		"TRADE_DIRECTION_UNSPECIFIED": 0,
		"TRADE_DIRECTION_BUY":         1,
		"TRADE_DIRECTION_SELL":        2,
	}
)

func (x TradeDirection) Enum() *TradeDirection {
	p := new(TradeDirection)
	*p = x
	return p
}

func (x TradeDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_marketdata_proto_enumTypes[4].Descriptor()
}

func (TradeDirection) Type() protoreflect.EnumType {
	return &file_marketdata_proto_enumTypes[4]
}

func (x TradeDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeDirection.Descriptor instead.
func (TradeDirection) EnumDescriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{4}
}

// Интервал свечей.
type CandleInterval int32

const (
	CandleInterval_CANDLE_INTERVAL_UNSPECIFIED CandleInterval = 0  //Интервал не определён.
	CandleInterval_CANDLE_INTERVAL_1_MIN       CandleInterval = 1  //от 1 минуты до 1 дня.
	CandleInterval_CANDLE_INTERVAL_5_MIN       CandleInterval = 2  //от 5 минут до 1 дня.
	CandleInterval_CANDLE_INTERVAL_15_MIN      CandleInterval = 3  //от 15 минут до 1 дня.
	CandleInterval_CANDLE_INTERVAL_HOUR        CandleInterval = 4  //от 1 часа до 1 недели.
	CandleInterval_CANDLE_INTERVAL_DAY         CandleInterval = 5  //от 1 дня до 1 года.
	CandleInterval_CANDLE_INTERVAL_2_MIN       CandleInterval = 6  //от 2 минут до 1 дня.
	CandleInterval_CANDLE_INTERVAL_3_MIN       CandleInterval = 7  //от 3 минут до 1 дня.
	CandleInterval_CANDLE_INTERVAL_10_MIN      CandleInterval = 8  //от 10 минут до 1 дня.
	CandleInterval_CANDLE_INTERVAL_30_MIN      CandleInterval = 9  //от 30 минут до 2 дней.
	CandleInterval_CANDLE_INTERVAL_2_HOUR      CandleInterval = 10 //от 2 часов до 1 месяца.
	CandleInterval_CANDLE_INTERVAL_4_HOUR      CandleInterval = 11 //от 4 часов до 1 месяца.
	CandleInterval_CANDLE_INTERVAL_WEEK        CandleInterval = 12 //от 1 недели до 2 лет.
	CandleInterval_CANDLE_INTERVAL_MONTH       CandleInterval = 13 //от 1 месяца до 10 лет.
)

// Enum value maps for CandleInterval.
var (
	CandleInterval_name = map[int32]string{
		0:  "CANDLE_INTERVAL_UNSPECIFIED",
		1:  "CANDLE_INTERVAL_1_MIN",
		2:  "CANDLE_INTERVAL_5_MIN",
		3:  "CANDLE_INTERVAL_15_MIN",
		4:  "CANDLE_INTERVAL_HOUR",
		5:  "CANDLE_INTERVAL_DAY",
		6:  "CANDLE_INTERVAL_2_MIN",
		7:  "CANDLE_INTERVAL_3_MIN",
		8:  "CANDLE_INTERVAL_10_MIN",
		9:  "CANDLE_INTERVAL_30_MIN",
		10: "CANDLE_INTERVAL_2_HOUR",
		11: "CANDLE_INTERVAL_4_HOUR",
		12: "CANDLE_INTERVAL_WEEK",
		13: "CANDLE_INTERVAL_MONTH",
	}
	CandleInterval_value = map[string]int32{
		"CANDLE_INTERVAL_UNSPECIFIED": 0,
		"CANDLE_INTERVAL_1_MIN":       1,
		"CANDLE_INTERVAL_5_MIN":       2,
		"CANDLE_INTERVAL_15_MIN":      3,
		"CANDLE_INTERVAL_HOUR":        4,
		"CANDLE_INTERVAL_DAY":         5,
		"CANDLE_INTERVAL_2_MIN":       6,
		"CANDLE_INTERVAL_3_MIN":       7,
		"CANDLE_INTERVAL_10_MIN":      8,
		"CANDLE_INTERVAL_30_MIN":      9,
		"CANDLE_INTERVAL_2_HOUR":      10,
		"CANDLE_INTERVAL_4_HOUR":      11,
		"CANDLE_INTERVAL_WEEK":        12,
		"CANDLE_INTERVAL_MONTH":       13,
	}
)

func (x CandleInterval) Enum() *CandleInterval {
	p := new(CandleInterval)
	*p = x
	return p
}

func (x CandleInterval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CandleInterval) Descriptor() protoreflect.EnumDescriptor {
	return file_marketdata_proto_enumTypes[5].Descriptor()
}

func (CandleInterval) Type() protoreflect.EnumType {
	return &file_marketdata_proto_enumTypes[5]
}

func (x CandleInterval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CandleInterval.Descriptor instead.
func (CandleInterval) EnumDescriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{5}
}

type CandleSource int32

const (
	CandleSource_CANDLE_SOURCE_UNSPECIFIED    CandleSource = 0 //Источник свечей не определён.
	CandleSource_CANDLE_SOURCE_EXCHANGE       CandleSource = 1 //Биржевые свечи.
	CandleSource_CANDLE_SOURCE_DEALER_WEEKEND CandleSource = 2 //Свечи  дилера в результате торговли по выходным.
)

// Enum value maps for CandleSource.
var (
	CandleSource_name = map[int32]string{
		0: "CANDLE_SOURCE_UNSPECIFIED",
		1: "CANDLE_SOURCE_EXCHANGE",
		2: "CANDLE_SOURCE_DEALER_WEEKEND",
	}
	CandleSource_value = map[string]int32{
		"CANDLE_SOURCE_UNSPECIFIED":    0,
		"CANDLE_SOURCE_EXCHANGE":       1,
		"CANDLE_SOURCE_DEALER_WEEKEND": 2,
	}
)

func (x CandleSource) Enum() *CandleSource {
	p := new(CandleSource)
	*p = x
	return p
}

func (x CandleSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CandleSource) Descriptor() protoreflect.EnumDescriptor {
	return file_marketdata_proto_enumTypes[6].Descriptor()
}

func (CandleSource) Type() protoreflect.EnumType {
	return &file_marketdata_proto_enumTypes[6]
}

func (x CandleSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CandleSource.Descriptor instead.
func (CandleSource) EnumDescriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{6}
}

type OrderBookType int32

const (
	OrderBookType_ORDERBOOK_TYPE_UNSPECIFIED OrderBookType = 0 //не определен
	OrderBookType_ORDERBOOK_TYPE_EXCHANGE    OrderBookType = 1 //Биржевой стакан
	OrderBookType_ORDERBOOK_TYPE_DEALER      OrderBookType = 2 //Стакан дилера
)

// Enum value maps for OrderBookType.
var (
	OrderBookType_name = map[int32]string{
		0: "ORDERBOOK_TYPE_UNSPECIFIED",
		1: "ORDERBOOK_TYPE_EXCHANGE",
		2: "ORDERBOOK_TYPE_DEALER",
	}
	OrderBookType_value = map[string]int32{
		"ORDERBOOK_TYPE_UNSPECIFIED": 0,
		"ORDERBOOK_TYPE_EXCHANGE":    1,
		"ORDERBOOK_TYPE_DEALER":      2,
	}
)

func (x OrderBookType) Enum() *OrderBookType {
	p := new(OrderBookType)
	*p = x
	return p
}

func (x OrderBookType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderBookType) Descriptor() protoreflect.EnumDescriptor {
	return file_marketdata_proto_enumTypes[7].Descriptor()
}

func (OrderBookType) Type() protoreflect.EnumType {
	return &file_marketdata_proto_enumTypes[7]
}

func (x OrderBookType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderBookType.Descriptor instead.
func (OrderBookType) EnumDescriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{7}
}

type GetCandlesRequest_CandleSource int32

const (
	GetCandlesRequest_CANDLE_SOURCE_UNSPECIFIED GetCandlesRequest_CandleSource = 0 //Все свечи.
	GetCandlesRequest_CANDLE_SOURCE_EXCHANGE    GetCandlesRequest_CandleSource = 1 //Биржевые свечи.
)

// Enum value maps for GetCandlesRequest_CandleSource.
var (
	GetCandlesRequest_CandleSource_name = map[int32]string{
		0: "CANDLE_SOURCE_UNSPECIFIED",
		1: "CANDLE_SOURCE_EXCHANGE",
	}
	GetCandlesRequest_CandleSource_value = map[string]int32{
		"CANDLE_SOURCE_UNSPECIFIED": 0,
		"CANDLE_SOURCE_EXCHANGE":    1,
	}
)

func (x GetCandlesRequest_CandleSource) Enum() *GetCandlesRequest_CandleSource {
	p := new(GetCandlesRequest_CandleSource)
	*p = x
	return p
}

func (x GetCandlesRequest_CandleSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetCandlesRequest_CandleSource) Descriptor() protoreflect.EnumDescriptor {
	return file_marketdata_proto_enumTypes[8].Descriptor()
}

func (GetCandlesRequest_CandleSource) Type() protoreflect.EnumType {
	return &file_marketdata_proto_enumTypes[8]
}

func (x GetCandlesRequest_CandleSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetCandlesRequest_CandleSource.Descriptor instead.
func (GetCandlesRequest_CandleSource) EnumDescriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{28, 0}
}

// Интервал свечи.
type GetTechAnalysisRequest_IndicatorInterval int32

const (
	GetTechAnalysisRequest_INDICATOR_INTERVAL_UNSPECIFIED     GetTechAnalysisRequest_IndicatorInterval = 0  //Интервал не определён.
	GetTechAnalysisRequest_INDICATOR_INTERVAL_ONE_MINUTE      GetTechAnalysisRequest_IndicatorInterval = 1  //1 минута.
	GetTechAnalysisRequest_INDICATOR_INTERVAL_FIVE_MINUTES    GetTechAnalysisRequest_IndicatorInterval = 2  //5 минут.
	GetTechAnalysisRequest_INDICATOR_INTERVAL_FIFTEEN_MINUTES GetTechAnalysisRequest_IndicatorInterval = 3  //15 минут.
	GetTechAnalysisRequest_INDICATOR_INTERVAL_ONE_HOUR        GetTechAnalysisRequest_IndicatorInterval = 4  //1 час.
	GetTechAnalysisRequest_INDICATOR_INTERVAL_ONE_DAY         GetTechAnalysisRequest_IndicatorInterval = 5  //1 день.
	GetTechAnalysisRequest_INDICATOR_INTERVAL_2_MIN           GetTechAnalysisRequest_IndicatorInterval = 6  //2 минуты.
	GetTechAnalysisRequest_INDICATOR_INTERVAL_3_MIN           GetTechAnalysisRequest_IndicatorInterval = 7  //3 минуты.
	GetTechAnalysisRequest_INDICATOR_INTERVAL_10_MIN          GetTechAnalysisRequest_IndicatorInterval = 8  //10 минут.
	GetTechAnalysisRequest_INDICATOR_INTERVAL_30_MIN          GetTechAnalysisRequest_IndicatorInterval = 9  //30 минут.
	GetTechAnalysisRequest_INDICATOR_INTERVAL_2_HOUR          GetTechAnalysisRequest_IndicatorInterval = 10 //2 часа.
	GetTechAnalysisRequest_INDICATOR_INTERVAL_4_HOUR          GetTechAnalysisRequest_IndicatorInterval = 11 //4 часа.
	GetTechAnalysisRequest_INDICATOR_INTERVAL_WEEK            GetTechAnalysisRequest_IndicatorInterval = 12 //Неделя
	GetTechAnalysisRequest_INDICATOR_INTERVAL_MONTH           GetTechAnalysisRequest_IndicatorInterval = 13 //Месяц
)

// Enum value maps for GetTechAnalysisRequest_IndicatorInterval.
var (
	GetTechAnalysisRequest_IndicatorInterval_name = map[int32]string{
		0:  "INDICATOR_INTERVAL_UNSPECIFIED",
		1:  "INDICATOR_INTERVAL_ONE_MINUTE",
		2:  "INDICATOR_INTERVAL_FIVE_MINUTES",
		3:  "INDICATOR_INTERVAL_FIFTEEN_MINUTES",
		4:  "INDICATOR_INTERVAL_ONE_HOUR",
		5:  "INDICATOR_INTERVAL_ONE_DAY",
		6:  "INDICATOR_INTERVAL_2_MIN",
		7:  "INDICATOR_INTERVAL_3_MIN",
		8:  "INDICATOR_INTERVAL_10_MIN",
		9:  "INDICATOR_INTERVAL_30_MIN",
		10: "INDICATOR_INTERVAL_2_HOUR",
		11: "INDICATOR_INTERVAL_4_HOUR",
		12: "INDICATOR_INTERVAL_WEEK",
		13: "INDICATOR_INTERVAL_MONTH",
	}
	GetTechAnalysisRequest_IndicatorInterval_value = map[string]int32{
		"INDICATOR_INTERVAL_UNSPECIFIED":     0,
		"INDICATOR_INTERVAL_ONE_MINUTE":      1,
		"INDICATOR_INTERVAL_FIVE_MINUTES":    2,
		"INDICATOR_INTERVAL_FIFTEEN_MINUTES": 3,
		"INDICATOR_INTERVAL_ONE_HOUR":        4,
		"INDICATOR_INTERVAL_ONE_DAY":         5,
		"INDICATOR_INTERVAL_2_MIN":           6,
		"INDICATOR_INTERVAL_3_MIN":           7,
		"INDICATOR_INTERVAL_10_MIN":          8,
		"INDICATOR_INTERVAL_30_MIN":          9,
		"INDICATOR_INTERVAL_2_HOUR":          10,
		"INDICATOR_INTERVAL_4_HOUR":          11,
		"INDICATOR_INTERVAL_WEEK":            12,
		"INDICATOR_INTERVAL_MONTH":           13,
	}
)

func (x GetTechAnalysisRequest_IndicatorInterval) Enum() *GetTechAnalysisRequest_IndicatorInterval {
	p := new(GetTechAnalysisRequest_IndicatorInterval)
	*p = x
	return p
}

func (x GetTechAnalysisRequest_IndicatorInterval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetTechAnalysisRequest_IndicatorInterval) Descriptor() protoreflect.EnumDescriptor {
	return file_marketdata_proto_enumTypes[9].Descriptor()
}

func (GetTechAnalysisRequest_IndicatorInterval) Type() protoreflect.EnumType {
	return &file_marketdata_proto_enumTypes[9]
}

func (x GetTechAnalysisRequest_IndicatorInterval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetTechAnalysisRequest_IndicatorInterval.Descriptor instead.
func (GetTechAnalysisRequest_IndicatorInterval) EnumDescriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{47, 0}
}

type GetTechAnalysisRequest_TypeOfPrice int32

const (
	GetTechAnalysisRequest_TYPE_OF_PRICE_UNSPECIFIED GetTechAnalysisRequest_TypeOfPrice = 0 //Не указано.
	GetTechAnalysisRequest_TYPE_OF_PRICE_CLOSE       GetTechAnalysisRequest_TypeOfPrice = 1 //Цена закрытия.
	GetTechAnalysisRequest_TYPE_OF_PRICE_OPEN        GetTechAnalysisRequest_TypeOfPrice = 2 //Цена открытия.
	GetTechAnalysisRequest_TYPE_OF_PRICE_HIGH        GetTechAnalysisRequest_TypeOfPrice = 3 //Максимальное значение за выбранный интервал.
	GetTechAnalysisRequest_TYPE_OF_PRICE_LOW         GetTechAnalysisRequest_TypeOfPrice = 4 //Минимальное значение за выбранный интервал.
	GetTechAnalysisRequest_TYPE_OF_PRICE_AVG         GetTechAnalysisRequest_TypeOfPrice = 5 //Среднее значение по показателям [ (close + open + high + low) / 4 ].
)

// Enum value maps for GetTechAnalysisRequest_TypeOfPrice.
var (
	GetTechAnalysisRequest_TypeOfPrice_name = map[int32]string{
		0: "TYPE_OF_PRICE_UNSPECIFIED",
		1: "TYPE_OF_PRICE_CLOSE",
		2: "TYPE_OF_PRICE_OPEN",
		3: "TYPE_OF_PRICE_HIGH",
		4: "TYPE_OF_PRICE_LOW",
		5: "TYPE_OF_PRICE_AVG",
	}
	GetTechAnalysisRequest_TypeOfPrice_value = map[string]int32{
		"TYPE_OF_PRICE_UNSPECIFIED": 0,
		"TYPE_OF_PRICE_CLOSE":       1,
		"TYPE_OF_PRICE_OPEN":        2,
		"TYPE_OF_PRICE_HIGH":        3,
		"TYPE_OF_PRICE_LOW":         4,
		"TYPE_OF_PRICE_AVG":         5,
	}
)

func (x GetTechAnalysisRequest_TypeOfPrice) Enum() *GetTechAnalysisRequest_TypeOfPrice {
	p := new(GetTechAnalysisRequest_TypeOfPrice)
	*p = x
	return p
}

func (x GetTechAnalysisRequest_TypeOfPrice) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetTechAnalysisRequest_TypeOfPrice) Descriptor() protoreflect.EnumDescriptor {
	return file_marketdata_proto_enumTypes[10].Descriptor()
}

func (GetTechAnalysisRequest_TypeOfPrice) Type() protoreflect.EnumType {
	return &file_marketdata_proto_enumTypes[10]
}

func (x GetTechAnalysisRequest_TypeOfPrice) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetTechAnalysisRequest_TypeOfPrice.Descriptor instead.
func (GetTechAnalysisRequest_TypeOfPrice) EnumDescriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{47, 1}
}

type GetTechAnalysisRequest_IndicatorType int32

const (
	GetTechAnalysisRequest_INDICATOR_TYPE_UNSPECIFIED GetTechAnalysisRequest_IndicatorType = 0 //Не определен.
	GetTechAnalysisRequest_INDICATOR_TYPE_BB          GetTechAnalysisRequest_IndicatorType = 1 //Bollinger Bands (Линия Боллинжера).
	GetTechAnalysisRequest_INDICATOR_TYPE_EMA         GetTechAnalysisRequest_IndicatorType = 2 //Exponential Moving Average (EMA, Экспоненциальная скользящая средняя).
	GetTechAnalysisRequest_INDICATOR_TYPE_RSI         GetTechAnalysisRequest_IndicatorType = 3 //Relative Strength Index (Индекс относительной силы).
	GetTechAnalysisRequest_INDICATOR_TYPE_MACD        GetTechAnalysisRequest_IndicatorType = 4 //Moving Average Convergence/Divergence (Схождение/Расхождение скользящих средних).
	GetTechAnalysisRequest_INDICATOR_TYPE_SMA         GetTechAnalysisRequest_IndicatorType = 5 //Simple Moving Average (Простое скользящее среднее).
)

// Enum value maps for GetTechAnalysisRequest_IndicatorType.
var (
	GetTechAnalysisRequest_IndicatorType_name = map[int32]string{
		0: "INDICATOR_TYPE_UNSPECIFIED",
		1: "INDICATOR_TYPE_BB",
		2: "INDICATOR_TYPE_EMA",
		3: "INDICATOR_TYPE_RSI",
		4: "INDICATOR_TYPE_MACD",
		5: "INDICATOR_TYPE_SMA",
	}
	GetTechAnalysisRequest_IndicatorType_value = map[string]int32{
		"INDICATOR_TYPE_UNSPECIFIED": 0,
		"INDICATOR_TYPE_BB":          1,
		"INDICATOR_TYPE_EMA":         2,
		"INDICATOR_TYPE_RSI":         3,
		"INDICATOR_TYPE_MACD":        4,
		"INDICATOR_TYPE_SMA":         5,
	}
)

func (x GetTechAnalysisRequest_IndicatorType) Enum() *GetTechAnalysisRequest_IndicatorType {
	p := new(GetTechAnalysisRequest_IndicatorType)
	*p = x
	return p
}

func (x GetTechAnalysisRequest_IndicatorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetTechAnalysisRequest_IndicatorType) Descriptor() protoreflect.EnumDescriptor {
	return file_marketdata_proto_enumTypes[11].Descriptor()
}

func (GetTechAnalysisRequest_IndicatorType) Type() protoreflect.EnumType {
	return &file_marketdata_proto_enumTypes[11]
}

func (x GetTechAnalysisRequest_IndicatorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetTechAnalysisRequest_IndicatorType.Descriptor instead.
func (GetTechAnalysisRequest_IndicatorType) EnumDescriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{47, 2}
}

// Запрос подписки или отписки на определённые биржевые данные.
type MarketDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*MarketDataRequest_SubscribeCandlesRequest
	//	*MarketDataRequest_SubscribeOrderBookRequest
	//	*MarketDataRequest_SubscribeTradesRequest
	//	*MarketDataRequest_SubscribeInfoRequest
	//	*MarketDataRequest_SubscribeLastPriceRequest
	//	*MarketDataRequest_GetMySubscriptions
	Payload isMarketDataRequest_Payload `protobuf_oneof:"payload"`
}

func (x *MarketDataRequest) Reset() {
	*x = MarketDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataRequest) ProtoMessage() {}

func (x *MarketDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataRequest.ProtoReflect.Descriptor instead.
func (*MarketDataRequest) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{0}
}

func (m *MarketDataRequest) GetPayload() isMarketDataRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *MarketDataRequest) GetSubscribeCandlesRequest() *SubscribeCandlesRequest {
	if x, ok := x.GetPayload().(*MarketDataRequest_SubscribeCandlesRequest); ok {
		return x.SubscribeCandlesRequest
	}
	return nil
}

func (x *MarketDataRequest) GetSubscribeOrderBookRequest() *SubscribeOrderBookRequest {
	if x, ok := x.GetPayload().(*MarketDataRequest_SubscribeOrderBookRequest); ok {
		return x.SubscribeOrderBookRequest
	}
	return nil
}

func (x *MarketDataRequest) GetSubscribeTradesRequest() *SubscribeTradesRequest {
	if x, ok := x.GetPayload().(*MarketDataRequest_SubscribeTradesRequest); ok {
		return x.SubscribeTradesRequest
	}
	return nil
}

func (x *MarketDataRequest) GetSubscribeInfoRequest() *SubscribeInfoRequest {
	if x, ok := x.GetPayload().(*MarketDataRequest_SubscribeInfoRequest); ok {
		return x.SubscribeInfoRequest
	}
	return nil
}

func (x *MarketDataRequest) GetSubscribeLastPriceRequest() *SubscribeLastPriceRequest {
	if x, ok := x.GetPayload().(*MarketDataRequest_SubscribeLastPriceRequest); ok {
		return x.SubscribeLastPriceRequest
	}
	return nil
}

func (x *MarketDataRequest) GetGetMySubscriptions() *GetMySubscriptions {
	if x, ok := x.GetPayload().(*MarketDataRequest_GetMySubscriptions); ok {
		return x.GetMySubscriptions
	}
	return nil
}

type isMarketDataRequest_Payload interface {
	isMarketDataRequest_Payload()
}

type MarketDataRequest_SubscribeCandlesRequest struct {
	SubscribeCandlesRequest *SubscribeCandlesRequest `protobuf:"bytes,1,opt,name=subscribe_candles_request,json=subscribeCandlesRequest,proto3,oneof"` //Запрос подписки на свечи.
}

type MarketDataRequest_SubscribeOrderBookRequest struct {
	SubscribeOrderBookRequest *SubscribeOrderBookRequest `protobuf:"bytes,2,opt,name=subscribe_order_book_request,json=subscribeOrderBookRequest,proto3,oneof"` //Запрос подписки на стаканы.
}

type MarketDataRequest_SubscribeTradesRequest struct {
	SubscribeTradesRequest *SubscribeTradesRequest `protobuf:"bytes,3,opt,name=subscribe_trades_request,json=subscribeTradesRequest,proto3,oneof"` //Запрос подписки на ленту обезличенных сделок.
}

type MarketDataRequest_SubscribeInfoRequest struct {
	SubscribeInfoRequest *SubscribeInfoRequest `protobuf:"bytes,4,opt,name=subscribe_info_request,json=subscribeInfoRequest,proto3,oneof"` //Запрос подписки на торговые статусы инструментов.
}

type MarketDataRequest_SubscribeLastPriceRequest struct {
	SubscribeLastPriceRequest *SubscribeLastPriceRequest `protobuf:"bytes,5,opt,name=subscribe_last_price_request,json=subscribeLastPriceRequest,proto3,oneof"` //Запрос подписки на цены последних сделок.
}

type MarketDataRequest_GetMySubscriptions struct {
	GetMySubscriptions *GetMySubscriptions `protobuf:"bytes,6,opt,name=get_my_subscriptions,json=getMySubscriptions,proto3,oneof"` //Запрос своих подписок.
}

func (*MarketDataRequest_SubscribeCandlesRequest) isMarketDataRequest_Payload() {}

func (*MarketDataRequest_SubscribeOrderBookRequest) isMarketDataRequest_Payload() {}

func (*MarketDataRequest_SubscribeTradesRequest) isMarketDataRequest_Payload() {}

func (*MarketDataRequest_SubscribeInfoRequest) isMarketDataRequest_Payload() {}

func (*MarketDataRequest_SubscribeLastPriceRequest) isMarketDataRequest_Payload() {}

func (*MarketDataRequest_GetMySubscriptions) isMarketDataRequest_Payload() {}

type MarketDataServerSideStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscribeCandlesRequest   *SubscribeCandlesRequest   `protobuf:"bytes,1,opt,name=subscribe_candles_request,json=subscribeCandlesRequest,proto3" json:"subscribe_candles_request,omitempty"`         //Запрос подписки на свечи.
	SubscribeOrderBookRequest *SubscribeOrderBookRequest `protobuf:"bytes,2,opt,name=subscribe_order_book_request,json=subscribeOrderBookRequest,proto3" json:"subscribe_order_book_request,omitempty"` //Запрос подписки на стаканы.
	SubscribeTradesRequest    *SubscribeTradesRequest    `protobuf:"bytes,3,opt,name=subscribe_trades_request,json=subscribeTradesRequest,proto3" json:"subscribe_trades_request,omitempty"`            //Запрос подписки на ленту обезличенных сделок.
	SubscribeInfoRequest      *SubscribeInfoRequest      `protobuf:"bytes,4,opt,name=subscribe_info_request,json=subscribeInfoRequest,proto3" json:"subscribe_info_request,omitempty"`                  //Запрос подписки на торговые статусы инструментов.
	SubscribeLastPriceRequest *SubscribeLastPriceRequest `protobuf:"bytes,5,opt,name=subscribe_last_price_request,json=subscribeLastPriceRequest,proto3" json:"subscribe_last_price_request,omitempty"` //Запрос подписки на цены последних сделок.
}

func (x *MarketDataServerSideStreamRequest) Reset() {
	*x = MarketDataServerSideStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataServerSideStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataServerSideStreamRequest) ProtoMessage() {}

func (x *MarketDataServerSideStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataServerSideStreamRequest.ProtoReflect.Descriptor instead.
func (*MarketDataServerSideStreamRequest) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{1}
}

func (x *MarketDataServerSideStreamRequest) GetSubscribeCandlesRequest() *SubscribeCandlesRequest {
	if x != nil {
		return x.SubscribeCandlesRequest
	}
	return nil
}

func (x *MarketDataServerSideStreamRequest) GetSubscribeOrderBookRequest() *SubscribeOrderBookRequest {
	if x != nil {
		return x.SubscribeOrderBookRequest
	}
	return nil
}

func (x *MarketDataServerSideStreamRequest) GetSubscribeTradesRequest() *SubscribeTradesRequest {
	if x != nil {
		return x.SubscribeTradesRequest
	}
	return nil
}

func (x *MarketDataServerSideStreamRequest) GetSubscribeInfoRequest() *SubscribeInfoRequest {
	if x != nil {
		return x.SubscribeInfoRequest
	}
	return nil
}

func (x *MarketDataServerSideStreamRequest) GetSubscribeLastPriceRequest() *SubscribeLastPriceRequest {
	if x != nil {
		return x.SubscribeLastPriceRequest
	}
	return nil
}

// Пакет биржевой информации по подписке.
type MarketDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*MarketDataResponse_SubscribeCandlesResponse
	//	*MarketDataResponse_SubscribeOrderBookResponse
	//	*MarketDataResponse_SubscribeTradesResponse
	//	*MarketDataResponse_SubscribeInfoResponse
	//	*MarketDataResponse_Candle
	//	*MarketDataResponse_Trade
	//	*MarketDataResponse_Orderbook
	//	*MarketDataResponse_TradingStatus
	//	*MarketDataResponse_Ping
	//	*MarketDataResponse_SubscribeLastPriceResponse
	//	*MarketDataResponse_LastPrice
	Payload isMarketDataResponse_Payload `protobuf_oneof:"payload"`
}

func (x *MarketDataResponse) Reset() {
	*x = MarketDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataResponse) ProtoMessage() {}

func (x *MarketDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataResponse.ProtoReflect.Descriptor instead.
func (*MarketDataResponse) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{2}
}

func (m *MarketDataResponse) GetPayload() isMarketDataResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *MarketDataResponse) GetSubscribeCandlesResponse() *SubscribeCandlesResponse {
	if x, ok := x.GetPayload().(*MarketDataResponse_SubscribeCandlesResponse); ok {
		return x.SubscribeCandlesResponse
	}
	return nil
}

func (x *MarketDataResponse) GetSubscribeOrderBookResponse() *SubscribeOrderBookResponse {
	if x, ok := x.GetPayload().(*MarketDataResponse_SubscribeOrderBookResponse); ok {
		return x.SubscribeOrderBookResponse
	}
	return nil
}

func (x *MarketDataResponse) GetSubscribeTradesResponse() *SubscribeTradesResponse {
	if x, ok := x.GetPayload().(*MarketDataResponse_SubscribeTradesResponse); ok {
		return x.SubscribeTradesResponse
	}
	return nil
}

func (x *MarketDataResponse) GetSubscribeInfoResponse() *SubscribeInfoResponse {
	if x, ok := x.GetPayload().(*MarketDataResponse_SubscribeInfoResponse); ok {
		return x.SubscribeInfoResponse
	}
	return nil
}

func (x *MarketDataResponse) GetCandle() *Candle {
	if x, ok := x.GetPayload().(*MarketDataResponse_Candle); ok {
		return x.Candle
	}
	return nil
}

func (x *MarketDataResponse) GetTrade() *Trade {
	if x, ok := x.GetPayload().(*MarketDataResponse_Trade); ok {
		return x.Trade
	}
	return nil
}

func (x *MarketDataResponse) GetOrderbook() *OrderBook {
	if x, ok := x.GetPayload().(*MarketDataResponse_Orderbook); ok {
		return x.Orderbook
	}
	return nil
}

func (x *MarketDataResponse) GetTradingStatus() *TradingStatus {
	if x, ok := x.GetPayload().(*MarketDataResponse_TradingStatus); ok {
		return x.TradingStatus
	}
	return nil
}

func (x *MarketDataResponse) GetPing() *Ping {
	if x, ok := x.GetPayload().(*MarketDataResponse_Ping); ok {
		return x.Ping
	}
	return nil
}

func (x *MarketDataResponse) GetSubscribeLastPriceResponse() *SubscribeLastPriceResponse {
	if x, ok := x.GetPayload().(*MarketDataResponse_SubscribeLastPriceResponse); ok {
		return x.SubscribeLastPriceResponse
	}
	return nil
}

func (x *MarketDataResponse) GetLastPrice() *LastPrice {
	if x, ok := x.GetPayload().(*MarketDataResponse_LastPrice); ok {
		return x.LastPrice
	}
	return nil
}

type isMarketDataResponse_Payload interface {
	isMarketDataResponse_Payload()
}

type MarketDataResponse_SubscribeCandlesResponse struct {
	SubscribeCandlesResponse *SubscribeCandlesResponse `protobuf:"bytes,1,opt,name=subscribe_candles_response,json=subscribeCandlesResponse,proto3,oneof"` //Результат подписки на свечи.
}

type MarketDataResponse_SubscribeOrderBookResponse struct {
	SubscribeOrderBookResponse *SubscribeOrderBookResponse `protobuf:"bytes,2,opt,name=subscribe_order_book_response,json=subscribeOrderBookResponse,proto3,oneof"` //Результат подписки на стаканы.
}

type MarketDataResponse_SubscribeTradesResponse struct {
	SubscribeTradesResponse *SubscribeTradesResponse `protobuf:"bytes,3,opt,name=subscribe_trades_response,json=subscribeTradesResponse,proto3,oneof"` //Результат подписки на поток обезличенных сделок.
}

type MarketDataResponse_SubscribeInfoResponse struct {
	SubscribeInfoResponse *SubscribeInfoResponse `protobuf:"bytes,4,opt,name=subscribe_info_response,json=subscribeInfoResponse,proto3,oneof"` //Результат подписки на торговые статусы инструментов.
}

type MarketDataResponse_Candle struct {
	Candle *Candle `protobuf:"bytes,5,opt,name=candle,proto3,oneof"` //Свеча.
}

type MarketDataResponse_Trade struct {
	Trade *Trade `protobuf:"bytes,6,opt,name=trade,proto3,oneof"` //Сделки.
}

type MarketDataResponse_Orderbook struct {
	Orderbook *OrderBook `protobuf:"bytes,7,opt,name=orderbook,proto3,oneof"` //Стакан.
}

type MarketDataResponse_TradingStatus struct {
	TradingStatus *TradingStatus `protobuf:"bytes,8,opt,name=trading_status,json=tradingStatus,proto3,oneof"` //Торговый статус.
}

type MarketDataResponse_Ping struct {
	Ping *Ping `protobuf:"bytes,9,opt,name=ping,proto3,oneof"` //Проверка активности стрима.
}

type MarketDataResponse_SubscribeLastPriceResponse struct {
	SubscribeLastPriceResponse *SubscribeLastPriceResponse `protobuf:"bytes,10,opt,name=subscribe_last_price_response,json=subscribeLastPriceResponse,proto3,oneof"` //Результат подписки на цены последние сделок по инструментам.
}

type MarketDataResponse_LastPrice struct {
	LastPrice *LastPrice `protobuf:"bytes,11,opt,name=last_price,json=lastPrice,proto3,oneof"` //Цена последней сделки.
}

func (*MarketDataResponse_SubscribeCandlesResponse) isMarketDataResponse_Payload() {}

func (*MarketDataResponse_SubscribeOrderBookResponse) isMarketDataResponse_Payload() {}

func (*MarketDataResponse_SubscribeTradesResponse) isMarketDataResponse_Payload() {}

func (*MarketDataResponse_SubscribeInfoResponse) isMarketDataResponse_Payload() {}

func (*MarketDataResponse_Candle) isMarketDataResponse_Payload() {}

func (*MarketDataResponse_Trade) isMarketDataResponse_Payload() {}

func (*MarketDataResponse_Orderbook) isMarketDataResponse_Payload() {}

func (*MarketDataResponse_TradingStatus) isMarketDataResponse_Payload() {}

func (*MarketDataResponse_Ping) isMarketDataResponse_Payload() {}

func (*MarketDataResponse_SubscribeLastPriceResponse) isMarketDataResponse_Payload() {}

func (*MarketDataResponse_LastPrice) isMarketDataResponse_Payload() {}

// subscribeCandles | Изменения статуса подписки на свечи.
type SubscribeCandlesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriptionAction SubscriptionAction  `protobuf:"varint,1,opt,name=subscription_action,json=subscriptionAction,proto3,enum=tinkoff.public.invest.api.contract.v1.SubscriptionAction" json:"subscription_action,omitempty"` //Изменение статуса подписки.
	Instruments        []*CandleInstrument `protobuf:"bytes,2,rep,name=instruments,proto3" json:"instruments,omitempty"`                                                                                                        //Массив инструментов для подписки на свечи.
	WaitingClose       bool                `protobuf:"varint,3,opt,name=waiting_close,json=waitingClose,proto3" json:"waiting_close,omitempty"`                                                                                 //Флаг ожидания закрытия временного интервала для отправки свечи.
}

func (x *SubscribeCandlesRequest) Reset() {
	*x = SubscribeCandlesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeCandlesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeCandlesRequest) ProtoMessage() {}

func (x *SubscribeCandlesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeCandlesRequest.ProtoReflect.Descriptor instead.
func (*SubscribeCandlesRequest) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{3}
}

func (x *SubscribeCandlesRequest) GetSubscriptionAction() SubscriptionAction {
	if x != nil {
		return x.SubscriptionAction
	}
	return SubscriptionAction_SUBSCRIPTION_ACTION_UNSPECIFIED
}

func (x *SubscribeCandlesRequest) GetInstruments() []*CandleInstrument {
	if x != nil {
		return x.Instruments
	}
	return nil
}

func (x *SubscribeCandlesRequest) GetWaitingClose() bool {
	if x != nil {
		return x.WaitingClose
	}
	return false
}

// Запрос изменения статус подписки на свечи.
type CandleInstrument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in marketdata.proto.
	Figi         string               `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                          // Deprecated Figi-идентификатор инструмента. Необходимо использовать instrument_id.
	Interval     SubscriptionInterval `protobuf:"varint,2,opt,name=interval,proto3,enum=tinkoff.public.invest.api.contract.v1.SubscriptionInterval" json:"interval,omitempty"` //Интервал свечей. (Двухчасовые и четырехчасовые свечи в стриме отсчитываются с 0:00 по UTC)
	InstrumentId string               `protobuf:"bytes,3,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"`                                      //Идентификатор инструмента, принимает значение figi или instrument_uid
}

func (x *CandleInstrument) Reset() {
	*x = CandleInstrument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandleInstrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandleInstrument) ProtoMessage() {}

func (x *CandleInstrument) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandleInstrument.ProtoReflect.Descriptor instead.
func (*CandleInstrument) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{4}
}

// Deprecated: Marked as deprecated in marketdata.proto.
func (x *CandleInstrument) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *CandleInstrument) GetInterval() SubscriptionInterval {
	if x != nil {
		return x.Interval
	}
	return SubscriptionInterval_SUBSCRIPTION_INTERVAL_UNSPECIFIED
}

func (x *CandleInstrument) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

// Результат изменения статус подписки на свечи.
type SubscribeCandlesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackingId           string                `protobuf:"bytes,1,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"`                               //Уникальный идентификатор запроса, подробнее: [tracking_id](https://russianinvestments.github.io/investAPI/grpc#tracking-id).
	CandlesSubscriptions []*CandleSubscription `protobuf:"bytes,2,rep,name=candles_subscriptions,json=candlesSubscriptions,proto3" json:"candles_subscriptions,omitempty"` //Массив статусов подписки на свечи.
}

func (x *SubscribeCandlesResponse) Reset() {
	*x = SubscribeCandlesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeCandlesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeCandlesResponse) ProtoMessage() {}

func (x *SubscribeCandlesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeCandlesResponse.ProtoReflect.Descriptor instead.
func (*SubscribeCandlesResponse) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{5}
}

func (x *SubscribeCandlesResponse) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *SubscribeCandlesResponse) GetCandlesSubscriptions() []*CandleSubscription {
	if x != nil {
		return x.CandlesSubscriptions
	}
	return nil
}

// Статус подписки на свечи.
type CandleSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi               string               `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                                      //Figi-идентификатор инструмента.
	Interval           SubscriptionInterval `protobuf:"varint,2,opt,name=interval,proto3,enum=tinkoff.public.invest.api.contract.v1.SubscriptionInterval" json:"interval,omitempty"`                                             //Интервал свечей.
	SubscriptionStatus SubscriptionStatus   `protobuf:"varint,3,opt,name=subscription_status,json=subscriptionStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.SubscriptionStatus" json:"subscription_status,omitempty"` //Статус подписки.
	InstrumentUid      string               `protobuf:"bytes,4,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                                                                               //Uid инструмента
	WaitingClose       bool                 `protobuf:"varint,5,opt,name=waiting_close,json=waitingClose,proto3" json:"waiting_close,omitempty"`                                                                                 //Флаг ожидания закрытия временного интервала для отправки свечи
	StreamId           string               `protobuf:"bytes,6,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`                                                                                              //Идентификатор открытого соединения
	SubscriptionId     string               `protobuf:"bytes,7,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`                                                                            //Идентификатор подписки в формате UUID
}

func (x *CandleSubscription) Reset() {
	*x = CandleSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CandleSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandleSubscription) ProtoMessage() {}

func (x *CandleSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandleSubscription.ProtoReflect.Descriptor instead.
func (*CandleSubscription) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{6}
}

func (x *CandleSubscription) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *CandleSubscription) GetInterval() SubscriptionInterval {
	if x != nil {
		return x.Interval
	}
	return SubscriptionInterval_SUBSCRIPTION_INTERVAL_UNSPECIFIED
}

func (x *CandleSubscription) GetSubscriptionStatus() SubscriptionStatus {
	if x != nil {
		return x.SubscriptionStatus
	}
	return SubscriptionStatus_SUBSCRIPTION_STATUS_UNSPECIFIED
}

func (x *CandleSubscription) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

func (x *CandleSubscription) GetWaitingClose() bool {
	if x != nil {
		return x.WaitingClose
	}
	return false
}

func (x *CandleSubscription) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *CandleSubscription) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

// Запрос на изменение статуса подписки на стаканы.
type SubscribeOrderBookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriptionAction SubscriptionAction     `protobuf:"varint,1,opt,name=subscription_action,json=subscriptionAction,proto3,enum=tinkoff.public.invest.api.contract.v1.SubscriptionAction" json:"subscription_action,omitempty"` //Изменение статуса подписки.
	Instruments        []*OrderBookInstrument `protobuf:"bytes,2,rep,name=instruments,proto3" json:"instruments,omitempty"`                                                                                                        //Массив инструментов для подписки на стаканы.
}

func (x *SubscribeOrderBookRequest) Reset() {
	*x = SubscribeOrderBookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeOrderBookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeOrderBookRequest) ProtoMessage() {}

func (x *SubscribeOrderBookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeOrderBookRequest.ProtoReflect.Descriptor instead.
func (*SubscribeOrderBookRequest) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{7}
}

func (x *SubscribeOrderBookRequest) GetSubscriptionAction() SubscriptionAction {
	if x != nil {
		return x.SubscriptionAction
	}
	return SubscriptionAction_SUBSCRIPTION_ACTION_UNSPECIFIED
}

func (x *SubscribeOrderBookRequest) GetInstruments() []*OrderBookInstrument {
	if x != nil {
		return x.Instruments
	}
	return nil
}

// Запрос подписки на стаканы.
type OrderBookInstrument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in marketdata.proto.
	Figi          string        `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                    //Deprecated Figi-идентификатор инструмента. Необходимо использовать instrument_id.
	Depth         int32         `protobuf:"varint,2,opt,name=depth,proto3" json:"depth,omitempty"`                                                                                                 //Глубина стакана.
	InstrumentId  string        `protobuf:"bytes,3,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"`                                                                //Идентификатор инструмента, принимает значение figi или instrument_uid
	OrderBookType OrderBookType `protobuf:"varint,4,opt,name=order_book_type,json=orderBookType,proto3,enum=tinkoff.public.invest.api.contract.v1.OrderBookType" json:"order_book_type,omitempty"` //Тип стакана
}

func (x *OrderBookInstrument) Reset() {
	*x = OrderBookInstrument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderBookInstrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBookInstrument) ProtoMessage() {}

func (x *OrderBookInstrument) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBookInstrument.ProtoReflect.Descriptor instead.
func (*OrderBookInstrument) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{8}
}

// Deprecated: Marked as deprecated in marketdata.proto.
func (x *OrderBookInstrument) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *OrderBookInstrument) GetDepth() int32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *OrderBookInstrument) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

func (x *OrderBookInstrument) GetOrderBookType() OrderBookType {
	if x != nil {
		return x.OrderBookType
	}
	return OrderBookType_ORDERBOOK_TYPE_UNSPECIFIED
}

// Результат изменения статуса подписки на стаканы.
type SubscribeOrderBookResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackingId             string                   `protobuf:"bytes,1,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"`                                       //Уникальный идентификатор запроса, подробнее: [tracking_id](https://russianinvestments.github.io/investAPI/grpc#tracking-id).
	OrderBookSubscriptions []*OrderBookSubscription `protobuf:"bytes,2,rep,name=order_book_subscriptions,json=orderBookSubscriptions,proto3" json:"order_book_subscriptions,omitempty"` //Массив статусов подписки на стаканы.
}

func (x *SubscribeOrderBookResponse) Reset() {
	*x = SubscribeOrderBookResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeOrderBookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeOrderBookResponse) ProtoMessage() {}

func (x *SubscribeOrderBookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeOrderBookResponse.ProtoReflect.Descriptor instead.
func (*SubscribeOrderBookResponse) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{9}
}

func (x *SubscribeOrderBookResponse) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *SubscribeOrderBookResponse) GetOrderBookSubscriptions() []*OrderBookSubscription {
	if x != nil {
		return x.OrderBookSubscriptions
	}
	return nil
}

// Статус подписки.
type OrderBookSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi               string             `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                                      //Figi-идентификатор инструмента.
	Depth              int32              `protobuf:"varint,2,opt,name=depth,proto3" json:"depth,omitempty"`                                                                                                                   //Глубина стакана.
	SubscriptionStatus SubscriptionStatus `protobuf:"varint,3,opt,name=subscription_status,json=subscriptionStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.SubscriptionStatus" json:"subscription_status,omitempty"` //Статус подписки.
	InstrumentUid      string             `protobuf:"bytes,4,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                                                                               //Uid инструмента
	StreamId           string             `protobuf:"bytes,5,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`                                                                                              //Идентификатор открытого соединения
	SubscriptionId     string             `protobuf:"bytes,6,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`                                                                            //Идентификатор подписки в формате UUID
	OrderBookType      OrderBookType      `protobuf:"varint,7,opt,name=order_book_type,json=orderBookType,proto3,enum=tinkoff.public.invest.api.contract.v1.OrderBookType" json:"order_book_type,omitempty"`                   //Тип стакана
}

func (x *OrderBookSubscription) Reset() {
	*x = OrderBookSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderBookSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBookSubscription) ProtoMessage() {}

func (x *OrderBookSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBookSubscription.ProtoReflect.Descriptor instead.
func (*OrderBookSubscription) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{10}
}

func (x *OrderBookSubscription) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *OrderBookSubscription) GetDepth() int32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *OrderBookSubscription) GetSubscriptionStatus() SubscriptionStatus {
	if x != nil {
		return x.SubscriptionStatus
	}
	return SubscriptionStatus_SUBSCRIPTION_STATUS_UNSPECIFIED
}

func (x *OrderBookSubscription) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

func (x *OrderBookSubscription) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *OrderBookSubscription) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *OrderBookSubscription) GetOrderBookType() OrderBookType {
	if x != nil {
		return x.OrderBookType
	}
	return OrderBookType_ORDERBOOK_TYPE_UNSPECIFIED
}

// Изменение статуса подписки на поток обезличенных сделок.
type SubscribeTradesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriptionAction SubscriptionAction `protobuf:"varint,1,opt,name=subscription_action,json=subscriptionAction,proto3,enum=tinkoff.public.invest.api.contract.v1.SubscriptionAction" json:"subscription_action,omitempty"` //Изменение статуса подписки.
	Instruments        []*TradeInstrument `protobuf:"bytes,2,rep,name=instruments,proto3" json:"instruments,omitempty"`                                                                                                        //Массив инструментов для подписки на поток обезличенных сделок.
	TradeType          TradeSourceType    `protobuf:"varint,3,opt,name=trade_type,json=tradeType,proto3,enum=tinkoff.public.invest.api.contract.v1.TradeSourceType" json:"trade_type,omitempty"`                               //Источник сделок
}

func (x *SubscribeTradesRequest) Reset() {
	*x = SubscribeTradesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeTradesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTradesRequest) ProtoMessage() {}

func (x *SubscribeTradesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTradesRequest.ProtoReflect.Descriptor instead.
func (*SubscribeTradesRequest) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{11}
}

func (x *SubscribeTradesRequest) GetSubscriptionAction() SubscriptionAction {
	if x != nil {
		return x.SubscriptionAction
	}
	return SubscriptionAction_SUBSCRIPTION_ACTION_UNSPECIFIED
}

func (x *SubscribeTradesRequest) GetInstruments() []*TradeInstrument {
	if x != nil {
		return x.Instruments
	}
	return nil
}

func (x *SubscribeTradesRequest) GetTradeType() TradeSourceType {
	if x != nil {
		return x.TradeType
	}
	return TradeSourceType_TRADE_SOURCE_UNSPECIFIED
}

// Запрос подписки на поток обезличенных сделок.
type TradeInstrument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in marketdata.proto.
	Figi         string `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                     //Deprecated Figi-идентификатор инструмента. Необходимо использовать instrument_id.
	InstrumentId string `protobuf:"bytes,2,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"` //Идентификатор инструмента, принимает значение figi или instrument_uid
}

func (x *TradeInstrument) Reset() {
	*x = TradeInstrument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeInstrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeInstrument) ProtoMessage() {}

func (x *TradeInstrument) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeInstrument.ProtoReflect.Descriptor instead.
func (*TradeInstrument) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{12}
}

// Deprecated: Marked as deprecated in marketdata.proto.
func (x *TradeInstrument) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *TradeInstrument) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

// Результат изменения статуса подписки на поток обезличенных сделок.
type SubscribeTradesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackingId         string               `protobuf:"bytes,1,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"`                                                          //Уникальный идентификатор запроса, подробнее: [tracking_id](https://russianinvestments.github.io/investAPI/grpc#tracking-id).
	TradeSubscriptions []*TradeSubscription `protobuf:"bytes,2,rep,name=trade_subscriptions,json=tradeSubscriptions,proto3" json:"trade_subscriptions,omitempty"`                                  //Массив статусов подписки на поток сделок.
	TradeType          TradeSourceType      `protobuf:"varint,3,opt,name=trade_type,json=tradeType,proto3,enum=tinkoff.public.invest.api.contract.v1.TradeSourceType" json:"trade_type,omitempty"` //Источник сделок
}

func (x *SubscribeTradesResponse) Reset() {
	*x = SubscribeTradesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeTradesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTradesResponse) ProtoMessage() {}

func (x *SubscribeTradesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTradesResponse.ProtoReflect.Descriptor instead.
func (*SubscribeTradesResponse) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{13}
}

func (x *SubscribeTradesResponse) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *SubscribeTradesResponse) GetTradeSubscriptions() []*TradeSubscription {
	if x != nil {
		return x.TradeSubscriptions
	}
	return nil
}

func (x *SubscribeTradesResponse) GetTradeType() TradeSourceType {
	if x != nil {
		return x.TradeType
	}
	return TradeSourceType_TRADE_SOURCE_UNSPECIFIED
}

// Статус подписки.
type TradeSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi               string             `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                                      //Figi-идентификатор инструмента.
	SubscriptionStatus SubscriptionStatus `protobuf:"varint,2,opt,name=subscription_status,json=subscriptionStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.SubscriptionStatus" json:"subscription_status,omitempty"` //Статус подписки.
	InstrumentUid      string             `protobuf:"bytes,3,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                                                                               //Uid инструмента
	StreamId           string             `protobuf:"bytes,4,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`                                                                                              //Идентификатор открытого соединения
	SubscriptionId     string             `protobuf:"bytes,5,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`                                                                            //Идентификатор подписки в формате UUID
}

func (x *TradeSubscription) Reset() {
	*x = TradeSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeSubscription) ProtoMessage() {}

func (x *TradeSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeSubscription.ProtoReflect.Descriptor instead.
func (*TradeSubscription) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{14}
}

func (x *TradeSubscription) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *TradeSubscription) GetSubscriptionStatus() SubscriptionStatus {
	if x != nil {
		return x.SubscriptionStatus
	}
	return SubscriptionStatus_SUBSCRIPTION_STATUS_UNSPECIFIED
}

func (x *TradeSubscription) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

func (x *TradeSubscription) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *TradeSubscription) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

// Изменение статуса подписки на торговый статус инструмента.
type SubscribeInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriptionAction SubscriptionAction `protobuf:"varint,1,opt,name=subscription_action,json=subscriptionAction,proto3,enum=tinkoff.public.invest.api.contract.v1.SubscriptionAction" json:"subscription_action,omitempty"` //Изменение статуса подписки.
	Instruments        []*InfoInstrument  `protobuf:"bytes,2,rep,name=instruments,proto3" json:"instruments,omitempty"`                                                                                                        //Массив инструментов для подписки на торговый статус.
}

func (x *SubscribeInfoRequest) Reset() {
	*x = SubscribeInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeInfoRequest) ProtoMessage() {}

func (x *SubscribeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeInfoRequest.ProtoReflect.Descriptor instead.
func (*SubscribeInfoRequest) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{15}
}

func (x *SubscribeInfoRequest) GetSubscriptionAction() SubscriptionAction {
	if x != nil {
		return x.SubscriptionAction
	}
	return SubscriptionAction_SUBSCRIPTION_ACTION_UNSPECIFIED
}

func (x *SubscribeInfoRequest) GetInstruments() []*InfoInstrument {
	if x != nil {
		return x.Instruments
	}
	return nil
}

// Запрос подписки на торговый статус.
type InfoInstrument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in marketdata.proto.
	Figi         string `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                     //Deprecated Figi-идентификатор инструмента. Необходимо использовать instrument_id.
	InstrumentId string `protobuf:"bytes,2,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"` //Идентификатор инструмента, принимает значение figi или instrument_uid
}

func (x *InfoInstrument) Reset() {
	*x = InfoInstrument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoInstrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoInstrument) ProtoMessage() {}

func (x *InfoInstrument) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoInstrument.ProtoReflect.Descriptor instead.
func (*InfoInstrument) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{16}
}

// Deprecated: Marked as deprecated in marketdata.proto.
func (x *InfoInstrument) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *InfoInstrument) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

// Результат изменения статуса подписки на торговый статус.
type SubscribeInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackingId        string              `protobuf:"bytes,1,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"`                      //Уникальный идентификатор запроса, подробнее: [tracking_id](https://russianinvestments.github.io/investAPI/grpc#tracking-id).
	InfoSubscriptions []*InfoSubscription `protobuf:"bytes,2,rep,name=info_subscriptions,json=infoSubscriptions,proto3" json:"info_subscriptions,omitempty"` //Массив статусов подписки на торговый статус.
}

func (x *SubscribeInfoResponse) Reset() {
	*x = SubscribeInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeInfoResponse) ProtoMessage() {}

func (x *SubscribeInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeInfoResponse.ProtoReflect.Descriptor instead.
func (*SubscribeInfoResponse) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{17}
}

func (x *SubscribeInfoResponse) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *SubscribeInfoResponse) GetInfoSubscriptions() []*InfoSubscription {
	if x != nil {
		return x.InfoSubscriptions
	}
	return nil
}

// Статус подписки.
type InfoSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi               string             `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                                      //Figi-идентификатор инструмента.
	SubscriptionStatus SubscriptionStatus `protobuf:"varint,2,opt,name=subscription_status,json=subscriptionStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.SubscriptionStatus" json:"subscription_status,omitempty"` //Статус подписки.
	InstrumentUid      string             `protobuf:"bytes,3,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                                                                               //Uid инструмента
	StreamId           string             `protobuf:"bytes,4,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`                                                                                              //Идентификатор открытого соединения
	SubscriptionId     string             `protobuf:"bytes,5,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`                                                                            //Идентификатор подписки в формате UUID
}

func (x *InfoSubscription) Reset() {
	*x = InfoSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoSubscription) ProtoMessage() {}

func (x *InfoSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoSubscription.ProtoReflect.Descriptor instead.
func (*InfoSubscription) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{18}
}

func (x *InfoSubscription) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *InfoSubscription) GetSubscriptionStatus() SubscriptionStatus {
	if x != nil {
		return x.SubscriptionStatus
	}
	return SubscriptionStatus_SUBSCRIPTION_STATUS_UNSPECIFIED
}

func (x *InfoSubscription) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

func (x *InfoSubscription) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *InfoSubscription) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

// Изменение статуса подписки на цену последней сделки по инструменту.
type SubscribeLastPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriptionAction SubscriptionAction     `protobuf:"varint,1,opt,name=subscription_action,json=subscriptionAction,proto3,enum=tinkoff.public.invest.api.contract.v1.SubscriptionAction" json:"subscription_action,omitempty"` //Изменение статуса подписки.
	Instruments        []*LastPriceInstrument `protobuf:"bytes,2,rep,name=instruments,proto3" json:"instruments,omitempty"`                                                                                                        //Массив инструментов для подписки на цену последней сделки.
}

func (x *SubscribeLastPriceRequest) Reset() {
	*x = SubscribeLastPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeLastPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeLastPriceRequest) ProtoMessage() {}

func (x *SubscribeLastPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeLastPriceRequest.ProtoReflect.Descriptor instead.
func (*SubscribeLastPriceRequest) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{19}
}

func (x *SubscribeLastPriceRequest) GetSubscriptionAction() SubscriptionAction {
	if x != nil {
		return x.SubscriptionAction
	}
	return SubscriptionAction_SUBSCRIPTION_ACTION_UNSPECIFIED
}

func (x *SubscribeLastPriceRequest) GetInstruments() []*LastPriceInstrument {
	if x != nil {
		return x.Instruments
	}
	return nil
}

// Запрос подписки на последнюю цену.
type LastPriceInstrument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in marketdata.proto.
	Figi         string `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                     //Deprecated Figi-идентификатор инструмента. Необходимо использовать instrument_id.
	InstrumentId string `protobuf:"bytes,2,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"` //Идентификатор инструмента, принимает значение figi или instrument_uid
}

func (x *LastPriceInstrument) Reset() {
	*x = LastPriceInstrument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastPriceInstrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastPriceInstrument) ProtoMessage() {}

func (x *LastPriceInstrument) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastPriceInstrument.ProtoReflect.Descriptor instead.
func (*LastPriceInstrument) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{20}
}

// Deprecated: Marked as deprecated in marketdata.proto.
func (x *LastPriceInstrument) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *LastPriceInstrument) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

// Результат изменения статуса подписки на цену последней сделки.
type SubscribeLastPriceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackingId             string                   `protobuf:"bytes,1,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"`                                       //Уникальный идентификатор запроса, подробнее: [tracking_id](https://russianinvestments.github.io/investAPI/grpc#tracking-id).
	LastPriceSubscriptions []*LastPriceSubscription `protobuf:"bytes,2,rep,name=last_price_subscriptions,json=lastPriceSubscriptions,proto3" json:"last_price_subscriptions,omitempty"` //Массив статусов подписки на цену последней сделки.
}

func (x *SubscribeLastPriceResponse) Reset() {
	*x = SubscribeLastPriceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeLastPriceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeLastPriceResponse) ProtoMessage() {}

func (x *SubscribeLastPriceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeLastPriceResponse.ProtoReflect.Descriptor instead.
func (*SubscribeLastPriceResponse) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{21}
}

func (x *SubscribeLastPriceResponse) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *SubscribeLastPriceResponse) GetLastPriceSubscriptions() []*LastPriceSubscription {
	if x != nil {
		return x.LastPriceSubscriptions
	}
	return nil
}

// Статус подписки на цену последней сделки.
type LastPriceSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi               string             `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                                      //Figi-идентификатор инструмента.
	SubscriptionStatus SubscriptionStatus `protobuf:"varint,2,opt,name=subscription_status,json=subscriptionStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.SubscriptionStatus" json:"subscription_status,omitempty"` //Статус подписки.
	InstrumentUid      string             `protobuf:"bytes,3,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                                                                               //Uid инструмента
	StreamId           string             `protobuf:"bytes,4,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`                                                                                              //Идентификатор открытого соединения
	SubscriptionId     string             `protobuf:"bytes,5,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`                                                                            //Идентификатор подписки в формате UUID
}

func (x *LastPriceSubscription) Reset() {
	*x = LastPriceSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastPriceSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastPriceSubscription) ProtoMessage() {}

func (x *LastPriceSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastPriceSubscription.ProtoReflect.Descriptor instead.
func (*LastPriceSubscription) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{22}
}

func (x *LastPriceSubscription) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *LastPriceSubscription) GetSubscriptionStatus() SubscriptionStatus {
	if x != nil {
		return x.SubscriptionStatus
	}
	return SubscriptionStatus_SUBSCRIPTION_STATUS_UNSPECIFIED
}

func (x *LastPriceSubscription) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

func (x *LastPriceSubscription) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *LastPriceSubscription) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

// Пакет свечей в рамках стрима.
type Candle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi          string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                          //Figi-идентификатор инструмента.
	Interval      SubscriptionInterval   `protobuf:"varint,2,opt,name=interval,proto3,enum=tinkoff.public.invest.api.contract.v1.SubscriptionInterval" json:"interval,omitempty"` //Интервал свечи.
	Open          *Quotation             `protobuf:"bytes,3,opt,name=open,proto3" json:"open,omitempty"`                                                                          //Цена открытия за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента. Для перевод цен в валюту рекомендуем использовать [информацию со страницы](https://russianinvestments.github.io/investAPI/faq_marketdata/)
	High          *Quotation             `protobuf:"bytes,4,opt,name=high,proto3" json:"high,omitempty"`                                                                          //Максимальная цена за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента. Для перевод цен в валюту рекомендуем использовать [информацию со страницы](https://russianinvestments.github.io/investAPI/faq_marketdata/)
	Low           *Quotation             `protobuf:"bytes,5,opt,name=low,proto3" json:"low,omitempty"`                                                                            //Минимальная цена за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента. Для перевод цен в валюту рекомендуем использовать [информацию со страницы](https://russianinvestments.github.io/investAPI/faq_marketdata/)
	Close         *Quotation             `protobuf:"bytes,6,opt,name=close,proto3" json:"close,omitempty"`                                                                        //Цена закрытия за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента. Для перевод цен в валюту рекомендуем использовать [информацию со страницы](https://russianinvestments.github.io/investAPI/faq_marketdata/)
	Volume        int64                  `protobuf:"varint,7,opt,name=volume,proto3" json:"volume,omitempty"`                                                                     //Объём сделок в лотах.
	Time          *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=time,proto3" json:"time,omitempty"`                                                                          //Время начала интервала свечи в часовом поясе UTC.
	LastTradeTs   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=last_trade_ts,json=lastTradeTs,proto3" json:"last_trade_ts,omitempty"`                                       //Время последней сделки, вошедшей в свечу в часовом поясе UTC.
	InstrumentUid string                 `protobuf:"bytes,10,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                                  //Uid инструмента
}

func (x *Candle) Reset() {
	*x = Candle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Candle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Candle) ProtoMessage() {}

func (x *Candle) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Candle.ProtoReflect.Descriptor instead.
func (*Candle) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{23}
}

func (x *Candle) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *Candle) GetInterval() SubscriptionInterval {
	if x != nil {
		return x.Interval
	}
	return SubscriptionInterval_SUBSCRIPTION_INTERVAL_UNSPECIFIED
}

func (x *Candle) GetOpen() *Quotation {
	if x != nil {
		return x.Open
	}
	return nil
}

func (x *Candle) GetHigh() *Quotation {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *Candle) GetLow() *Quotation {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *Candle) GetClose() *Quotation {
	if x != nil {
		return x.Close
	}
	return nil
}

func (x *Candle) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Candle) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Candle) GetLastTradeTs() *timestamppb.Timestamp {
	if x != nil {
		return x.LastTradeTs
	}
	return nil
}

func (x *Candle) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

// Пакет стаканов в рамках стрима.
type OrderBook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi          string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                     //Figi-идентификатор инструмента.
	Depth         int32                  `protobuf:"varint,2,opt,name=depth,proto3" json:"depth,omitempty"`                                                                                                  //Глубина стакана.
	IsConsistent  bool                   `protobuf:"varint,3,opt,name=is_consistent,json=isConsistent,proto3" json:"is_consistent,omitempty"`                                                                //Флаг консистентности стакана. **false** значит не все заявки попали в стакан по причинам сетевых задержек или нарушения порядка доставки.
	Bids          []*Order               `protobuf:"bytes,4,rep,name=bids,proto3" json:"bids,omitempty"`                                                                                                     //Массив предложений.
	Asks          []*Order               `protobuf:"bytes,5,rep,name=asks,proto3" json:"asks,omitempty"`                                                                                                     //Массив спроса.
	Time          *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=time,proto3" json:"time,omitempty"`                                                                                                     //Время формирования стакана в часовом поясе UTC по времени биржи.
	LimitUp       *Quotation             `protobuf:"bytes,7,opt,name=limit_up,json=limitUp,proto3" json:"limit_up,omitempty"`                                                                                //Верхний лимит цены за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента. Для перевод цен в валюту рекомендуем использовать [информацию со страницы](https://russianinvestments.github.io/investAPI/faq_marketdata/)
	LimitDown     *Quotation             `protobuf:"bytes,8,opt,name=limit_down,json=limitDown,proto3" json:"limit_down,omitempty"`                                                                          //Нижний лимит цены за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента. Для перевод цен в валюту рекомендуем использовать [информацию со страницы](https://russianinvestments.github.io/investAPI/faq_marketdata/)
	InstrumentUid string                 `protobuf:"bytes,9,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                                                              //Uid инструмента
	OrderBookType OrderBookType          `protobuf:"varint,10,opt,name=order_book_type,json=orderBookType,proto3,enum=tinkoff.public.invest.api.contract.v1.OrderBookType" json:"order_book_type,omitempty"` //Тип стакана
}

func (x *OrderBook) Reset() {
	*x = OrderBook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBook) ProtoMessage() {}

func (x *OrderBook) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBook.ProtoReflect.Descriptor instead.
func (*OrderBook) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{24}
}

func (x *OrderBook) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *OrderBook) GetDepth() int32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *OrderBook) GetIsConsistent() bool {
	if x != nil {
		return x.IsConsistent
	}
	return false
}

func (x *OrderBook) GetBids() []*Order {
	if x != nil {
		return x.Bids
	}
	return nil
}

func (x *OrderBook) GetAsks() []*Order {
	if x != nil {
		return x.Asks
	}
	return nil
}

func (x *OrderBook) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *OrderBook) GetLimitUp() *Quotation {
	if x != nil {
		return x.LimitUp
	}
	return nil
}

func (x *OrderBook) GetLimitDown() *Quotation {
	if x != nil {
		return x.LimitDown
	}
	return nil
}

func (x *OrderBook) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

func (x *OrderBook) GetOrderBookType() OrderBookType {
	if x != nil {
		return x.OrderBookType
	}
	return OrderBookType_ORDERBOOK_TYPE_UNSPECIFIED
}

// Массив предложений/спроса.
type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price    *Quotation `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`        //Цена за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента. Для перевод цен в валюту рекомендуем использовать [информацию со страницы](https://russianinvestments.github.io/investAPI/faq_marketdata/)
	Quantity int64      `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"` //Количество в лотах.
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{25}
}

func (x *Order) GetPrice() *Quotation {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *Order) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

// Информация о сделке.
type Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi          string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                           //Figi-идентификатор инструмента.
	Direction     TradeDirection         `protobuf:"varint,2,opt,name=direction,proto3,enum=tinkoff.public.invest.api.contract.v1.TradeDirection" json:"direction,omitempty"`      //Направление сделки.
	Price         *Quotation             `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`                                                                         //Цена за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента. Для перевод цен в валюту рекомендуем использовать [информацию со страницы](https://russianinvestments.github.io/investAPI/faq_marketdata/)
	Quantity      int64                  `protobuf:"varint,4,opt,name=quantity,proto3" json:"quantity,omitempty"`                                                                  //Количество лотов.
	Time          *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`                                                                           //Время сделки в часовом поясе UTC по времени биржи.
	InstrumentUid string                 `protobuf:"bytes,6,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                                    //Uid инструмента
	TradeSource   TradeSourceType        `protobuf:"varint,7,opt,name=tradeSource,proto3,enum=tinkoff.public.invest.api.contract.v1.TradeSourceType" json:"tradeSource,omitempty"` //Источник сделки
}

func (x *Trade) Reset() {
	*x = Trade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{26}
}

func (x *Trade) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *Trade) GetDirection() TradeDirection {
	if x != nil {
		return x.Direction
	}
	return TradeDirection_TRADE_DIRECTION_UNSPECIFIED
}

func (x *Trade) GetPrice() *Quotation {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *Trade) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Trade) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Trade) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

func (x *Trade) GetTradeSource() TradeSourceType {
	if x != nil {
		return x.TradeSource
	}
	return TradeSourceType_TRADE_SOURCE_UNSPECIFIED
}

// Пакет изменения торгового статуса.
type TradingStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi                     string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                          //Figi-идентификатор инструмента.
	TradingStatus            SecurityTradingStatus  `protobuf:"varint,2,opt,name=trading_status,json=tradingStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.SecurityTradingStatus" json:"trading_status,omitempty"` //Статус торговли инструментом.
	Time                     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`                                                                                                          //Время изменения торгового статуса в часовом поясе UTC.
	LimitOrderAvailableFlag  bool                   `protobuf:"varint,4,opt,name=limit_order_available_flag,json=limitOrderAvailableFlag,proto3" json:"limit_order_available_flag,omitempty"`                                //Признак доступности выставления лимитной заявки по инструменту.
	MarketOrderAvailableFlag bool                   `protobuf:"varint,5,opt,name=market_order_available_flag,json=marketOrderAvailableFlag,proto3" json:"market_order_available_flag,omitempty"`                             //Признак доступности выставления рыночной заявки по инструменту.
	InstrumentUid            string                 `protobuf:"bytes,6,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                                                                   //Uid инструмента
}

func (x *TradingStatus) Reset() {
	*x = TradingStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingStatus) ProtoMessage() {}

func (x *TradingStatus) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingStatus.ProtoReflect.Descriptor instead.
func (*TradingStatus) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{27}
}

func (x *TradingStatus) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *TradingStatus) GetTradingStatus() SecurityTradingStatus {
	if x != nil {
		return x.TradingStatus
	}
	return SecurityTradingStatus_SECURITY_TRADING_STATUS_UNSPECIFIED
}

func (x *TradingStatus) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *TradingStatus) GetLimitOrderAvailableFlag() bool {
	if x != nil {
		return x.LimitOrderAvailableFlag
	}
	return false
}

func (x *TradingStatus) GetMarketOrderAvailableFlag() bool {
	if x != nil {
		return x.MarketOrderAvailableFlag
	}
	return false
}

func (x *TradingStatus) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

// Запрос исторических свечей.
type GetCandlesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in marketdata.proto.
	Figi             *string                         `protobuf:"bytes,1,opt,name=figi,proto3,oneof" json:"figi,omitempty"`                                                                                                                              //Deprecated Figi-идентификатор инструмента. Необходимо использовать instrument_id.
	From             *timestamppb.Timestamp          `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`                                                                                                                                    //Начало запрашиваемого периода в часовом поясе UTC.
	To               *timestamppb.Timestamp          `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`                                                                                                                                        //Окончание запрашиваемого периода в часовом поясе UTC.
	Interval         CandleInterval                  `protobuf:"varint,4,opt,name=interval,proto3,enum=tinkoff.public.invest.api.contract.v1.CandleInterval" json:"interval,omitempty"`                                                                 //Интервал запрошенных свечей.
	InstrumentId     *string                         `protobuf:"bytes,5,opt,name=instrument_id,json=instrumentId,proto3,oneof" json:"instrument_id,omitempty"`                                                                                          //Идентификатор инструмента, принимает значение figi или instrument_uid.
	CandleSourceType *GetCandlesRequest_CandleSource `protobuf:"varint,7,opt,name=candle_source_type,json=candleSourceType,proto3,enum=tinkoff.public.invest.api.contract.v1.GetCandlesRequest_CandleSource,oneof" json:"candle_source_type,omitempty"` //Тип источника свечи
}

func (x *GetCandlesRequest) Reset() {
	*x = GetCandlesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCandlesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCandlesRequest) ProtoMessage() {}

func (x *GetCandlesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCandlesRequest.ProtoReflect.Descriptor instead.
func (*GetCandlesRequest) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{28}
}

// Deprecated: Marked as deprecated in marketdata.proto.
func (x *GetCandlesRequest) GetFigi() string {
	if x != nil && x.Figi != nil {
		return *x.Figi
	}
	return ""
}

func (x *GetCandlesRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *GetCandlesRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *GetCandlesRequest) GetInterval() CandleInterval {
	if x != nil {
		return x.Interval
	}
	return CandleInterval_CANDLE_INTERVAL_UNSPECIFIED
}

func (x *GetCandlesRequest) GetInstrumentId() string {
	if x != nil && x.InstrumentId != nil {
		return *x.InstrumentId
	}
	return ""
}

func (x *GetCandlesRequest) GetCandleSourceType() GetCandlesRequest_CandleSource {
	if x != nil && x.CandleSourceType != nil {
		return *x.CandleSourceType
	}
	return GetCandlesRequest_CANDLE_SOURCE_UNSPECIFIED
}

// Список свечей.
type GetCandlesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Candles []*HistoricCandle `protobuf:"bytes,1,rep,name=candles,proto3" json:"candles,omitempty"` //Массив свечей.
}

func (x *GetCandlesResponse) Reset() {
	*x = GetCandlesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCandlesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCandlesResponse) ProtoMessage() {}

func (x *GetCandlesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCandlesResponse.ProtoReflect.Descriptor instead.
func (*GetCandlesResponse) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{29}
}

func (x *GetCandlesResponse) GetCandles() []*HistoricCandle {
	if x != nil {
		return x.Candles
	}
	return nil
}

// Информация о свече.
type HistoricCandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Open         *Quotation             `protobuf:"bytes,1,opt,name=open,proto3" json:"open,omitempty"`                                                                                              //Цена открытия за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента. Для перевод цен в валюту рекомендуем использовать [информацию со страницы](https://russianinvestments.github.io/investAPI/faq_marketdata/)
	High         *Quotation             `protobuf:"bytes,2,opt,name=high,proto3" json:"high,omitempty"`                                                                                              //Максимальная цена за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента. Для перевод цен в валюту рекомендуем использовать [информацию со страницы](https://russianinvestments.github.io/investAPI/faq_marketdata/)
	Low          *Quotation             `protobuf:"bytes,3,opt,name=low,proto3" json:"low,omitempty"`                                                                                                //Минимальная цена за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента. Для перевод цен в валюту рекомендуем использовать [информацию со страницы](https://russianinvestments.github.io/investAPI/faq_marketdata/)
	Close        *Quotation             `protobuf:"bytes,4,opt,name=close,proto3" json:"close,omitempty"`                                                                                            //Цена закрытия за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента. Для перевод цен в валюту рекомендуем использовать [информацию со страницы](https://russianinvestments.github.io/investAPI/faq_marketdata/)
	Volume       int64                  `protobuf:"varint,5,opt,name=volume,proto3" json:"volume,omitempty"`                                                                                         //Объём торгов в лотах.
	Time         *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=time,proto3" json:"time,omitempty"`                                                                                              //Время свечи в часовом поясе UTC.
	IsComplete   bool                   `protobuf:"varint,7,opt,name=is_complete,json=isComplete,proto3" json:"is_complete,omitempty"`                                                               //Признак завершённости свечи. **false** значит, свеча за текущие интервал ещё сформирована не полностью.
	CandleSource CandleSource           `protobuf:"varint,9,opt,name=candle_source,json=candleSource,proto3,enum=tinkoff.public.invest.api.contract.v1.CandleSource" json:"candle_source,omitempty"` //Тип источника свечи
}

func (x *HistoricCandle) Reset() {
	*x = HistoricCandle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricCandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricCandle) ProtoMessage() {}

func (x *HistoricCandle) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricCandle.ProtoReflect.Descriptor instead.
func (*HistoricCandle) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{30}
}

func (x *HistoricCandle) GetOpen() *Quotation {
	if x != nil {
		return x.Open
	}
	return nil
}

func (x *HistoricCandle) GetHigh() *Quotation {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *HistoricCandle) GetLow() *Quotation {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *HistoricCandle) GetClose() *Quotation {
	if x != nil {
		return x.Close
	}
	return nil
}

func (x *HistoricCandle) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *HistoricCandle) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *HistoricCandle) GetIsComplete() bool {
	if x != nil {
		return x.IsComplete
	}
	return false
}

func (x *HistoricCandle) GetCandleSource() CandleSource {
	if x != nil {
		return x.CandleSource
	}
	return CandleSource_CANDLE_SOURCE_UNSPECIFIED
}

// Запрос получения цен последних сделок.
type GetLastPricesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in marketdata.proto.
	Figi         []string `protobuf:"bytes,1,rep,name=figi,proto3" json:"figi,omitempty"`                                     //Deprecated Figi-идентификатор инструмента. Необходимо использовать instrument_id.
	InstrumentId []string `protobuf:"bytes,2,rep,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"` //Массив идентификаторов инструмента, принимает значения figi или instrument_uid.
}

func (x *GetLastPricesRequest) Reset() {
	*x = GetLastPricesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLastPricesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastPricesRequest) ProtoMessage() {}

func (x *GetLastPricesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastPricesRequest.ProtoReflect.Descriptor instead.
func (*GetLastPricesRequest) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{31}
}

// Deprecated: Marked as deprecated in marketdata.proto.
func (x *GetLastPricesRequest) GetFigi() []string {
	if x != nil {
		return x.Figi
	}
	return nil
}

func (x *GetLastPricesRequest) GetInstrumentId() []string {
	if x != nil {
		return x.InstrumentId
	}
	return nil
}

// Список цен последних сделок.
type GetLastPricesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastPrices []*LastPrice `protobuf:"bytes,1,rep,name=last_prices,json=lastPrices,proto3" json:"last_prices,omitempty"` //Массив цен последних сделок.
}

func (x *GetLastPricesResponse) Reset() {
	*x = GetLastPricesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLastPricesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastPricesResponse) ProtoMessage() {}

func (x *GetLastPricesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastPricesResponse.ProtoReflect.Descriptor instead.
func (*GetLastPricesResponse) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{32}
}

func (x *GetLastPricesResponse) GetLastPrices() []*LastPrice {
	if x != nil {
		return x.LastPrices
	}
	return nil
}

// Информация о цене последней сделки.
type LastPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi          string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                         //Figi инструмента.
	Price         *Quotation             `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`                                       //Цена последней сделки за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента. Для перевод цен в валюту рекомендуем использовать [информацию со страницы](https://russianinvestments.github.io/investAPI/faq_marketdata/)
	Time          *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`                                         //Время получения последней цены в часовом поясе UTC по времени биржи.
	InstrumentUid string                 `protobuf:"bytes,11,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"` //Uid инструмента
}

func (x *LastPrice) Reset() {
	*x = LastPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastPrice) ProtoMessage() {}

func (x *LastPrice) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastPrice.ProtoReflect.Descriptor instead.
func (*LastPrice) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{33}
}

func (x *LastPrice) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *LastPrice) GetPrice() *Quotation {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *LastPrice) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *LastPrice) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

// Запрос стакана.
type GetOrderBookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in marketdata.proto.
	Figi         *string `protobuf:"bytes,1,opt,name=figi,proto3,oneof" json:"figi,omitempty"`                                     //Deprecated Figi-идентификатор инструмента. Необходимо использовать instrument_id.
	Depth        int32   `protobuf:"varint,2,opt,name=depth,proto3" json:"depth,omitempty"`                                        //Глубина стакана.
	InstrumentId *string `protobuf:"bytes,3,opt,name=instrument_id,json=instrumentId,proto3,oneof" json:"instrument_id,omitempty"` //Идентификатор инструмента, принимает значение figi или instrument_uid.
}

func (x *GetOrderBookRequest) Reset() {
	*x = GetOrderBookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderBookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderBookRequest) ProtoMessage() {}

func (x *GetOrderBookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderBookRequest.ProtoReflect.Descriptor instead.
func (*GetOrderBookRequest) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{34}
}

// Deprecated: Marked as deprecated in marketdata.proto.
func (x *GetOrderBookRequest) GetFigi() string {
	if x != nil && x.Figi != nil {
		return *x.Figi
	}
	return ""
}

func (x *GetOrderBookRequest) GetDepth() int32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *GetOrderBookRequest) GetInstrumentId() string {
	if x != nil && x.InstrumentId != nil {
		return *x.InstrumentId
	}
	return ""
}

// Информация о стакане.
type GetOrderBookResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi          string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                        //Figi-идентификатор инструмента.
	Depth         int32                  `protobuf:"varint,2,opt,name=depth,proto3" json:"depth,omitempty"`                                     //Глубина стакана.
	Bids          []*Order               `protobuf:"bytes,3,rep,name=bids,proto3" json:"bids,omitempty"`                                        //Множество пар значений на покупку.
	Asks          []*Order               `protobuf:"bytes,4,rep,name=asks,proto3" json:"asks,omitempty"`                                        //Множество пар значений на продажу.
	LastPrice     *Quotation             `protobuf:"bytes,5,opt,name=last_price,json=lastPrice,proto3" json:"last_price,omitempty"`             //Цена последней сделки за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента. Для перевод цен в валюту рекомендуем использовать [информацию со страницы](https://russianinvestments.github.io/investAPI/faq_marketdata/)
	ClosePrice    *Quotation             `protobuf:"bytes,6,opt,name=close_price,json=closePrice,proto3" json:"close_price,omitempty"`          //Цена закрытия за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента. Для перевод цен в валюту рекомендуем использовать [информацию со страницы](https://russianinvestments.github.io/investAPI/faq_marketdata/)
	LimitUp       *Quotation             `protobuf:"bytes,7,opt,name=limit_up,json=limitUp,proto3" json:"limit_up,omitempty"`                   //Верхний лимит цены за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента. Для перевод цен в валюту рекомендуем использовать [информацию со страницы](https://russianinvestments.github.io/investAPI/faq_marketdata/)
	LimitDown     *Quotation             `protobuf:"bytes,8,opt,name=limit_down,json=limitDown,proto3" json:"limit_down,omitempty"`             //Нижний лимит цены за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента. Для перевод цен в валюту рекомендуем использовать [информацию со страницы](https://russianinvestments.github.io/investAPI/faq_marketdata/)
	LastPriceTs   *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=last_price_ts,json=lastPriceTs,proto3" json:"last_price_ts,omitempty"`    //Время получения цены последней сделки.
	ClosePriceTs  *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=close_price_ts,json=closePriceTs,proto3" json:"close_price_ts,omitempty"` //Время получения цены закрытия.
	OrderbookTs   *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=orderbook_ts,json=orderbookTs,proto3" json:"orderbook_ts,omitempty"`      //Время формирования стакана на бирже.
	InstrumentUid string                 `protobuf:"bytes,9,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"` //Uid инструмента.
}

func (x *GetOrderBookResponse) Reset() {
	*x = GetOrderBookResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderBookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderBookResponse) ProtoMessage() {}

func (x *GetOrderBookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderBookResponse.ProtoReflect.Descriptor instead.
func (*GetOrderBookResponse) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{35}
}

func (x *GetOrderBookResponse) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *GetOrderBookResponse) GetDepth() int32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *GetOrderBookResponse) GetBids() []*Order {
	if x != nil {
		return x.Bids
	}
	return nil
}

func (x *GetOrderBookResponse) GetAsks() []*Order {
	if x != nil {
		return x.Asks
	}
	return nil
}

func (x *GetOrderBookResponse) GetLastPrice() *Quotation {
	if x != nil {
		return x.LastPrice
	}
	return nil
}

func (x *GetOrderBookResponse) GetClosePrice() *Quotation {
	if x != nil {
		return x.ClosePrice
	}
	return nil
}

func (x *GetOrderBookResponse) GetLimitUp() *Quotation {
	if x != nil {
		return x.LimitUp
	}
	return nil
}

func (x *GetOrderBookResponse) GetLimitDown() *Quotation {
	if x != nil {
		return x.LimitDown
	}
	return nil
}

func (x *GetOrderBookResponse) GetLastPriceTs() *timestamppb.Timestamp {
	if x != nil {
		return x.LastPriceTs
	}
	return nil
}

func (x *GetOrderBookResponse) GetClosePriceTs() *timestamppb.Timestamp {
	if x != nil {
		return x.ClosePriceTs
	}
	return nil
}

func (x *GetOrderBookResponse) GetOrderbookTs() *timestamppb.Timestamp {
	if x != nil {
		return x.OrderbookTs
	}
	return nil
}

func (x *GetOrderBookResponse) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

// Запрос получения торгового статуса.
type GetTradingStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in marketdata.proto.
	Figi         *string `protobuf:"bytes,1,opt,name=figi,proto3,oneof" json:"figi,omitempty"`                                     //Deprecated Figi-идентификатор инструмента. Необходимо использовать instrument_id.
	InstrumentId *string `protobuf:"bytes,2,opt,name=instrument_id,json=instrumentId,proto3,oneof" json:"instrument_id,omitempty"` //Идентификатор инструмента, принимает значение figi или instrument_uid.
}

func (x *GetTradingStatusRequest) Reset() {
	*x = GetTradingStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTradingStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTradingStatusRequest) ProtoMessage() {}

func (x *GetTradingStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTradingStatusRequest.ProtoReflect.Descriptor instead.
func (*GetTradingStatusRequest) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{36}
}

// Deprecated: Marked as deprecated in marketdata.proto.
func (x *GetTradingStatusRequest) GetFigi() string {
	if x != nil && x.Figi != nil {
		return *x.Figi
	}
	return ""
}

func (x *GetTradingStatusRequest) GetInstrumentId() string {
	if x != nil && x.InstrumentId != nil {
		return *x.InstrumentId
	}
	return ""
}

// Запрос получения торгового статуса.
type GetTradingStatusesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentId []string `protobuf:"bytes,1,rep,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"` //Идентификатор инструмента, принимает значение figi или instrument_uid
}

func (x *GetTradingStatusesRequest) Reset() {
	*x = GetTradingStatusesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTradingStatusesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTradingStatusesRequest) ProtoMessage() {}

func (x *GetTradingStatusesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTradingStatusesRequest.ProtoReflect.Descriptor instead.
func (*GetTradingStatusesRequest) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{37}
}

func (x *GetTradingStatusesRequest) GetInstrumentId() []string {
	if x != nil {
		return x.InstrumentId
	}
	return nil
}

// Информация о торговом статусе.
type GetTradingStatusesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingStatuses []*GetTradingStatusResponse `protobuf:"bytes,1,rep,name=trading_statuses,json=tradingStatuses,proto3" json:"trading_statuses,omitempty"` //Массив информации о торговых статусах
}

func (x *GetTradingStatusesResponse) Reset() {
	*x = GetTradingStatusesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTradingStatusesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTradingStatusesResponse) ProtoMessage() {}

func (x *GetTradingStatusesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTradingStatusesResponse.ProtoReflect.Descriptor instead.
func (*GetTradingStatusesResponse) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{38}
}

func (x *GetTradingStatusesResponse) GetTradingStatuses() []*GetTradingStatusResponse {
	if x != nil {
		return x.TradingStatuses
	}
	return nil
}

// Информация о торговом статусе.
type GetTradingStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi                        string                `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                          //Figi-идентификатор инструмента.
	TradingStatus               SecurityTradingStatus `protobuf:"varint,2,opt,name=trading_status,json=tradingStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.SecurityTradingStatus" json:"trading_status,omitempty"` //Статус торговли инструментом.
	LimitOrderAvailableFlag     bool                  `protobuf:"varint,3,opt,name=limit_order_available_flag,json=limitOrderAvailableFlag,proto3" json:"limit_order_available_flag,omitempty"`                                //Признак доступности выставления лимитной заявки по инструменту.
	MarketOrderAvailableFlag    bool                  `protobuf:"varint,4,opt,name=market_order_available_flag,json=marketOrderAvailableFlag,proto3" json:"market_order_available_flag,omitempty"`                             //Признак доступности выставления рыночной заявки по инструменту.
	ApiTradeAvailableFlag       bool                  `protobuf:"varint,5,opt,name=api_trade_available_flag,json=apiTradeAvailableFlag,proto3" json:"api_trade_available_flag,omitempty"`                                      //Признак доступности торгов через API.
	InstrumentUid               string                `protobuf:"bytes,6,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                                                                   //Uid инструмента.
	BestpriceOrderAvailableFlag bool                  `protobuf:"varint,8,opt,name=bestprice_order_available_flag,json=bestpriceOrderAvailableFlag,proto3" json:"bestprice_order_available_flag,omitempty"`                    //Признак доступности завяки по лучшей цене
	OnlyBestPrice               bool                  `protobuf:"varint,9,opt,name=only_best_price,json=onlyBestPrice,proto3" json:"only_best_price,omitempty"`                                                                //Признак доступности только заявки по лучшей цене
}

func (x *GetTradingStatusResponse) Reset() {
	*x = GetTradingStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTradingStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTradingStatusResponse) ProtoMessage() {}

func (x *GetTradingStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTradingStatusResponse.ProtoReflect.Descriptor instead.
func (*GetTradingStatusResponse) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{39}
}

func (x *GetTradingStatusResponse) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *GetTradingStatusResponse) GetTradingStatus() SecurityTradingStatus {
	if x != nil {
		return x.TradingStatus
	}
	return SecurityTradingStatus_SECURITY_TRADING_STATUS_UNSPECIFIED
}

func (x *GetTradingStatusResponse) GetLimitOrderAvailableFlag() bool {
	if x != nil {
		return x.LimitOrderAvailableFlag
	}
	return false
}

func (x *GetTradingStatusResponse) GetMarketOrderAvailableFlag() bool {
	if x != nil {
		return x.MarketOrderAvailableFlag
	}
	return false
}

func (x *GetTradingStatusResponse) GetApiTradeAvailableFlag() bool {
	if x != nil {
		return x.ApiTradeAvailableFlag
	}
	return false
}

func (x *GetTradingStatusResponse) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

func (x *GetTradingStatusResponse) GetBestpriceOrderAvailableFlag() bool {
	if x != nil {
		return x.BestpriceOrderAvailableFlag
	}
	return false
}

func (x *GetTradingStatusResponse) GetOnlyBestPrice() bool {
	if x != nil {
		return x.OnlyBestPrice
	}
	return false
}

// Запрос обезличенных сделок за последний час.
type GetLastTradesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in marketdata.proto.
	Figi         *string                `protobuf:"bytes,1,opt,name=figi,proto3,oneof" json:"figi,omitempty"`                                     //Deprecated Figi-идентификатор инструмента. Необходимо использовать instrument_id.
	From         *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`                                           //Начало запрашиваемого периода в часовом поясе UTC.
	To           *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`                                               //Окончание запрашиваемого периода в часовом поясе UTC.
	InstrumentId *string                `protobuf:"bytes,4,opt,name=instrument_id,json=instrumentId,proto3,oneof" json:"instrument_id,omitempty"` //Идентификатор инструмента, принимает значение figi или instrument_uid.
}

func (x *GetLastTradesRequest) Reset() {
	*x = GetLastTradesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLastTradesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastTradesRequest) ProtoMessage() {}

func (x *GetLastTradesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastTradesRequest.ProtoReflect.Descriptor instead.
func (*GetLastTradesRequest) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{40}
}

// Deprecated: Marked as deprecated in marketdata.proto.
func (x *GetLastTradesRequest) GetFigi() string {
	if x != nil && x.Figi != nil {
		return *x.Figi
	}
	return ""
}

func (x *GetLastTradesRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *GetLastTradesRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *GetLastTradesRequest) GetInstrumentId() string {
	if x != nil && x.InstrumentId != nil {
		return *x.InstrumentId
	}
	return ""
}

// Обезличенных сделок за последний час.
type GetLastTradesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trades []*Trade `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"` //Массив сделок.
}

func (x *GetLastTradesResponse) Reset() {
	*x = GetLastTradesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLastTradesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastTradesResponse) ProtoMessage() {}

func (x *GetLastTradesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastTradesResponse.ProtoReflect.Descriptor instead.
func (*GetLastTradesResponse) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{41}
}

func (x *GetLastTradesResponse) GetTrades() []*Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

// Запрос активных подписок. Запрос вернет по одному сообщению на каждый тип активных подписок (SubscribeLastPriceResponse, SubscribeInfoResponse, SubscribeTradesResponse, SubscribeOrderBookResponse, SubscribeCandlesResponse)
type GetMySubscriptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMySubscriptions) Reset() {
	*x = GetMySubscriptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMySubscriptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMySubscriptions) ProtoMessage() {}

func (x *GetMySubscriptions) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMySubscriptions.ProtoReflect.Descriptor instead.
func (*GetMySubscriptions) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{42}
}

// Запрос цен закрытия торговой сессии по инструментам.
type GetClosePricesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instruments []*InstrumentClosePriceRequest `protobuf:"bytes,1,rep,name=instruments,proto3" json:"instruments,omitempty"` //Массив по инструментам.
}

func (x *GetClosePricesRequest) Reset() {
	*x = GetClosePricesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClosePricesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClosePricesRequest) ProtoMessage() {}

func (x *GetClosePricesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClosePricesRequest.ProtoReflect.Descriptor instead.
func (*GetClosePricesRequest) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{43}
}

func (x *GetClosePricesRequest) GetInstruments() []*InstrumentClosePriceRequest {
	if x != nil {
		return x.Instruments
	}
	return nil
}

// Запрос цен закрытия торговой сессии по инструменту.
type InstrumentClosePriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentId string `protobuf:"bytes,1,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"` //Идентификатор инструмента, принимает значение figi или instrument_uid.
}

func (x *InstrumentClosePriceRequest) Reset() {
	*x = InstrumentClosePriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentClosePriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentClosePriceRequest) ProtoMessage() {}

func (x *InstrumentClosePriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentClosePriceRequest.ProtoReflect.Descriptor instead.
func (*InstrumentClosePriceRequest) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{44}
}

func (x *InstrumentClosePriceRequest) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

// Цены закрытия торговой сессии по инструментам.
type GetClosePricesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClosePrices []*InstrumentClosePriceResponse `protobuf:"bytes,1,rep,name=close_prices,json=closePrices,proto3" json:"close_prices,omitempty"` //Массив по инструментам.
}

func (x *GetClosePricesResponse) Reset() {
	*x = GetClosePricesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClosePricesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClosePricesResponse) ProtoMessage() {}

func (x *GetClosePricesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClosePricesResponse.ProtoReflect.Descriptor instead.
func (*GetClosePricesResponse) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{45}
}

func (x *GetClosePricesResponse) GetClosePrices() []*InstrumentClosePriceResponse {
	if x != nil {
		return x.ClosePrices
	}
	return nil
}

// Цена закрытия торговой сессии по инструменту.
type InstrumentClosePriceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi                string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                             //Figi инструмента.
	InstrumentUid       string                 `protobuf:"bytes,2,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                      //Uid инструмента.
	Price               *Quotation             `protobuf:"bytes,11,opt,name=price,proto3" json:"price,omitempty"`                                                          //Цена закрытия торговой сессии.
	EveningSessionPrice *Quotation             `protobuf:"bytes,12,opt,name=evening_session_price,json=eveningSessionPrice,proto3" json:"evening_session_price,omitempty"` //Цена последней сделки с вечерней сессии
	Time                *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=time,proto3" json:"time,omitempty"`                                                            //Дата совершения торгов.
}

func (x *InstrumentClosePriceResponse) Reset() {
	*x = InstrumentClosePriceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentClosePriceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentClosePriceResponse) ProtoMessage() {}

func (x *InstrumentClosePriceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentClosePriceResponse.ProtoReflect.Descriptor instead.
func (*InstrumentClosePriceResponse) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{46}
}

func (x *InstrumentClosePriceResponse) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *InstrumentClosePriceResponse) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

func (x *InstrumentClosePriceResponse) GetPrice() *Quotation {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *InstrumentClosePriceResponse) GetEveningSessionPrice() *Quotation {
	if x != nil {
		return x.EveningSessionPrice
	}
	return nil
}

func (x *InstrumentClosePriceResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type GetTechAnalysisRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndicatorType GetTechAnalysisRequest_IndicatorType     `protobuf:"varint,1,opt,name=indicator_type,json=indicatorType,proto3,enum=tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest_IndicatorType" json:"indicator_type,omitempty"` //Тип технического индикатора.
	InstrumentUid string                                   `protobuf:"bytes,2,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                                                                                  //Uid инструмента.
	From          *timestamppb.Timestamp                   `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`                                                                                                                         //Начало запрашиваемого периода в часовом поясе UTC.
	To            *timestamppb.Timestamp                   `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`                                                                                                                             //Окончание запрашиваемого периода в часовом поясе UTC.
	Interval      GetTechAnalysisRequest_IndicatorInterval `protobuf:"varint,5,opt,name=interval,proto3,enum=tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest_IndicatorInterval" json:"interval,omitempty"`                            //Интервал, за который рассчитывается индикатор.
	TypeOfPrice   GetTechAnalysisRequest_TypeOfPrice       `protobuf:"varint,6,opt,name=type_of_price,json=typeOfPrice,proto3,enum=tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest_TypeOfPrice" json:"type_of_price,omitempty"`       //Тип цены, используемый при расчёте индикатора.
	Length        int32                                    `protobuf:"varint,7,opt,name=length,proto3" json:"length,omitempty"`                                                                                                                    //Торговый период, за который рассчитывается индикатор.
	Deviation     *GetTechAnalysisRequest_Deviation        `protobuf:"bytes,8,opt,name=deviation,proto3" json:"deviation,omitempty"`                                                                                                               //Параметры отклонения.
	Smoothing     *GetTechAnalysisRequest_Smoothing        `protobuf:"bytes,9,opt,name=smoothing,proto3" json:"smoothing,omitempty"`                                                                                                               //Параметры сглаживания.
}

func (x *GetTechAnalysisRequest) Reset() {
	*x = GetTechAnalysisRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTechAnalysisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTechAnalysisRequest) ProtoMessage() {}

func (x *GetTechAnalysisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTechAnalysisRequest.ProtoReflect.Descriptor instead.
func (*GetTechAnalysisRequest) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{47}
}

func (x *GetTechAnalysisRequest) GetIndicatorType() GetTechAnalysisRequest_IndicatorType {
	if x != nil {
		return x.IndicatorType
	}
	return GetTechAnalysisRequest_INDICATOR_TYPE_UNSPECIFIED
}

func (x *GetTechAnalysisRequest) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

func (x *GetTechAnalysisRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *GetTechAnalysisRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *GetTechAnalysisRequest) GetInterval() GetTechAnalysisRequest_IndicatorInterval {
	if x != nil {
		return x.Interval
	}
	return GetTechAnalysisRequest_INDICATOR_INTERVAL_UNSPECIFIED
}

func (x *GetTechAnalysisRequest) GetTypeOfPrice() GetTechAnalysisRequest_TypeOfPrice {
	if x != nil {
		return x.TypeOfPrice
	}
	return GetTechAnalysisRequest_TYPE_OF_PRICE_UNSPECIFIED
}

func (x *GetTechAnalysisRequest) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *GetTechAnalysisRequest) GetDeviation() *GetTechAnalysisRequest_Deviation {
	if x != nil {
		return x.Deviation
	}
	return nil
}

func (x *GetTechAnalysisRequest) GetSmoothing() *GetTechAnalysisRequest_Smoothing {
	if x != nil {
		return x.Smoothing
	}
	return nil
}

type GetTechAnalysisResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TechnicalIndicators []*GetTechAnalysisResponse_TechAnalysisItem `protobuf:"bytes,1,rep,name=technical_indicators,json=technicalIndicators,proto3" json:"technical_indicators,omitempty"` //Массив значений результатов тех. анализа
}

func (x *GetTechAnalysisResponse) Reset() {
	*x = GetTechAnalysisResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTechAnalysisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTechAnalysisResponse) ProtoMessage() {}

func (x *GetTechAnalysisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTechAnalysisResponse.ProtoReflect.Descriptor instead.
func (*GetTechAnalysisResponse) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{48}
}

func (x *GetTechAnalysisResponse) GetTechnicalIndicators() []*GetTechAnalysisResponse_TechAnalysisItem {
	if x != nil {
		return x.TechnicalIndicators
	}
	return nil
}

type GetTechAnalysisRequest_Smoothing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FastLength      int32 `protobuf:"varint,1,opt,name=fast_length,json=fastLength,proto3" json:"fast_length,omitempty"`                //Короткий период сглаживания для первой экспоненциальной скользящей средней (EMA).
	SlowLength      int32 `protobuf:"varint,2,opt,name=slow_length,json=slowLength,proto3" json:"slow_length,omitempty"`                //Длинный период сглаживания для второй экспоненциальной скользящей средней (EMA).
	SignalSmoothing int32 `protobuf:"varint,3,opt,name=signal_smoothing,json=signalSmoothing,proto3" json:"signal_smoothing,omitempty"` //Период сглаживания для третьей экспоненциальной скользящей средней (EMA)
}

func (x *GetTechAnalysisRequest_Smoothing) Reset() {
	*x = GetTechAnalysisRequest_Smoothing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTechAnalysisRequest_Smoothing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTechAnalysisRequest_Smoothing) ProtoMessage() {}

func (x *GetTechAnalysisRequest_Smoothing) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTechAnalysisRequest_Smoothing.ProtoReflect.Descriptor instead.
func (*GetTechAnalysisRequest_Smoothing) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{47, 0}
}

func (x *GetTechAnalysisRequest_Smoothing) GetFastLength() int32 {
	if x != nil {
		return x.FastLength
	}
	return 0
}

func (x *GetTechAnalysisRequest_Smoothing) GetSlowLength() int32 {
	if x != nil {
		return x.SlowLength
	}
	return 0
}

func (x *GetTechAnalysisRequest_Smoothing) GetSignalSmoothing() int32 {
	if x != nil {
		return x.SignalSmoothing
	}
	return 0
}

type GetTechAnalysisRequest_Deviation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviationMultiplier *Quotation `protobuf:"bytes,1,opt,name=deviation_multiplier,json=deviationMultiplier,proto3" json:"deviation_multiplier,omitempty"` //Кол-во стандартных отклонений, на которые отступает верхняя и нижняя граница
}

func (x *GetTechAnalysisRequest_Deviation) Reset() {
	*x = GetTechAnalysisRequest_Deviation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTechAnalysisRequest_Deviation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTechAnalysisRequest_Deviation) ProtoMessage() {}

func (x *GetTechAnalysisRequest_Deviation) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTechAnalysisRequest_Deviation.ProtoReflect.Descriptor instead.
func (*GetTechAnalysisRequest_Deviation) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{47, 1}
}

func (x *GetTechAnalysisRequest_Deviation) GetDeviationMultiplier() *Quotation {
	if x != nil {
		return x.DeviationMultiplier
	}
	return nil
}

type GetTechAnalysisResponse_TechAnalysisItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp  *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                           //Временная метка по UTC, для которой были рассчитаны значения индикатора.
	MiddleBand *Quotation             `protobuf:"bytes,2,opt,name=middle_band,json=middleBand,proto3,oneof" json:"middle_band,omitempty"` //Значение простого скользящего среднего (средней линии).
	UpperBand  *Quotation             `protobuf:"bytes,3,opt,name=upper_band,json=upperBand,proto3,oneof" json:"upper_band,omitempty"`    //Значение верхней линии Боллинджера.
	LowerBand  *Quotation             `protobuf:"bytes,4,opt,name=lower_band,json=lowerBand,proto3,oneof" json:"lower_band,omitempty"`    //Значение нижней линии Боллинджера.
	Signal     *Quotation             `protobuf:"bytes,5,opt,name=signal,proto3,oneof" json:"signal,omitempty"`                           //Значение сигнальной линии.
	Macd       *Quotation             `protobuf:"bytes,6,opt,name=macd,proto3,oneof" json:"macd,omitempty"`                               //Значение линии MACD.
}

func (x *GetTechAnalysisResponse_TechAnalysisItem) Reset() {
	*x = GetTechAnalysisResponse_TechAnalysisItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTechAnalysisResponse_TechAnalysisItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTechAnalysisResponse_TechAnalysisItem) ProtoMessage() {}

func (x *GetTechAnalysisResponse_TechAnalysisItem) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTechAnalysisResponse_TechAnalysisItem.ProtoReflect.Descriptor instead.
func (*GetTechAnalysisResponse_TechAnalysisItem) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{48, 0}
}

func (x *GetTechAnalysisResponse_TechAnalysisItem) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *GetTechAnalysisResponse_TechAnalysisItem) GetMiddleBand() *Quotation {
	if x != nil {
		return x.MiddleBand
	}
	return nil
}

func (x *GetTechAnalysisResponse_TechAnalysisItem) GetUpperBand() *Quotation {
	if x != nil {
		return x.UpperBand
	}
	return nil
}

func (x *GetTechAnalysisResponse_TechAnalysisItem) GetLowerBand() *Quotation {
	if x != nil {
		return x.LowerBand
	}
	return nil
}

func (x *GetTechAnalysisResponse_TechAnalysisItem) GetSignal() *Quotation {
	if x != nil {
		return x.Signal
	}
	return nil
}

func (x *GetTechAnalysisResponse_TechAnalysisItem) GetMacd() *Quotation {
	if x != nil {
		return x.Macd
	}
	return nil
}

var File_marketdata_proto protoreflect.FileDescriptor

var file_marketdata_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x25, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x06, 0x0a, 0x11, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x7c, 0x0a, 0x19, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x63, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x17, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x83, 0x01,
	0x0a, 0x1c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x19, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x79, 0x0a, 0x18, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x16, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x73,
	0x0a, 0x16, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x83, 0x01, 0x0a, 0x1c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x61, 0x73, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x19,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6d, 0x0a, 0x14, 0x67, 0x65, 0x74,
	0x5f, 0x6d, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x48, 0x00, 0x52, 0x12, 0x67, 0x65, 0x74, 0x4d, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0x93, 0x05, 0x0a, 0x21, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7a, 0x0a, 0x19, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x17, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x1c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x19,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f,
	0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x77, 0x0a, 0x18, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x16, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x71, 0x0a, 0x16, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x14, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x1c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x61,
	0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x19,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xfe, 0x08, 0x0a, 0x12, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x7f, 0x0a, 0x1a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x63, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x18, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x86, 0x01, 0x0a, 0x1d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1a,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f,
	0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x19, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x17, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x17, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x47, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x48,
	0x00, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x00, 0x52, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x12,
	0x50, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x6f, 0x6f, 0x6b, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f,
	0x6b, 0x12, 0x5d, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48,
	0x00, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x41, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70,
	0x69, 0x6e, 0x67, 0x12, 0x86, 0x01, 0x0a, 0x1d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x61, 0x73,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x1a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x85, 0x02, 0x0a, 0x17, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x12,
	0x57, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3b, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xab, 0x01,
	0x0a, 0x18, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x6e, 0x0a, 0x15, 0x63,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x63, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xff, 0x02, 0x0a, 0x12,
	0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x12, 0x57, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x6a, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xe5, 0x01,
	0x0a, 0x19, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x13, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x13, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x6f, 0x6f, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x04, 0x66, 0x69, 0x67, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x5c, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb5,
	0x01, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x76,
	0x0a, 0x18, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f,
	0x6f, 0x6b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xf8, 0x02, 0x0a, 0x15, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x69, 0x67, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x6a, 0x0a, 0x13, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f,
	0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xb5, 0x02, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x13,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x55, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4e, 0x0a, 0x0f, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x04,
	0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04,
	0x66, 0x69, 0x67, 0x69, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xfc, 0x01, 0x0a, 0x17, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x55, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x80, 0x02, 0x0a, 0x11, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69,
	0x67, 0x69, 0x12, 0x6a, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x39, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xdb, 0x01, 0x0a, 0x14,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x39, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x57, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x66, 0x6f, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x4d, 0x0a, 0x0e, 0x49, 0x6e, 0x66,
	0x6f, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x04, 0x66,
	0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x66,
	0x69, 0x67, 0x69, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x15, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x49, 0x64, 0x12, 0x66, 0x0a, 0x12, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x69, 0x6e, 0x66, 0x6f, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xff, 0x01, 0x0a, 0x10,
	0x49, 0x6e, 0x66, 0x6f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x69, 0x67, 0x69, 0x12, 0x6a, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x39, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xe5, 0x01,
	0x0a, 0x19, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x13, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x52, 0x0a, 0x13, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x04,
	0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04,
	0x66, 0x69, 0x67, 0x69, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x1a, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x76, 0x0a, 0x18, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x84, 0x02, 0x0a, 0x15, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x12,
	0x6a, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xbc, 0x04, 0x0a, 0x06, 0x43, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x12, 0x57, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x44, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x44, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x42, 0x0a, 0x03,
	0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x6c, 0x6f, 0x77,
	0x12, 0x46, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x3e, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x22, 0xb1, 0x04, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x62, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x04, 0x62, 0x69, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x04, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x04, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x55, 0x70, 0x12, 0x4f, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x64,
	0x6f, 0x77, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x5c, 0x0a,
	0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6b, 0x0a, 0x05, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x85, 0x03, 0x0a, 0x05, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x12, 0x53, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x58, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x22, 0xdb, 0x02, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x12, 0x63, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x22, 0x8f,
	0x04, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2f, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x56, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x28, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x78, 0x0a, 0x12, 0x63, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x02, 0x52, 0x10,
	0x63, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x22, 0x49, 0x0a, 0x0c, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x66, 0x69, 0x67, 0x69, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x65, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x07, 0x63, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x07,
	0x63, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x22, 0xeb, 0x03, 0x0a, 0x0e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x6f, 0x70,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e,
	0x12, 0x44, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x42, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x46, 0x0a, 0x05, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x0d, 0x63,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x33, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x53, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x04, 0x66, 0x69, 0x67, 0x69, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x12, 0x46, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66, 0x69, 0x67, 0x69, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xee, 0x05, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12,
	0x40, 0x0a, 0x04, 0x62, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x62, 0x69, 0x64,
	0x73, 0x12, 0x40, 0x0a, 0x04, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x61,
	0x73, 0x6b, 0x73, 0x12, 0x4f, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x55, 0x70, 0x12, 0x4f, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x3e, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x54, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x74, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x6f, 0x6b, 0x54, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x22, 0x7b, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69,
	0x67, 0x69, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x66, 0x69, 0x67, 0x69, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x88, 0x01, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x10, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x22, 0xdc, 0x03, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x12, 0x63, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a,
	0x1a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x18, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x70, 0x69,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x70, 0x69,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x62, 0x65, 0x73,
	0x74, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1b, 0x62, 0x65, 0x73, 0x74, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x26,
	0x0a, 0x0f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x6e, 0x6c, 0x79, 0x42, 0x65, 0x73,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x2f, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02,
	0x74, 0x6f, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x66, 0x69, 0x67, 0x69, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x5d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x44, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x06,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x82, 0x01, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x42, 0x0a, 0x1b, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x66, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x22, 0xb7, 0x02, 0x0a, 0x1c, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67,
	0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x15,
	0x65, 0x76, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x65,
	0x76, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x89, 0x0e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x77, 0x0a,
	0x0e, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x65, 0x63, 0x68, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x69, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2f, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x70, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4f, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x72, 0x0a, 0x0d, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x49, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x63,
	0x68, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x65, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a,
	0x09, 0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x47, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x73, 0x6d, 0x6f, 0x6f, 0x74,
	0x68, 0x69, 0x6e, 0x67, 0x1a, 0x78, 0x0a, 0x09, 0x53, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x61, 0x73, 0x74, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x6c, 0x6f, 0x77, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x6d,
	0x6f, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x53, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x1a, 0x70,
	0x0a, 0x09, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x14, 0x64,
	0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x64, 0x65, 0x76,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x22, 0xdb, 0x03, 0x0a, 0x11, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e,
	0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c,
	0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x10, 0x01, 0x12, 0x23, 0x0a,
	0x1f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x56, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x56, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x53,
	0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x46, 0x54, 0x45, 0x45, 0x4e,
	0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x53, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e,
	0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c,
	0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x49,
	0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41,
	0x4c, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x49,
	0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41,
	0x4c, 0x5f, 0x32, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x44,
	0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f,
	0x33, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x44, 0x49, 0x43,
	0x41, 0x54, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x31, 0x30,
	0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x33, 0x30, 0x5f,
	0x4d, 0x49, 0x4e, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x32, 0x5f, 0x48, 0x4f,
	0x55, 0x52, 0x10, 0x0a, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x34, 0x5f, 0x48, 0x4f, 0x55,
	0x52, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x0c,
	0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x0d, 0x22, 0xa3,
	0x01, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d,
	0x0a, 0x19, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43,
	0x4c, 0x4f, 0x53, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x46, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x16,
	0x0a, 0x12, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f,
	0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x46, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x04, 0x12, 0x15, 0x0a,
	0x11, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x41,
	0x56, 0x47, 0x10, 0x05, 0x22, 0xa7, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x42, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x4d, 0x41, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x53, 0x49, 0x10, 0x03, 0x12, 0x17, 0x0a,
	0x13, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x41, 0x43, 0x44, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4d, 0x41, 0x10, 0x05, 0x22, 0xcd,
	0x05, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x14, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x65, 0x63, 0x68, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x13, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x1a,
	0xac, 0x04, 0x0a, 0x10, 0x54, 0x65, 0x63, 0x68, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x56,
	0x0a, 0x0b, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x42,
	0x61, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f,
	0x62, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x09,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x0a,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x03, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x49, 0x0a, 0x04, 0x6d, 0x61, 0x63, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x04, 0x52, 0x04, 0x6d, 0x61, 0x63, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x61, 0x63, 0x64, 0x2a, 0x81,
	0x01, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x55,
	0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x10, 0x01, 0x12, 0x23, 0x0a,
	0x1f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45,
	0x10, 0x02, 0x2a, 0x88, 0x04, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x21, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x56, 0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4f, 0x4e, 0x45, 0x5f,
	0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x55, 0x42, 0x53,
	0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41,
	0x4c, 0x5f, 0x46, 0x49, 0x56, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x53, 0x10, 0x02,
	0x12, 0x29, 0x0a, 0x25, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x46, 0x54, 0x45, 0x45,
	0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x53, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x04, 0x12,
	0x21, 0x0a, 0x1d, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x44, 0x41, 0x59,
	0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x32, 0x5f, 0x4d, 0x49,
	0x4e, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x33, 0x5f, 0x4d,
	0x49, 0x4e, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x31, 0x30,
	0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x08, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52,
	0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f,
	0x33, 0x30, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x09, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x55, 0x42, 0x53,
	0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41,
	0x4c, 0x5f, 0x32, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x0a, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x55,
	0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x56, 0x41, 0x4c, 0x5f, 0x34, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a,
	0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x0c, 0x12, 0x1f, 0x0a, 0x1b,
	0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x0d, 0x2a, 0xc5, 0x03,
	0x0a, 0x12, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x55, 0x42,
	0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x55,
	0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x36, 0x0a, 0x32, 0x53, 0x55, 0x42, 0x53,
	0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x03,
	0x12, 0x28, 0x0a, 0x24, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x50, 0x54, 0x48, 0x5f, 0x49, 0x53,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x04, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x55,
	0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x49, 0x53, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x05, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x55, 0x42, 0x53, 0x43,
	0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44,
	0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x55,
	0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x53, 0x10, 0x08, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x42,
	0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x09, 0x2a, 0x79, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x45, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x52,
	0x41, 0x44, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x03,
	0x2a, 0x64, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x59, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
	0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x45, 0x4c, 0x4c, 0x10, 0x02, 0x2a, 0x91, 0x03, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x41, 0x4e,
	0x44, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x41,
	0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x31, 0x5f,
	0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x35, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x02,
	0x12, 0x1a, 0x0a, 0x16, 0x43, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x56, 0x41, 0x4c, 0x5f, 0x31, 0x35, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14,
	0x43, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f,
	0x48, 0x4f, 0x55, 0x52, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x41, 0x4e, 0x44, 0x4c, 0x45,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x05, 0x12,
	0x19, 0x0a, 0x15, 0x43, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56,
	0x41, 0x4c, 0x5f, 0x32, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x41,
	0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x33, 0x5f,
	0x4d, 0x49, 0x4e, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x31, 0x30, 0x5f, 0x4d, 0x49, 0x4e, 0x10,
	0x08, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x56, 0x41, 0x4c, 0x5f, 0x33, 0x30, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x09, 0x12, 0x1a, 0x0a,
	0x16, 0x43, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c,
	0x5f, 0x32, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x41, 0x4e,
	0x44, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x34, 0x5f, 0x48,
	0x4f, 0x55, 0x52, 0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x0c, 0x12,
	0x19, 0x0a, 0x15, 0x43, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56,
	0x41, 0x4c, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x0d, 0x2a, 0x6b, 0x0a, 0x0c, 0x43, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x41,
	0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x41, 0x4e,
	0x44, 0x4c, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x45, 0x52, 0x5f, 0x57, 0x45,
	0x45, 0x4b, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x2a, 0x67, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x6f, 0x6f, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x42, 0x4f,
	0x4f, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x45, 0x52, 0x10, 0x02,
	0x32, 0x90, 0x09, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x38, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x39, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x3b, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x3a, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x93, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x40,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x41, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x3b, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x8d, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x3c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x90, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x12, 0x3d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x63, 0x68, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x63, 0x68, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0xcd, 0x02, 0x0a, 0x17, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x8b, 0x01, 0x0a, 0x10, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x38, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0xa3, 0x01,
	0x0a, 0x1a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x48, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x42, 0x61, 0x0a, 0x1c, 0x72, 0x75, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x69, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x0c, 0x2e, 0x2f, 0x3b, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x61, 0x70, 0x69, 0xa2, 0x02, 0x05, 0x54, 0x49, 0x41, 0x50, 0x49, 0xaa, 0x02, 0x14, 0x54, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x41, 0x70, 0x69, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x11, 0x54, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x5c, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x5c, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_marketdata_proto_rawDescOnce sync.Once
	file_marketdata_proto_rawDescData = file_marketdata_proto_rawDesc
)

func file_marketdata_proto_rawDescGZIP() []byte {
	file_marketdata_proto_rawDescOnce.Do(func() {
		file_marketdata_proto_rawDescData = protoimpl.X.CompressGZIP(file_marketdata_proto_rawDescData)
	})
	return file_marketdata_proto_rawDescData
}

var file_marketdata_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_marketdata_proto_msgTypes = make([]protoimpl.MessageInfo, 52)
var file_marketdata_proto_goTypes = []interface{}{
	(SubscriptionAction)(0),                          // 0: tinkoff.public.invest.api.contract.v1.SubscriptionAction
	(SubscriptionInterval)(0),                        // 1: tinkoff.public.invest.api.contract.v1.SubscriptionInterval
	(SubscriptionStatus)(0),                          // 2: tinkoff.public.invest.api.contract.v1.SubscriptionStatus
	(TradeSourceType)(0),                             // 3: tinkoff.public.invest.api.contract.v1.TradeSourceType
	(TradeDirection)(0),                              // 4: tinkoff.public.invest.api.contract.v1.TradeDirection
	(CandleInterval)(0),                              // 5: tinkoff.public.invest.api.contract.v1.CandleInterval
	(CandleSource)(0),                                // 6: tinkoff.public.invest.api.contract.v1.CandleSource
	(OrderBookType)(0),                               // 7: tinkoff.public.invest.api.contract.v1.OrderBookType
	(GetCandlesRequest_CandleSource)(0),              // 8: tinkoff.public.invest.api.contract.v1.GetCandlesRequest.CandleSource
	(GetTechAnalysisRequest_IndicatorInterval)(0),    // 9: tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.IndicatorInterval
	(GetTechAnalysisRequest_TypeOfPrice)(0),          // 10: tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.TypeOfPrice
	(GetTechAnalysisRequest_IndicatorType)(0),        // 11: tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.IndicatorType
	(*MarketDataRequest)(nil),                        // 12: tinkoff.public.invest.api.contract.v1.MarketDataRequest
	(*MarketDataServerSideStreamRequest)(nil),        // 13: tinkoff.public.invest.api.contract.v1.MarketDataServerSideStreamRequest
	(*MarketDataResponse)(nil),                       // 14: tinkoff.public.invest.api.contract.v1.MarketDataResponse
	(*SubscribeCandlesRequest)(nil),                  // 15: tinkoff.public.invest.api.contract.v1.SubscribeCandlesRequest
	(*CandleInstrument)(nil),                         // 16: tinkoff.public.invest.api.contract.v1.CandleInstrument
	(*SubscribeCandlesResponse)(nil),                 // 17: tinkoff.public.invest.api.contract.v1.SubscribeCandlesResponse
	(*CandleSubscription)(nil),                       // 18: tinkoff.public.invest.api.contract.v1.CandleSubscription
	(*SubscribeOrderBookRequest)(nil),                // 19: tinkoff.public.invest.api.contract.v1.SubscribeOrderBookRequest
	(*OrderBookInstrument)(nil),                      // 20: tinkoff.public.invest.api.contract.v1.OrderBookInstrument
	(*SubscribeOrderBookResponse)(nil),               // 21: tinkoff.public.invest.api.contract.v1.SubscribeOrderBookResponse
	(*OrderBookSubscription)(nil),                    // 22: tinkoff.public.invest.api.contract.v1.OrderBookSubscription
	(*SubscribeTradesRequest)(nil),                   // 23: tinkoff.public.invest.api.contract.v1.SubscribeTradesRequest
	(*TradeInstrument)(nil),                          // 24: tinkoff.public.invest.api.contract.v1.TradeInstrument
	(*SubscribeTradesResponse)(nil),                  // 25: tinkoff.public.invest.api.contract.v1.SubscribeTradesResponse
	(*TradeSubscription)(nil),                        // 26: tinkoff.public.invest.api.contract.v1.TradeSubscription
	(*SubscribeInfoRequest)(nil),                     // 27: tinkoff.public.invest.api.contract.v1.SubscribeInfoRequest
	(*InfoInstrument)(nil),                           // 28: tinkoff.public.invest.api.contract.v1.InfoInstrument
	(*SubscribeInfoResponse)(nil),                    // 29: tinkoff.public.invest.api.contract.v1.SubscribeInfoResponse
	(*InfoSubscription)(nil),                         // 30: tinkoff.public.invest.api.contract.v1.InfoSubscription
	(*SubscribeLastPriceRequest)(nil),                // 31: tinkoff.public.invest.api.contract.v1.SubscribeLastPriceRequest
	(*LastPriceInstrument)(nil),                      // 32: tinkoff.public.invest.api.contract.v1.LastPriceInstrument
	(*SubscribeLastPriceResponse)(nil),               // 33: tinkoff.public.invest.api.contract.v1.SubscribeLastPriceResponse
	(*LastPriceSubscription)(nil),                    // 34: tinkoff.public.invest.api.contract.v1.LastPriceSubscription
	(*Candle)(nil),                                   // 35: tinkoff.public.invest.api.contract.v1.Candle
	(*OrderBook)(nil),                                // 36: tinkoff.public.invest.api.contract.v1.OrderBook
	(*Order)(nil),                                    // 37: tinkoff.public.invest.api.contract.v1.Order
	(*Trade)(nil),                                    // 38: tinkoff.public.invest.api.contract.v1.Trade
	(*TradingStatus)(nil),                            // 39: tinkoff.public.invest.api.contract.v1.TradingStatus
	(*GetCandlesRequest)(nil),                        // 40: tinkoff.public.invest.api.contract.v1.GetCandlesRequest
	(*GetCandlesResponse)(nil),                       // 41: tinkoff.public.invest.api.contract.v1.GetCandlesResponse
	(*HistoricCandle)(nil),                           // 42: tinkoff.public.invest.api.contract.v1.HistoricCandle
	(*GetLastPricesRequest)(nil),                     // 43: tinkoff.public.invest.api.contract.v1.GetLastPricesRequest
	(*GetLastPricesResponse)(nil),                    // 44: tinkoff.public.invest.api.contract.v1.GetLastPricesResponse
	(*LastPrice)(nil),                                // 45: tinkoff.public.invest.api.contract.v1.LastPrice
	(*GetOrderBookRequest)(nil),                      // 46: tinkoff.public.invest.api.contract.v1.GetOrderBookRequest
	(*GetOrderBookResponse)(nil),                     // 47: tinkoff.public.invest.api.contract.v1.GetOrderBookResponse
	(*GetTradingStatusRequest)(nil),                  // 48: tinkoff.public.invest.api.contract.v1.GetTradingStatusRequest
	(*GetTradingStatusesRequest)(nil),                // 49: tinkoff.public.invest.api.contract.v1.GetTradingStatusesRequest
	(*GetTradingStatusesResponse)(nil),               // 50: tinkoff.public.invest.api.contract.v1.GetTradingStatusesResponse
	(*GetTradingStatusResponse)(nil),                 // 51: tinkoff.public.invest.api.contract.v1.GetTradingStatusResponse
	(*GetLastTradesRequest)(nil),                     // 52: tinkoff.public.invest.api.contract.v1.GetLastTradesRequest
	(*GetLastTradesResponse)(nil),                    // 53: tinkoff.public.invest.api.contract.v1.GetLastTradesResponse
	(*GetMySubscriptions)(nil),                       // 54: tinkoff.public.invest.api.contract.v1.GetMySubscriptions
	(*GetClosePricesRequest)(nil),                    // 55: tinkoff.public.invest.api.contract.v1.GetClosePricesRequest
	(*InstrumentClosePriceRequest)(nil),              // 56: tinkoff.public.invest.api.contract.v1.InstrumentClosePriceRequest
	(*GetClosePricesResponse)(nil),                   // 57: tinkoff.public.invest.api.contract.v1.GetClosePricesResponse
	(*InstrumentClosePriceResponse)(nil),             // 58: tinkoff.public.invest.api.contract.v1.InstrumentClosePriceResponse
	(*GetTechAnalysisRequest)(nil),                   // 59: tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest
	(*GetTechAnalysisResponse)(nil),                  // 60: tinkoff.public.invest.api.contract.v1.GetTechAnalysisResponse
	(*GetTechAnalysisRequest_Smoothing)(nil),         // 61: tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing
	(*GetTechAnalysisRequest_Deviation)(nil),         // 62: tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.Deviation
	(*GetTechAnalysisResponse_TechAnalysisItem)(nil), // 63: tinkoff.public.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem
	(*Ping)(nil),                                     // 64: tinkoff.public.invest.api.contract.v1.Ping
	(*Quotation)(nil),                                // 65: tinkoff.public.invest.api.contract.v1.Quotation
	(*timestamppb.Timestamp)(nil),                    // 66: google.protobuf.Timestamp
	(SecurityTradingStatus)(0),                       // 67: tinkoff.public.invest.api.contract.v1.SecurityTradingStatus
}
var file_marketdata_proto_depIdxs = []int32{
	15,  // 0: tinkoff.public.invest.api.contract.v1.MarketDataRequest.subscribe_candles_request:type_name -> tinkoff.public.invest.api.contract.v1.SubscribeCandlesRequest
	19,  // 1: tinkoff.public.invest.api.contract.v1.MarketDataRequest.subscribe_order_book_request:type_name -> tinkoff.public.invest.api.contract.v1.SubscribeOrderBookRequest
	23,  // 2: tinkoff.public.invest.api.contract.v1.MarketDataRequest.subscribe_trades_request:type_name -> tinkoff.public.invest.api.contract.v1.SubscribeTradesRequest
	27,  // 3: tinkoff.public.invest.api.contract.v1.MarketDataRequest.subscribe_info_request:type_name -> tinkoff.public.invest.api.contract.v1.SubscribeInfoRequest
	31,  // 4: tinkoff.public.invest.api.contract.v1.MarketDataRequest.subscribe_last_price_request:type_name -> tinkoff.public.invest.api.contract.v1.SubscribeLastPriceRequest
	54,  // 5: tinkoff.public.invest.api.contract.v1.MarketDataRequest.get_my_subscriptions:type_name -> tinkoff.public.invest.api.contract.v1.GetMySubscriptions
	15,  // 6: tinkoff.public.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_candles_request:type_name -> tinkoff.public.invest.api.contract.v1.SubscribeCandlesRequest
	19,  // 7: tinkoff.public.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_order_book_request:type_name -> tinkoff.public.invest.api.contract.v1.SubscribeOrderBookRequest
	23,  // 8: tinkoff.public.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_trades_request:type_name -> tinkoff.public.invest.api.contract.v1.SubscribeTradesRequest
	27,  // 9: tinkoff.public.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_info_request:type_name -> tinkoff.public.invest.api.contract.v1.SubscribeInfoRequest
	31,  // 10: tinkoff.public.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_last_price_request:type_name -> tinkoff.public.invest.api.contract.v1.SubscribeLastPriceRequest
	17,  // 11: tinkoff.public.invest.api.contract.v1.MarketDataResponse.subscribe_candles_response:type_name -> tinkoff.public.invest.api.contract.v1.SubscribeCandlesResponse
	21,  // 12: tinkoff.public.invest.api.contract.v1.MarketDataResponse.subscribe_order_book_response:type_name -> tinkoff.public.invest.api.contract.v1.SubscribeOrderBookResponse
	25,  // 13: tinkoff.public.invest.api.contract.v1.MarketDataResponse.subscribe_trades_response:type_name -> tinkoff.public.invest.api.contract.v1.SubscribeTradesResponse
	29,  // 14: tinkoff.public.invest.api.contract.v1.MarketDataResponse.subscribe_info_response:type_name -> tinkoff.public.invest.api.contract.v1.SubscribeInfoResponse
	35,  // 15: tinkoff.public.invest.api.contract.v1.MarketDataResponse.candle:type_name -> tinkoff.public.invest.api.contract.v1.Candle
	38,  // 16: tinkoff.public.invest.api.contract.v1.MarketDataResponse.trade:type_name -> tinkoff.public.invest.api.contract.v1.Trade
	36,  // 17: tinkoff.public.invest.api.contract.v1.MarketDataResponse.orderbook:type_name -> tinkoff.public.invest.api.contract.v1.OrderBook
	39,  // 18: tinkoff.public.invest.api.contract.v1.MarketDataResponse.trading_status:type_name -> tinkoff.public.invest.api.contract.v1.TradingStatus
	64,  // 19: tinkoff.public.invest.api.contract.v1.MarketDataResponse.ping:type_name -> tinkoff.public.invest.api.contract.v1.Ping
	33,  // 20: tinkoff.public.invest.api.contract.v1.MarketDataResponse.subscribe_last_price_response:type_name -> tinkoff.public.invest.api.contract.v1.SubscribeLastPriceResponse
	45,  // 21: tinkoff.public.invest.api.contract.v1.MarketDataResponse.last_price:type_name -> tinkoff.public.invest.api.contract.v1.LastPrice
	0,   // 22: tinkoff.public.invest.api.contract.v1.SubscribeCandlesRequest.subscription_action:type_name -> tinkoff.public.invest.api.contract.v1.SubscriptionAction
	16,  // 23: tinkoff.public.invest.api.contract.v1.SubscribeCandlesRequest.instruments:type_name -> tinkoff.public.invest.api.contract.v1.CandleInstrument
	1,   // 24: tinkoff.public.invest.api.contract.v1.CandleInstrument.interval:type_name -> tinkoff.public.invest.api.contract.v1.SubscriptionInterval
	18,  // 25: tinkoff.public.invest.api.contract.v1.SubscribeCandlesResponse.candles_subscriptions:type_name -> tinkoff.public.invest.api.contract.v1.CandleSubscription
	1,   // 26: tinkoff.public.invest.api.contract.v1.CandleSubscription.interval:type_name -> tinkoff.public.invest.api.contract.v1.SubscriptionInterval
	2,   // 27: tinkoff.public.invest.api.contract.v1.CandleSubscription.subscription_status:type_name -> tinkoff.public.invest.api.contract.v1.SubscriptionStatus
	0,   // 28: tinkoff.public.invest.api.contract.v1.SubscribeOrderBookRequest.subscription_action:type_name -> tinkoff.public.invest.api.contract.v1.SubscriptionAction
	20,  // 29: tinkoff.public.invest.api.contract.v1.SubscribeOrderBookRequest.instruments:type_name -> tinkoff.public.invest.api.contract.v1.OrderBookInstrument
	7,   // 30: tinkoff.public.invest.api.contract.v1.OrderBookInstrument.order_book_type:type_name -> tinkoff.public.invest.api.contract.v1.OrderBookType
	22,  // 31: tinkoff.public.invest.api.contract.v1.SubscribeOrderBookResponse.order_book_subscriptions:type_name -> tinkoff.public.invest.api.contract.v1.OrderBookSubscription
	2,   // 32: tinkoff.public.invest.api.contract.v1.OrderBookSubscription.subscription_status:type_name -> tinkoff.public.invest.api.contract.v1.SubscriptionStatus
	7,   // 33: tinkoff.public.invest.api.contract.v1.OrderBookSubscription.order_book_type:type_name -> tinkoff.public.invest.api.contract.v1.OrderBookType
	0,   // 34: tinkoff.public.invest.api.contract.v1.SubscribeTradesRequest.subscription_action:type_name -> tinkoff.public.invest.api.contract.v1.SubscriptionAction
	24,  // 35: tinkoff.public.invest.api.contract.v1.SubscribeTradesRequest.instruments:type_name -> tinkoff.public.invest.api.contract.v1.TradeInstrument
	3,   // 36: tinkoff.public.invest.api.contract.v1.SubscribeTradesRequest.trade_type:type_name -> tinkoff.public.invest.api.contract.v1.TradeSourceType
	26,  // 37: tinkoff.public.invest.api.contract.v1.SubscribeTradesResponse.trade_subscriptions:type_name -> tinkoff.public.invest.api.contract.v1.TradeSubscription
	3,   // 38: tinkoff.public.invest.api.contract.v1.SubscribeTradesResponse.trade_type:type_name -> tinkoff.public.invest.api.contract.v1.TradeSourceType
	2,   // 39: tinkoff.public.invest.api.contract.v1.TradeSubscription.subscription_status:type_name -> tinkoff.public.invest.api.contract.v1.SubscriptionStatus
	0,   // 40: tinkoff.public.invest.api.contract.v1.SubscribeInfoRequest.subscription_action:type_name -> tinkoff.public.invest.api.contract.v1.SubscriptionAction
	28,  // 41: tinkoff.public.invest.api.contract.v1.SubscribeInfoRequest.instruments:type_name -> tinkoff.public.invest.api.contract.v1.InfoInstrument
	30,  // 42: tinkoff.public.invest.api.contract.v1.SubscribeInfoResponse.info_subscriptions:type_name -> tinkoff.public.invest.api.contract.v1.InfoSubscription
	2,   // 43: tinkoff.public.invest.api.contract.v1.InfoSubscription.subscription_status:type_name -> tinkoff.public.invest.api.contract.v1.SubscriptionStatus
	0,   // 44: tinkoff.public.invest.api.contract.v1.SubscribeLastPriceRequest.subscription_action:type_name -> tinkoff.public.invest.api.contract.v1.SubscriptionAction
	32,  // 45: tinkoff.public.invest.api.contract.v1.SubscribeLastPriceRequest.instruments:type_name -> tinkoff.public.invest.api.contract.v1.LastPriceInstrument
	34,  // 46: tinkoff.public.invest.api.contract.v1.SubscribeLastPriceResponse.last_price_subscriptions:type_name -> tinkoff.public.invest.api.contract.v1.LastPriceSubscription
	2,   // 47: tinkoff.public.invest.api.contract.v1.LastPriceSubscription.subscription_status:type_name -> tinkoff.public.invest.api.contract.v1.SubscriptionStatus
	1,   // 48: tinkoff.public.invest.api.contract.v1.Candle.interval:type_name -> tinkoff.public.invest.api.contract.v1.SubscriptionInterval
	65,  // 49: tinkoff.public.invest.api.contract.v1.Candle.open:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	65,  // 50: tinkoff.public.invest.api.contract.v1.Candle.high:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	65,  // 51: tinkoff.public.invest.api.contract.v1.Candle.low:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	65,  // 52: tinkoff.public.invest.api.contract.v1.Candle.close:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 53: tinkoff.public.invest.api.contract.v1.Candle.time:type_name -> google.protobuf.Timestamp
	66,  // 54: tinkoff.public.invest.api.contract.v1.Candle.last_trade_ts:type_name -> google.protobuf.Timestamp
	37,  // 55: tinkoff.public.invest.api.contract.v1.OrderBook.bids:type_name -> tinkoff.public.invest.api.contract.v1.Order
	37,  // 56: tinkoff.public.invest.api.contract.v1.OrderBook.asks:type_name -> tinkoff.public.invest.api.contract.v1.Order
	66,  // 57: tinkoff.public.invest.api.contract.v1.OrderBook.time:type_name -> google.protobuf.Timestamp
	65,  // 58: tinkoff.public.invest.api.contract.v1.OrderBook.limit_up:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	65,  // 59: tinkoff.public.invest.api.contract.v1.OrderBook.limit_down:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	7,   // 60: tinkoff.public.invest.api.contract.v1.OrderBook.order_book_type:type_name -> tinkoff.public.invest.api.contract.v1.OrderBookType
	65,  // 61: tinkoff.public.invest.api.contract.v1.Order.price:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	4,   // 62: tinkoff.public.invest.api.contract.v1.Trade.direction:type_name -> tinkoff.public.invest.api.contract.v1.TradeDirection
	65,  // 63: tinkoff.public.invest.api.contract.v1.Trade.price:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 64: tinkoff.public.invest.api.contract.v1.Trade.time:type_name -> google.protobuf.Timestamp
	3,   // 65: tinkoff.public.invest.api.contract.v1.Trade.tradeSource:type_name -> tinkoff.public.invest.api.contract.v1.TradeSourceType
	67,  // 66: tinkoff.public.invest.api.contract.v1.TradingStatus.trading_status:type_name -> tinkoff.public.invest.api.contract.v1.SecurityTradingStatus
	66,  // 67: tinkoff.public.invest.api.contract.v1.TradingStatus.time:type_name -> google.protobuf.Timestamp
	66,  // 68: tinkoff.public.invest.api.contract.v1.GetCandlesRequest.from:type_name -> google.protobuf.Timestamp
	66,  // 69: tinkoff.public.invest.api.contract.v1.GetCandlesRequest.to:type_name -> google.protobuf.Timestamp
	5,   // 70: tinkoff.public.invest.api.contract.v1.GetCandlesRequest.interval:type_name -> tinkoff.public.invest.api.contract.v1.CandleInterval
	8,   // 71: tinkoff.public.invest.api.contract.v1.GetCandlesRequest.candle_source_type:type_name -> tinkoff.public.invest.api.contract.v1.GetCandlesRequest.CandleSource
	42,  // 72: tinkoff.public.invest.api.contract.v1.GetCandlesResponse.candles:type_name -> tinkoff.public.invest.api.contract.v1.HistoricCandle
	65,  // 73: tinkoff.public.invest.api.contract.v1.HistoricCandle.open:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	65,  // 74: tinkoff.public.invest.api.contract.v1.HistoricCandle.high:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	65,  // 75: tinkoff.public.invest.api.contract.v1.HistoricCandle.low:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	65,  // 76: tinkoff.public.invest.api.contract.v1.HistoricCandle.close:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 77: tinkoff.public.invest.api.contract.v1.HistoricCandle.time:type_name -> google.protobuf.Timestamp
	6,   // 78: tinkoff.public.invest.api.contract.v1.HistoricCandle.candle_source:type_name -> tinkoff.public.invest.api.contract.v1.CandleSource
	45,  // 79: tinkoff.public.invest.api.contract.v1.GetLastPricesResponse.last_prices:type_name -> tinkoff.public.invest.api.contract.v1.LastPrice
	65,  // 80: tinkoff.public.invest.api.contract.v1.LastPrice.price:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 81: tinkoff.public.invest.api.contract.v1.LastPrice.time:type_name -> google.protobuf.Timestamp
	37,  // 82: tinkoff.public.invest.api.contract.v1.GetOrderBookResponse.bids:type_name -> tinkoff.public.invest.api.contract.v1.Order
	37,  // 83: tinkoff.public.invest.api.contract.v1.GetOrderBookResponse.asks:type_name -> tinkoff.public.invest.api.contract.v1.Order
	65,  // 84: tinkoff.public.invest.api.contract.v1.GetOrderBookResponse.last_price:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	65,  // 85: tinkoff.public.invest.api.contract.v1.GetOrderBookResponse.close_price:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	65,  // 86: tinkoff.public.invest.api.contract.v1.GetOrderBookResponse.limit_up:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	65,  // 87: tinkoff.public.invest.api.contract.v1.GetOrderBookResponse.limit_down:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 88: tinkoff.public.invest.api.contract.v1.GetOrderBookResponse.last_price_ts:type_name -> google.protobuf.Timestamp
	66,  // 89: tinkoff.public.invest.api.contract.v1.GetOrderBookResponse.close_price_ts:type_name -> google.protobuf.Timestamp
	66,  // 90: tinkoff.public.invest.api.contract.v1.GetOrderBookResponse.orderbook_ts:type_name -> google.protobuf.Timestamp
	51,  // 91: tinkoff.public.invest.api.contract.v1.GetTradingStatusesResponse.trading_statuses:type_name -> tinkoff.public.invest.api.contract.v1.GetTradingStatusResponse
	67,  // 92: tinkoff.public.invest.api.contract.v1.GetTradingStatusResponse.trading_status:type_name -> tinkoff.public.invest.api.contract.v1.SecurityTradingStatus
	66,  // 93: tinkoff.public.invest.api.contract.v1.GetLastTradesRequest.from:type_name -> google.protobuf.Timestamp
	66,  // 94: tinkoff.public.invest.api.contract.v1.GetLastTradesRequest.to:type_name -> google.protobuf.Timestamp
	38,  // 95: tinkoff.public.invest.api.contract.v1.GetLastTradesResponse.trades:type_name -> tinkoff.public.invest.api.contract.v1.Trade
	56,  // 96: tinkoff.public.invest.api.contract.v1.GetClosePricesRequest.instruments:type_name -> tinkoff.public.invest.api.contract.v1.InstrumentClosePriceRequest
	58,  // 97: tinkoff.public.invest.api.contract.v1.GetClosePricesResponse.close_prices:type_name -> tinkoff.public.invest.api.contract.v1.InstrumentClosePriceResponse
	65,  // 98: tinkoff.public.invest.api.contract.v1.InstrumentClosePriceResponse.price:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	65,  // 99: tinkoff.public.invest.api.contract.v1.InstrumentClosePriceResponse.evening_session_price:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 100: tinkoff.public.invest.api.contract.v1.InstrumentClosePriceResponse.time:type_name -> google.protobuf.Timestamp
	11,  // 101: tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.indicator_type:type_name -> tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.IndicatorType
	66,  // 102: tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.from:type_name -> google.protobuf.Timestamp
	66,  // 103: tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.to:type_name -> google.protobuf.Timestamp
	9,   // 104: tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.interval:type_name -> tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.IndicatorInterval
	10,  // 105: tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.type_of_price:type_name -> tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.TypeOfPrice
	62,  // 106: tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.deviation:type_name -> tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.Deviation
	61,  // 107: tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.smoothing:type_name -> tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing
	63,  // 108: tinkoff.public.invest.api.contract.v1.GetTechAnalysisResponse.technical_indicators:type_name -> tinkoff.public.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem
	65,  // 109: tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.Deviation.deviation_multiplier:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	66,  // 110: tinkoff.public.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.timestamp:type_name -> google.protobuf.Timestamp
	65,  // 111: tinkoff.public.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.middle_band:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	65,  // 112: tinkoff.public.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.upper_band:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	65,  // 113: tinkoff.public.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.lower_band:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	65,  // 114: tinkoff.public.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.signal:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	65,  // 115: tinkoff.public.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.macd:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	40,  // 116: tinkoff.public.invest.api.contract.v1.MarketDataService.GetCandles:input_type -> tinkoff.public.invest.api.contract.v1.GetCandlesRequest
	43,  // 117: tinkoff.public.invest.api.contract.v1.MarketDataService.GetLastPrices:input_type -> tinkoff.public.invest.api.contract.v1.GetLastPricesRequest
	46,  // 118: tinkoff.public.invest.api.contract.v1.MarketDataService.GetOrderBook:input_type -> tinkoff.public.invest.api.contract.v1.GetOrderBookRequest
	48,  // 119: tinkoff.public.invest.api.contract.v1.MarketDataService.GetTradingStatus:input_type -> tinkoff.public.invest.api.contract.v1.GetTradingStatusRequest
	49,  // 120: tinkoff.public.invest.api.contract.v1.MarketDataService.GetTradingStatuses:input_type -> tinkoff.public.invest.api.contract.v1.GetTradingStatusesRequest
	52,  // 121: tinkoff.public.invest.api.contract.v1.MarketDataService.GetLastTrades:input_type -> tinkoff.public.invest.api.contract.v1.GetLastTradesRequest
	55,  // 122: tinkoff.public.invest.api.contract.v1.MarketDataService.GetClosePrices:input_type -> tinkoff.public.invest.api.contract.v1.GetClosePricesRequest
	59,  // 123: tinkoff.public.invest.api.contract.v1.MarketDataService.GetTechAnalysis:input_type -> tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest
	12,  // 124: tinkoff.public.invest.api.contract.v1.MarketDataStreamService.MarketDataStream:input_type -> tinkoff.public.invest.api.contract.v1.MarketDataRequest
	13,  // 125: tinkoff.public.invest.api.contract.v1.MarketDataStreamService.MarketDataServerSideStream:input_type -> tinkoff.public.invest.api.contract.v1.MarketDataServerSideStreamRequest
	41,  // 126: tinkoff.public.invest.api.contract.v1.MarketDataService.GetCandles:output_type -> tinkoff.public.invest.api.contract.v1.GetCandlesResponse
	44,  // 127: tinkoff.public.invest.api.contract.v1.MarketDataService.GetLastPrices:output_type -> tinkoff.public.invest.api.contract.v1.GetLastPricesResponse
	47,  // 128: tinkoff.public.invest.api.contract.v1.MarketDataService.GetOrderBook:output_type -> tinkoff.public.invest.api.contract.v1.GetOrderBookResponse
	51,  // 129: tinkoff.public.invest.api.contract.v1.MarketDataService.GetTradingStatus:output_type -> tinkoff.public.invest.api.contract.v1.GetTradingStatusResponse
	50,  // 130: tinkoff.public.invest.api.contract.v1.MarketDataService.GetTradingStatuses:output_type -> tinkoff.public.invest.api.contract.v1.GetTradingStatusesResponse
	53,  // 131: tinkoff.public.invest.api.contract.v1.MarketDataService.GetLastTrades:output_type -> tinkoff.public.invest.api.contract.v1.GetLastTradesResponse
	57,  // 132: tinkoff.public.invest.api.contract.v1.MarketDataService.GetClosePrices:output_type -> tinkoff.public.invest.api.contract.v1.GetClosePricesResponse
	60,  // 133: tinkoff.public.invest.api.contract.v1.MarketDataService.GetTechAnalysis:output_type -> tinkoff.public.invest.api.contract.v1.GetTechAnalysisResponse
	14,  // 134: tinkoff.public.invest.api.contract.v1.MarketDataStreamService.MarketDataStream:output_type -> tinkoff.public.invest.api.contract.v1.MarketDataResponse
	14,  // 135: tinkoff.public.invest.api.contract.v1.MarketDataStreamService.MarketDataServerSideStream:output_type -> tinkoff.public.invest.api.contract.v1.MarketDataResponse
	126, // [126:136] is the sub-list for method output_type
	116, // [116:126] is the sub-list for method input_type
	116, // [116:116] is the sub-list for extension type_name
	116, // [116:116] is the sub-list for extension extendee
	0,   // [0:116] is the sub-list for field type_name
}

func init() { file_marketdata_proto_init() }
func file_marketdata_proto_init() {
	if File_marketdata_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_marketdata_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataServerSideStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeCandlesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CandleInstrument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeCandlesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CandleSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeOrderBookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderBookInstrument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeOrderBookResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderBookSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeTradesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeInstrument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeTradesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoInstrument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeLastPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastPriceInstrument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeLastPriceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastPriceSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Candle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderBook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradingStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCandlesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCandlesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricCandle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLastPricesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLastPricesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderBookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderBookResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTradingStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTradingStatusesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTradingStatusesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTradingStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLastTradesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLastTradesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMySubscriptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClosePricesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentClosePriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClosePricesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentClosePriceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTechAnalysisRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTechAnalysisResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTechAnalysisRequest_Smoothing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTechAnalysisRequest_Deviation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTechAnalysisResponse_TechAnalysisItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_marketdata_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*MarketDataRequest_SubscribeCandlesRequest)(nil),
		(*MarketDataRequest_SubscribeOrderBookRequest)(nil),
		(*MarketDataRequest_SubscribeTradesRequest)(nil),
		(*MarketDataRequest_SubscribeInfoRequest)(nil),
		(*MarketDataRequest_SubscribeLastPriceRequest)(nil),
		(*MarketDataRequest_GetMySubscriptions)(nil),
	}
	file_marketdata_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*MarketDataResponse_SubscribeCandlesResponse)(nil),
		(*MarketDataResponse_SubscribeOrderBookResponse)(nil),
		(*MarketDataResponse_SubscribeTradesResponse)(nil),
		(*MarketDataResponse_SubscribeInfoResponse)(nil),
		(*MarketDataResponse_Candle)(nil),
		(*MarketDataResponse_Trade)(nil),
		(*MarketDataResponse_Orderbook)(nil),
		(*MarketDataResponse_TradingStatus)(nil),
		(*MarketDataResponse_Ping)(nil),
		(*MarketDataResponse_SubscribeLastPriceResponse)(nil),
		(*MarketDataResponse_LastPrice)(nil),
	}
	file_marketdata_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_marketdata_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_marketdata_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_marketdata_proto_msgTypes[40].OneofWrappers = []interface{}{}
	file_marketdata_proto_msgTypes[51].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_marketdata_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   52,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_marketdata_proto_goTypes,
		DependencyIndexes: file_marketdata_proto_depIdxs,
		EnumInfos:         file_marketdata_proto_enumTypes,
		MessageInfos:      file_marketdata_proto_msgTypes,
	}.Build()
	File_marketdata_proto = out.File
	file_marketdata_proto_rawDesc = nil
	file_marketdata_proto_goTypes = nil
	file_marketdata_proto_depIdxs = nil
}
