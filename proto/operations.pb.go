// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: operations.proto

package investapi

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Статус запрашиваемых операций.
type OperationState int32

const (
	OperationState_OPERATION_STATE_UNSPECIFIED OperationState = 0 //Статус операции не определён
	OperationState_OPERATION_STATE_EXECUTED    OperationState = 1 //Исполнена частично или полностью.
	OperationState_OPERATION_STATE_CANCELED    OperationState = 2 //Отменена.
	OperationState_OPERATION_STATE_PROGRESS    OperationState = 3 //Исполняется.
)

// Enum value maps for OperationState.
var (
	OperationState_name = map[int32]string{
		0: "OPERATION_STATE_UNSPECIFIED",
		1: "OPERATION_STATE_EXECUTED",
		2: "OPERATION_STATE_CANCELED",
		3: "OPERATION_STATE_PROGRESS",
	}
	OperationState_value = map[string]int32{
		"OPERATION_STATE_UNSPECIFIED": 0,
		"OPERATION_STATE_EXECUTED":    1,
		"OPERATION_STATE_CANCELED":    2,
		"OPERATION_STATE_PROGRESS":    3,
	}
)

func (x OperationState) Enum() *OperationState {
	p := new(OperationState)
	*p = x
	return p
}

func (x OperationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationState) Descriptor() protoreflect.EnumDescriptor {
	return file_operations_proto_enumTypes[0].Descriptor()
}

func (OperationState) Type() protoreflect.EnumType {
	return &file_operations_proto_enumTypes[0]
}

func (x OperationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationState.Descriptor instead.
func (OperationState) EnumDescriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{0}
}

// Тип операции.
type OperationType int32

const (
	OperationType_OPERATION_TYPE_UNSPECIFIED                 OperationType = 0  //Тип операции не определён.
	OperationType_OPERATION_TYPE_INPUT                       OperationType = 1  //Пополнение брокерского счёта.
	OperationType_OPERATION_TYPE_BOND_TAX                    OperationType = 2  //Удержание НДФЛ по купонам.
	OperationType_OPERATION_TYPE_OUTPUT_SECURITIES           OperationType = 3  //Вывод ЦБ.
	OperationType_OPERATION_TYPE_OVERNIGHT                   OperationType = 4  //Доход по сделке РЕПО овернайт.
	OperationType_OPERATION_TYPE_TAX                         OperationType = 5  //Удержание налога.
	OperationType_OPERATION_TYPE_BOND_REPAYMENT_FULL         OperationType = 6  //Полное погашение облигаций.
	OperationType_OPERATION_TYPE_SELL_CARD                   OperationType = 7  //Продажа ЦБ с карты.
	OperationType_OPERATION_TYPE_DIVIDEND_TAX                OperationType = 8  //Удержание налога по дивидендам.
	OperationType_OPERATION_TYPE_OUTPUT                      OperationType = 9  //Вывод денежных средств.
	OperationType_OPERATION_TYPE_BOND_REPAYMENT              OperationType = 10 //Частичное погашение облигаций.
	OperationType_OPERATION_TYPE_TAX_CORRECTION              OperationType = 11 //Корректировка налога.
	OperationType_OPERATION_TYPE_SERVICE_FEE                 OperationType = 12 //Удержание комиссии за обслуживание брокерского счёта.
	OperationType_OPERATION_TYPE_BENEFIT_TAX                 OperationType = 13 //Удержание налога за материальную выгоду.
	OperationType_OPERATION_TYPE_MARGIN_FEE                  OperationType = 14 //Удержание комиссии за непокрытую позицию.
	OperationType_OPERATION_TYPE_BUY                         OperationType = 15 //Покупка ЦБ.
	OperationType_OPERATION_TYPE_BUY_CARD                    OperationType = 16 //Покупка ЦБ с карты.
	OperationType_OPERATION_TYPE_INPUT_SECURITIES            OperationType = 17 //Перевод ценных бумаг из другого депозитария.
	OperationType_OPERATION_TYPE_SELL_MARGIN                 OperationType = 18 //Продажа в результате Margin-call.
	OperationType_OPERATION_TYPE_BROKER_FEE                  OperationType = 19 //Удержание комиссии за операцию.
	OperationType_OPERATION_TYPE_BUY_MARGIN                  OperationType = 20 //Покупка в результате Margin-call.
	OperationType_OPERATION_TYPE_DIVIDEND                    OperationType = 21 //Выплата дивидендов.
	OperationType_OPERATION_TYPE_SELL                        OperationType = 22 //Продажа ЦБ.
	OperationType_OPERATION_TYPE_COUPON                      OperationType = 23 //Выплата купонов.
	OperationType_OPERATION_TYPE_SUCCESS_FEE                 OperationType = 24 //Удержание комиссии SuccessFee.
	OperationType_OPERATION_TYPE_DIVIDEND_TRANSFER           OperationType = 25 //Передача дивидендного дохода.
	OperationType_OPERATION_TYPE_ACCRUING_VARMARGIN          OperationType = 26 //Зачисление вариационной маржи.
	OperationType_OPERATION_TYPE_WRITING_OFF_VARMARGIN       OperationType = 27 //Списание вариационной маржи.
	OperationType_OPERATION_TYPE_DELIVERY_BUY                OperationType = 28 //Покупка в рамках экспирации фьючерсного контракта.
	OperationType_OPERATION_TYPE_DELIVERY_SELL               OperationType = 29 //Продажа в рамках экспирации фьючерсного контракта.
	OperationType_OPERATION_TYPE_TRACK_MFEE                  OperationType = 30 //Комиссия за управление по счёту автоследования.
	OperationType_OPERATION_TYPE_TRACK_PFEE                  OperationType = 31 //Комиссия за результат по счёту автоследования.
	OperationType_OPERATION_TYPE_TAX_PROGRESSIVE             OperationType = 32 //Удержание налога по ставке 15%.
	OperationType_OPERATION_TYPE_BOND_TAX_PROGRESSIVE        OperationType = 33 //Удержание налога по купонам по ставке 15%.
	OperationType_OPERATION_TYPE_DIVIDEND_TAX_PROGRESSIVE    OperationType = 34 //Удержание налога по дивидендам по ставке 15%.
	OperationType_OPERATION_TYPE_BENEFIT_TAX_PROGRESSIVE     OperationType = 35 //Удержание налога за материальную выгоду по ставке 15%.
	OperationType_OPERATION_TYPE_TAX_CORRECTION_PROGRESSIVE  OperationType = 36 //Корректировка налога по ставке 15%.
	OperationType_OPERATION_TYPE_TAX_REPO_PROGRESSIVE        OperationType = 37 //Удержание налога за возмещение по сделкам РЕПО по ставке 15%.
	OperationType_OPERATION_TYPE_TAX_REPO                    OperationType = 38 //Удержание налога за возмещение по сделкам РЕПО.
	OperationType_OPERATION_TYPE_TAX_REPO_HOLD               OperationType = 39 //Удержание налога по сделкам РЕПО.
	OperationType_OPERATION_TYPE_TAX_REPO_REFUND             OperationType = 40 //Возврат налога по сделкам РЕПО.
	OperationType_OPERATION_TYPE_TAX_REPO_HOLD_PROGRESSIVE   OperationType = 41 //Удержание налога по сделкам РЕПО по ставке 15%.
	OperationType_OPERATION_TYPE_TAX_REPO_REFUND_PROGRESSIVE OperationType = 42 //Возврат налога по сделкам РЕПО по ставке 15%.
	OperationType_OPERATION_TYPE_DIV_EXT                     OperationType = 43 //Выплата дивидендов на карту.
	OperationType_OPERATION_TYPE_TAX_CORRECTION_COUPON       OperationType = 44 //Корректировка налога по купонам.
	OperationType_OPERATION_TYPE_CASH_FEE                    OperationType = 45 //Комиссия за валютный остаток.
	OperationType_OPERATION_TYPE_OUT_FEE                     OperationType = 46 //Комиссия за вывод валюты с брокерского счета.
	OperationType_OPERATION_TYPE_OUT_STAMP_DUTY              OperationType = 47 //Гербовый сбор.
	OperationType_OPERATION_TYPE_OUTPUT_SWIFT                OperationType = 50 //	SWIFT-перевод
	OperationType_OPERATION_TYPE_INPUT_SWIFT                 OperationType = 51 //	SWIFT-перевод
	OperationType_OPERATION_TYPE_OUTPUT_ACQUIRING            OperationType = 53 //  Перевод на карту
	OperationType_OPERATION_TYPE_INPUT_ACQUIRING             OperationType = 54 //	Перевод с карты
	OperationType_OPERATION_TYPE_OUTPUT_PENALTY              OperationType = 55 //	Комиссия за вывод средств
	OperationType_OPERATION_TYPE_ADVICE_FEE                  OperationType = 56 //	Списание оплаты за сервис Советов
	OperationType_OPERATION_TYPE_TRANS_IIS_BS                OperationType = 57 //  Перевод ценных бумаг с ИИС на Брокерский счет
	OperationType_OPERATION_TYPE_TRANS_BS_BS                 OperationType = 58 //  Перевод ценных бумаг с одного брокерского счета на другой
	OperationType_OPERATION_TYPE_OUT_MULTI                   OperationType = 59 //  Вывод денежных средств со счета
	OperationType_OPERATION_TYPE_INP_MULTI                   OperationType = 60 //  Пополнение денежных средств со счета
	OperationType_OPERATION_TYPE_OVER_PLACEMENT              OperationType = 61 //  Размещение биржевого овернайта
	OperationType_OPERATION_TYPE_OVER_COM                    OperationType = 62 //  Списание комиссии
	OperationType_OPERATION_TYPE_OVER_INCOME                 OperationType = 63 //  Доход от оверанайта
	OperationType_OPERATION_TYPE_OPTION_EXPIRATION           OperationType = 64 // Экспирация
)

// Enum value maps for OperationType.
var (
	OperationType_name = map[int32]string{
		0:  "OPERATION_TYPE_UNSPECIFIED",
		1:  "OPERATION_TYPE_INPUT",
		2:  "OPERATION_TYPE_BOND_TAX",
		3:  "OPERATION_TYPE_OUTPUT_SECURITIES",
		4:  "OPERATION_TYPE_OVERNIGHT",
		5:  "OPERATION_TYPE_TAX",
		6:  "OPERATION_TYPE_BOND_REPAYMENT_FULL",
		7:  "OPERATION_TYPE_SELL_CARD",
		8:  "OPERATION_TYPE_DIVIDEND_TAX",
		9:  "OPERATION_TYPE_OUTPUT",
		10: "OPERATION_TYPE_BOND_REPAYMENT",
		11: "OPERATION_TYPE_TAX_CORRECTION",
		12: "OPERATION_TYPE_SERVICE_FEE",
		13: "OPERATION_TYPE_BENEFIT_TAX",
		14: "OPERATION_TYPE_MARGIN_FEE",
		15: "OPERATION_TYPE_BUY",
		16: "OPERATION_TYPE_BUY_CARD",
		17: "OPERATION_TYPE_INPUT_SECURITIES",
		18: "OPERATION_TYPE_SELL_MARGIN",
		19: "OPERATION_TYPE_BROKER_FEE",
		20: "OPERATION_TYPE_BUY_MARGIN",
		21: "OPERATION_TYPE_DIVIDEND",
		22: "OPERATION_TYPE_SELL",
		23: "OPERATION_TYPE_COUPON",
		24: "OPERATION_TYPE_SUCCESS_FEE",
		25: "OPERATION_TYPE_DIVIDEND_TRANSFER",
		26: "OPERATION_TYPE_ACCRUING_VARMARGIN",
		27: "OPERATION_TYPE_WRITING_OFF_VARMARGIN",
		28: "OPERATION_TYPE_DELIVERY_BUY",
		29: "OPERATION_TYPE_DELIVERY_SELL",
		30: "OPERATION_TYPE_TRACK_MFEE",
		31: "OPERATION_TYPE_TRACK_PFEE",
		32: "OPERATION_TYPE_TAX_PROGRESSIVE",
		33: "OPERATION_TYPE_BOND_TAX_PROGRESSIVE",
		34: "OPERATION_TYPE_DIVIDEND_TAX_PROGRESSIVE",
		35: "OPERATION_TYPE_BENEFIT_TAX_PROGRESSIVE",
		36: "OPERATION_TYPE_TAX_CORRECTION_PROGRESSIVE",
		37: "OPERATION_TYPE_TAX_REPO_PROGRESSIVE",
		38: "OPERATION_TYPE_TAX_REPO",
		39: "OPERATION_TYPE_TAX_REPO_HOLD",
		40: "OPERATION_TYPE_TAX_REPO_REFUND",
		41: "OPERATION_TYPE_TAX_REPO_HOLD_PROGRESSIVE",
		42: "OPERATION_TYPE_TAX_REPO_REFUND_PROGRESSIVE",
		43: "OPERATION_TYPE_DIV_EXT",
		44: "OPERATION_TYPE_TAX_CORRECTION_COUPON",
		45: "OPERATION_TYPE_CASH_FEE",
		46: "OPERATION_TYPE_OUT_FEE",
		47: "OPERATION_TYPE_OUT_STAMP_DUTY",
		50: "OPERATION_TYPE_OUTPUT_SWIFT",
		51: "OPERATION_TYPE_INPUT_SWIFT",
		53: "OPERATION_TYPE_OUTPUT_ACQUIRING",
		54: "OPERATION_TYPE_INPUT_ACQUIRING",
		55: "OPERATION_TYPE_OUTPUT_PENALTY",
		56: "OPERATION_TYPE_ADVICE_FEE",
		57: "OPERATION_TYPE_TRANS_IIS_BS",
		58: "OPERATION_TYPE_TRANS_BS_BS",
		59: "OPERATION_TYPE_OUT_MULTI",
		60: "OPERATION_TYPE_INP_MULTI",
		61: "OPERATION_TYPE_OVER_PLACEMENT",
		62: "OPERATION_TYPE_OVER_COM",
		63: "OPERATION_TYPE_OVER_INCOME",
		64: "OPERATION_TYPE_OPTION_EXPIRATION",
	}
	OperationType_value = map[string]int32{
		"OPERATION_TYPE_UNSPECIFIED":                 0,
		"OPERATION_TYPE_INPUT":                       1,
		"OPERATION_TYPE_BOND_TAX":                    2,
		"OPERATION_TYPE_OUTPUT_SECURITIES":           3,
		"OPERATION_TYPE_OVERNIGHT":                   4,
		"OPERATION_TYPE_TAX":                         5,
		"OPERATION_TYPE_BOND_REPAYMENT_FULL":         6,
		"OPERATION_TYPE_SELL_CARD":                   7,
		"OPERATION_TYPE_DIVIDEND_TAX":                8,
		"OPERATION_TYPE_OUTPUT":                      9,
		"OPERATION_TYPE_BOND_REPAYMENT":              10,
		"OPERATION_TYPE_TAX_CORRECTION":              11,
		"OPERATION_TYPE_SERVICE_FEE":                 12,
		"OPERATION_TYPE_BENEFIT_TAX":                 13,
		"OPERATION_TYPE_MARGIN_FEE":                  14,
		"OPERATION_TYPE_BUY":                         15,
		"OPERATION_TYPE_BUY_CARD":                    16,
		"OPERATION_TYPE_INPUT_SECURITIES":            17,
		"OPERATION_TYPE_SELL_MARGIN":                 18,
		"OPERATION_TYPE_BROKER_FEE":                  19,
		"OPERATION_TYPE_BUY_MARGIN":                  20,
		"OPERATION_TYPE_DIVIDEND":                    21,
		"OPERATION_TYPE_SELL":                        22,
		"OPERATION_TYPE_COUPON":                      23,
		"OPERATION_TYPE_SUCCESS_FEE":                 24,
		"OPERATION_TYPE_DIVIDEND_TRANSFER":           25,
		"OPERATION_TYPE_ACCRUING_VARMARGIN":          26,
		"OPERATION_TYPE_WRITING_OFF_VARMARGIN":       27,
		"OPERATION_TYPE_DELIVERY_BUY":                28,
		"OPERATION_TYPE_DELIVERY_SELL":               29,
		"OPERATION_TYPE_TRACK_MFEE":                  30,
		"OPERATION_TYPE_TRACK_PFEE":                  31,
		"OPERATION_TYPE_TAX_PROGRESSIVE":             32,
		"OPERATION_TYPE_BOND_TAX_PROGRESSIVE":        33,
		"OPERATION_TYPE_DIVIDEND_TAX_PROGRESSIVE":    34,
		"OPERATION_TYPE_BENEFIT_TAX_PROGRESSIVE":     35,
		"OPERATION_TYPE_TAX_CORRECTION_PROGRESSIVE":  36,
		"OPERATION_TYPE_TAX_REPO_PROGRESSIVE":        37,
		"OPERATION_TYPE_TAX_REPO":                    38,
		"OPERATION_TYPE_TAX_REPO_HOLD":               39,
		"OPERATION_TYPE_TAX_REPO_REFUND":             40,
		"OPERATION_TYPE_TAX_REPO_HOLD_PROGRESSIVE":   41,
		"OPERATION_TYPE_TAX_REPO_REFUND_PROGRESSIVE": 42,
		"OPERATION_TYPE_DIV_EXT":                     43,
		"OPERATION_TYPE_TAX_CORRECTION_COUPON":       44,
		"OPERATION_TYPE_CASH_FEE":                    45,
		"OPERATION_TYPE_OUT_FEE":                     46,
		"OPERATION_TYPE_OUT_STAMP_DUTY":              47,
		"OPERATION_TYPE_OUTPUT_SWIFT":                50,
		"OPERATION_TYPE_INPUT_SWIFT":                 51,
		"OPERATION_TYPE_OUTPUT_ACQUIRING":            53,
		"OPERATION_TYPE_INPUT_ACQUIRING":             54,
		"OPERATION_TYPE_OUTPUT_PENALTY":              55,
		"OPERATION_TYPE_ADVICE_FEE":                  56,
		"OPERATION_TYPE_TRANS_IIS_BS":                57,
		"OPERATION_TYPE_TRANS_BS_BS":                 58,
		"OPERATION_TYPE_OUT_MULTI":                   59,
		"OPERATION_TYPE_INP_MULTI":                   60,
		"OPERATION_TYPE_OVER_PLACEMENT":              61,
		"OPERATION_TYPE_OVER_COM":                    62,
		"OPERATION_TYPE_OVER_INCOME":                 63,
		"OPERATION_TYPE_OPTION_EXPIRATION":           64,
	}
)

func (x OperationType) Enum() *OperationType {
	p := new(OperationType)
	*p = x
	return p
}

func (x OperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_operations_proto_enumTypes[1].Descriptor()
}

func (OperationType) Type() protoreflect.EnumType {
	return &file_operations_proto_enumTypes[1]
}

func (x OperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationType.Descriptor instead.
func (OperationType) EnumDescriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{1}
}

// Результат подписки.
type PortfolioSubscriptionStatus int32

const (
	PortfolioSubscriptionStatus_PORTFOLIO_SUBSCRIPTION_STATUS_UNSPECIFIED       PortfolioSubscriptionStatus = 0 //Тип не определён.
	PortfolioSubscriptionStatus_PORTFOLIO_SUBSCRIPTION_STATUS_SUCCESS           PortfolioSubscriptionStatus = 1 //Успешно.
	PortfolioSubscriptionStatus_PORTFOLIO_SUBSCRIPTION_STATUS_ACCOUNT_NOT_FOUND PortfolioSubscriptionStatus = 2 //Счёт не найден или недостаточно прав.
	PortfolioSubscriptionStatus_PORTFOLIO_SUBSCRIPTION_STATUS_INTERNAL_ERROR    PortfolioSubscriptionStatus = 3 //Произошла ошибка.
)

// Enum value maps for PortfolioSubscriptionStatus.
var (
	PortfolioSubscriptionStatus_name = map[int32]string{
		0: "PORTFOLIO_SUBSCRIPTION_STATUS_UNSPECIFIED",
		1: "PORTFOLIO_SUBSCRIPTION_STATUS_SUCCESS",
		2: "PORTFOLIO_SUBSCRIPTION_STATUS_ACCOUNT_NOT_FOUND",
		3: "PORTFOLIO_SUBSCRIPTION_STATUS_INTERNAL_ERROR",
	}
	PortfolioSubscriptionStatus_value = map[string]int32{
		"PORTFOLIO_SUBSCRIPTION_STATUS_UNSPECIFIED":       0,
		"PORTFOLIO_SUBSCRIPTION_STATUS_SUCCESS":           1,
		"PORTFOLIO_SUBSCRIPTION_STATUS_ACCOUNT_NOT_FOUND": 2,
		"PORTFOLIO_SUBSCRIPTION_STATUS_INTERNAL_ERROR":    3,
	}
)

func (x PortfolioSubscriptionStatus) Enum() *PortfolioSubscriptionStatus {
	p := new(PortfolioSubscriptionStatus)
	*p = x
	return p
}

func (x PortfolioSubscriptionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortfolioSubscriptionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_operations_proto_enumTypes[2].Descriptor()
}

func (PortfolioSubscriptionStatus) Type() protoreflect.EnumType {
	return &file_operations_proto_enumTypes[2]
}

func (x PortfolioSubscriptionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortfolioSubscriptionStatus.Descriptor instead.
func (PortfolioSubscriptionStatus) EnumDescriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{2}
}

// Результат подписки.
type PositionsAccountSubscriptionStatus int32

const (
	PositionsAccountSubscriptionStatus_POSITIONS_SUBSCRIPTION_STATUS_UNSPECIFIED       PositionsAccountSubscriptionStatus = 0 //Тип не определён.
	PositionsAccountSubscriptionStatus_POSITIONS_SUBSCRIPTION_STATUS_SUCCESS           PositionsAccountSubscriptionStatus = 1 //Успешно.
	PositionsAccountSubscriptionStatus_POSITIONS_SUBSCRIPTION_STATUS_ACCOUNT_NOT_FOUND PositionsAccountSubscriptionStatus = 2 //Счёт не найден или недостаточно прав.
	PositionsAccountSubscriptionStatus_POSITIONS_SUBSCRIPTION_STATUS_INTERNAL_ERROR    PositionsAccountSubscriptionStatus = 3 //Произошла ошибка.
)

// Enum value maps for PositionsAccountSubscriptionStatus.
var (
	PositionsAccountSubscriptionStatus_name = map[int32]string{
		0: "POSITIONS_SUBSCRIPTION_STATUS_UNSPECIFIED",
		1: "POSITIONS_SUBSCRIPTION_STATUS_SUCCESS",
		2: "POSITIONS_SUBSCRIPTION_STATUS_ACCOUNT_NOT_FOUND",
		3: "POSITIONS_SUBSCRIPTION_STATUS_INTERNAL_ERROR",
	}
	PositionsAccountSubscriptionStatus_value = map[string]int32{
		"POSITIONS_SUBSCRIPTION_STATUS_UNSPECIFIED":       0,
		"POSITIONS_SUBSCRIPTION_STATUS_SUCCESS":           1,
		"POSITIONS_SUBSCRIPTION_STATUS_ACCOUNT_NOT_FOUND": 2,
		"POSITIONS_SUBSCRIPTION_STATUS_INTERNAL_ERROR":    3,
	}
)

func (x PositionsAccountSubscriptionStatus) Enum() *PositionsAccountSubscriptionStatus {
	p := new(PositionsAccountSubscriptionStatus)
	*p = x
	return p
}

func (x PositionsAccountSubscriptionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PositionsAccountSubscriptionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_operations_proto_enumTypes[3].Descriptor()
}

func (PositionsAccountSubscriptionStatus) Type() protoreflect.EnumType {
	return &file_operations_proto_enumTypes[3]
}

func (x PositionsAccountSubscriptionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PositionsAccountSubscriptionStatus.Descriptor instead.
func (PositionsAccountSubscriptionStatus) EnumDescriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{3}
}

type PortfolioRequest_CurrencyRequest int32

const (
	PortfolioRequest_RUB PortfolioRequest_CurrencyRequest = 0 //Рубли
	PortfolioRequest_USD PortfolioRequest_CurrencyRequest = 1 //Доллары
	PortfolioRequest_EUR PortfolioRequest_CurrencyRequest = 2 //Евро
)

// Enum value maps for PortfolioRequest_CurrencyRequest.
var (
	PortfolioRequest_CurrencyRequest_name = map[int32]string{
		0: "RUB",
		1: "USD",
		2: "EUR",
	}
	PortfolioRequest_CurrencyRequest_value = map[string]int32{
		"RUB": 0,
		"USD": 1,
		"EUR": 2,
	}
)

func (x PortfolioRequest_CurrencyRequest) Enum() *PortfolioRequest_CurrencyRequest {
	p := new(PortfolioRequest_CurrencyRequest)
	*p = x
	return p
}

func (x PortfolioRequest_CurrencyRequest) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortfolioRequest_CurrencyRequest) Descriptor() protoreflect.EnumDescriptor {
	return file_operations_proto_enumTypes[4].Descriptor()
}

func (PortfolioRequest_CurrencyRequest) Type() protoreflect.EnumType {
	return &file_operations_proto_enumTypes[4]
}

func (x PortfolioRequest_CurrencyRequest) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortfolioRequest_CurrencyRequest.Descriptor instead.
func (PortfolioRequest_CurrencyRequest) EnumDescriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{4, 0}
}

// Запрос получения списка операций по счёту.
type OperationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string                 `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                         //Идентификатор счёта клиента.
	From      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=from,proto3,oneof" json:"from,omitempty"`                                                              //Начало периода (по UTC).
	To        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=to,proto3,oneof" json:"to,omitempty"`                                                                  //Окончание периода (по UTC).
	State     *OperationState        `protobuf:"varint,4,opt,name=state,proto3,enum=tinkoff.public.invest.api.contract.v1.OperationState,oneof" json:"state,omitempty"` //Статус запрашиваемых операций.
	Figi      *string                `protobuf:"bytes,5,opt,name=figi,proto3,oneof" json:"figi,omitempty"`                                                              //Figi-идентификатор инструмента для фильтрации.
}

func (x *OperationsRequest) Reset() {
	*x = OperationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationsRequest) ProtoMessage() {}

func (x *OperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationsRequest.ProtoReflect.Descriptor instead.
func (*OperationsRequest) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{0}
}

func (x *OperationsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *OperationsRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *OperationsRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *OperationsRequest) GetState() OperationState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return OperationState_OPERATION_STATE_UNSPECIFIED
}

func (x *OperationsRequest) GetFigi() string {
	if x != nil && x.Figi != nil {
		return *x.Figi
	}
	return ""
}

// Список операций.
type OperationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operations []*Operation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"` //Массив операций.
}

func (x *OperationsResponse) Reset() {
	*x = OperationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationsResponse) ProtoMessage() {}

func (x *OperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationsResponse.ProtoReflect.Descriptor instead.
func (*OperationsResponse) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{1}
}

func (x *OperationsResponse) GetOperations() []*Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

// Данные по операции.
type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                       //Идентификатор операции.
	ParentOperationId string                 `protobuf:"bytes,2,opt,name=parent_operation_id,json=parentOperationId,proto3" json:"parent_operation_id,omitempty"`                                              //Идентификатор родительской операции.
	Currency          string                 `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`                                                                                           //Валюта операции.
	Payment           *MoneyValue            `protobuf:"bytes,4,opt,name=payment,proto3" json:"payment,omitempty"`                                                                                             //Сумма операции.
	Price             *MoneyValue            `protobuf:"bytes,5,opt,name=price,proto3" json:"price,omitempty"`                                                                                                 //Цена операции за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента.
	State             OperationState         `protobuf:"varint,6,opt,name=state,proto3,enum=tinkoff.public.invest.api.contract.v1.OperationState" json:"state,omitempty"`                                      //Статус операции.
	Quantity          int64                  `protobuf:"varint,7,opt,name=quantity,proto3" json:"quantity,omitempty"`                                                                                          //Количество единиц инструмента.
	QuantityRest      int64                  `protobuf:"varint,8,opt,name=quantity_rest,json=quantityRest,proto3" json:"quantity_rest,omitempty"`                                                              //Неисполненный остаток по сделке.
	Figi              string                 `protobuf:"bytes,9,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                   //Figi-идентификатор инструмента, связанного с операцией.
	InstrumentType    string                 `protobuf:"bytes,10,opt,name=instrument_type,json=instrumentType,proto3" json:"instrument_type,omitempty"`                                                        //Тип инструмента. Возможные значения: </br>**bond** — облигация; </br>**share** — акция; </br>**currency** — валюта; </br>**etf** — фонд; </br>**futures** — фьючерс.
	Date              *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=date,proto3" json:"date,omitempty"`                                                                                                  //Дата и время операции в формате часовом поясе UTC.
	Type              string                 `protobuf:"bytes,12,opt,name=type,proto3" json:"type,omitempty"`                                                                                                  //Текстовое описание типа операции.
	OperationType     OperationType          `protobuf:"varint,13,opt,name=operation_type,json=operationType,proto3,enum=tinkoff.public.invest.api.contract.v1.OperationType" json:"operation_type,omitempty"` //Тип операции.
	Trades            []*OperationTrade      `protobuf:"bytes,14,rep,name=trades,proto3" json:"trades,omitempty"`                                                                                              //Массив сделок.
	AssetUid          string                 `protobuf:"bytes,16,opt,name=asset_uid,json=assetUid,proto3" json:"asset_uid,omitempty"`                                                                          //Идентификатор актива
	PositionUid       string                 `protobuf:"bytes,17,opt,name=position_uid,json=positionUid,proto3" json:"position_uid,omitempty"`                                                                 //position_uid-идентификатора инструмента.
	InstrumentUid     string                 `protobuf:"bytes,18,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                                                           //Уникальный идентификатор инструмента.
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{2}
}

func (x *Operation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Operation) GetParentOperationId() string {
	if x != nil {
		return x.ParentOperationId
	}
	return ""
}

func (x *Operation) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Operation) GetPayment() *MoneyValue {
	if x != nil {
		return x.Payment
	}
	return nil
}

func (x *Operation) GetPrice() *MoneyValue {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *Operation) GetState() OperationState {
	if x != nil {
		return x.State
	}
	return OperationState_OPERATION_STATE_UNSPECIFIED
}

func (x *Operation) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Operation) GetQuantityRest() int64 {
	if x != nil {
		return x.QuantityRest
	}
	return 0
}

func (x *Operation) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *Operation) GetInstrumentType() string {
	if x != nil {
		return x.InstrumentType
	}
	return ""
}

func (x *Operation) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Operation) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Operation) GetOperationType() OperationType {
	if x != nil {
		return x.OperationType
	}
	return OperationType_OPERATION_TYPE_UNSPECIFIED
}

func (x *Operation) GetTrades() []*OperationTrade {
	if x != nil {
		return x.Trades
	}
	return nil
}

func (x *Operation) GetAssetUid() string {
	if x != nil {
		return x.AssetUid
	}
	return ""
}

func (x *Operation) GetPositionUid() string {
	if x != nil {
		return x.PositionUid
	}
	return ""
}

func (x *Operation) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

// Сделка по операции.
type OperationTrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeId  string                 `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`    //Идентификатор сделки.
	DateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"` //Дата и время сделки в часовом поясе UTC.
	Quantity int64                  `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`                //Количество инструментов.
	Price    *MoneyValue            `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`                       //Цена за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента.
}

func (x *OperationTrade) Reset() {
	*x = OperationTrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationTrade) ProtoMessage() {}

func (x *OperationTrade) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationTrade.ProtoReflect.Descriptor instead.
func (*OperationTrade) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{3}
}

func (x *OperationTrade) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *OperationTrade) GetDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DateTime
	}
	return nil
}

func (x *OperationTrade) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *OperationTrade) GetPrice() *MoneyValue {
	if x != nil {
		return x.Price
	}
	return nil
}

// Запрос получения текущего портфеля по счёту.
type PortfolioRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string                            `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                                                 //Идентификатор счёта пользователя.
	Currency  *PortfolioRequest_CurrencyRequest `protobuf:"varint,2,opt,name=currency,proto3,enum=tinkoff.public.invest.api.contract.v1.PortfolioRequest_CurrencyRequest,oneof" json:"currency,omitempty"` //Валюта, в которой требуется рассчитать портфель
}

func (x *PortfolioRequest) Reset() {
	*x = PortfolioRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortfolioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortfolioRequest) ProtoMessage() {}

func (x *PortfolioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortfolioRequest.ProtoReflect.Descriptor instead.
func (*PortfolioRequest) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{4}
}

func (x *PortfolioRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *PortfolioRequest) GetCurrency() PortfolioRequest_CurrencyRequest {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return PortfolioRequest_RUB
}

// Текущий портфель по счёту.
type PortfolioResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalAmountShares     *MoneyValue                 `protobuf:"bytes,1,opt,name=total_amount_shares,json=totalAmountShares,proto3" json:"total_amount_shares,omitempty"`             //Общая стоимость акций в портфеле.
	TotalAmountBonds      *MoneyValue                 `protobuf:"bytes,2,opt,name=total_amount_bonds,json=totalAmountBonds,proto3" json:"total_amount_bonds,omitempty"`                //Общая стоимость облигаций в портфеле.
	TotalAmountEtf        *MoneyValue                 `protobuf:"bytes,3,opt,name=total_amount_etf,json=totalAmountEtf,proto3" json:"total_amount_etf,omitempty"`                      //Общая стоимость фондов в портфеле.
	TotalAmountCurrencies *MoneyValue                 `protobuf:"bytes,4,opt,name=total_amount_currencies,json=totalAmountCurrencies,proto3" json:"total_amount_currencies,omitempty"` //Общая стоимость валют в портфеле.
	TotalAmountFutures    *MoneyValue                 `protobuf:"bytes,5,opt,name=total_amount_futures,json=totalAmountFutures,proto3" json:"total_amount_futures,omitempty"`          //Общая стоимость фьючерсов в портфеле.
	ExpectedYield         *Quotation                  `protobuf:"bytes,6,opt,name=expected_yield,json=expectedYield,proto3" json:"expected_yield,omitempty"`                           //Текущая относительная доходность портфеля, в %.
	Positions             []*PortfolioPosition        `protobuf:"bytes,7,rep,name=positions,proto3" json:"positions,omitempty"`                                                        //Список позиций портфеля.
	AccountId             string                      `protobuf:"bytes,8,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                       //Идентификатор счёта пользователя.
	TotalAmountOptions    *MoneyValue                 `protobuf:"bytes,9,opt,name=total_amount_options,json=totalAmountOptions,proto3" json:"total_amount_options,omitempty"`          //Общая стоимость опционов в портфеле.
	TotalAmountSp         *MoneyValue                 `protobuf:"bytes,10,opt,name=total_amount_sp,json=totalAmountSp,proto3" json:"total_amount_sp,omitempty"`                        //Общая стоимость структурных нот в портфеле.
	TotalAmountPortfolio  *MoneyValue                 `protobuf:"bytes,11,opt,name=total_amount_portfolio,json=totalAmountPortfolio,proto3" json:"total_amount_portfolio,omitempty"`   //Общая стоимость портфеля.
	VirtualPositions      []*VirtualPortfolioPosition `protobuf:"bytes,12,rep,name=virtual_positions,json=virtualPositions,proto3" json:"virtual_positions,omitempty"`                 //Массив виртуальных позиций портфеля.
}

func (x *PortfolioResponse) Reset() {
	*x = PortfolioResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortfolioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortfolioResponse) ProtoMessage() {}

func (x *PortfolioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortfolioResponse.ProtoReflect.Descriptor instead.
func (*PortfolioResponse) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{5}
}

func (x *PortfolioResponse) GetTotalAmountShares() *MoneyValue {
	if x != nil {
		return x.TotalAmountShares
	}
	return nil
}

func (x *PortfolioResponse) GetTotalAmountBonds() *MoneyValue {
	if x != nil {
		return x.TotalAmountBonds
	}
	return nil
}

func (x *PortfolioResponse) GetTotalAmountEtf() *MoneyValue {
	if x != nil {
		return x.TotalAmountEtf
	}
	return nil
}

func (x *PortfolioResponse) GetTotalAmountCurrencies() *MoneyValue {
	if x != nil {
		return x.TotalAmountCurrencies
	}
	return nil
}

func (x *PortfolioResponse) GetTotalAmountFutures() *MoneyValue {
	if x != nil {
		return x.TotalAmountFutures
	}
	return nil
}

func (x *PortfolioResponse) GetExpectedYield() *Quotation {
	if x != nil {
		return x.ExpectedYield
	}
	return nil
}

func (x *PortfolioResponse) GetPositions() []*PortfolioPosition {
	if x != nil {
		return x.Positions
	}
	return nil
}

func (x *PortfolioResponse) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *PortfolioResponse) GetTotalAmountOptions() *MoneyValue {
	if x != nil {
		return x.TotalAmountOptions
	}
	return nil
}

func (x *PortfolioResponse) GetTotalAmountSp() *MoneyValue {
	if x != nil {
		return x.TotalAmountSp
	}
	return nil
}

func (x *PortfolioResponse) GetTotalAmountPortfolio() *MoneyValue {
	if x != nil {
		return x.TotalAmountPortfolio
	}
	return nil
}

func (x *PortfolioResponse) GetVirtualPositions() []*VirtualPortfolioPosition {
	if x != nil {
		return x.VirtualPositions
	}
	return nil
}

// Запрос позиций портфеля по счёту.
type PositionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` //Идентификатор счёта пользователя.
}

func (x *PositionsRequest) Reset() {
	*x = PositionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionsRequest) ProtoMessage() {}

func (x *PositionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionsRequest.ProtoReflect.Descriptor instead.
func (*PositionsRequest) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{6}
}

func (x *PositionsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// Список позиций по счёту.
type PositionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Money                   []*MoneyValue          `protobuf:"bytes,1,rep,name=money,proto3" json:"money,omitempty"`                                                                         //Массив валютных позиций портфеля.
	Blocked                 []*MoneyValue          `protobuf:"bytes,2,rep,name=blocked,proto3" json:"blocked,omitempty"`                                                                     //Массив заблокированных валютных позиций портфеля.
	Securities              []*PositionsSecurities `protobuf:"bytes,3,rep,name=securities,proto3" json:"securities,omitempty"`                                                               //Список ценно-бумажных позиций портфеля.
	LimitsLoadingInProgress bool                   `protobuf:"varint,4,opt,name=limits_loading_in_progress,json=limitsLoadingInProgress,proto3" json:"limits_loading_in_progress,omitempty"` //Признак идущей в данный момент выгрузки лимитов.
	Futures                 []*PositionsFutures    `protobuf:"bytes,5,rep,name=futures,proto3" json:"futures,omitempty"`                                                                     //Список фьючерсов портфеля.
	Options                 []*PositionsOptions    `protobuf:"bytes,6,rep,name=options,proto3" json:"options,omitempty"`                                                                     //Список опционов портфеля.
}

func (x *PositionsResponse) Reset() {
	*x = PositionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionsResponse) ProtoMessage() {}

func (x *PositionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionsResponse.ProtoReflect.Descriptor instead.
func (*PositionsResponse) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{7}
}

func (x *PositionsResponse) GetMoney() []*MoneyValue {
	if x != nil {
		return x.Money
	}
	return nil
}

func (x *PositionsResponse) GetBlocked() []*MoneyValue {
	if x != nil {
		return x.Blocked
	}
	return nil
}

func (x *PositionsResponse) GetSecurities() []*PositionsSecurities {
	if x != nil {
		return x.Securities
	}
	return nil
}

func (x *PositionsResponse) GetLimitsLoadingInProgress() bool {
	if x != nil {
		return x.LimitsLoadingInProgress
	}
	return false
}

func (x *PositionsResponse) GetFutures() []*PositionsFutures {
	if x != nil {
		return x.Futures
	}
	return nil
}

func (x *PositionsResponse) GetOptions() []*PositionsOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// Запрос доступного для вывода остатка.
type WithdrawLimitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` //Идентификатор счёта пользователя.
}

func (x *WithdrawLimitsRequest) Reset() {
	*x = WithdrawLimitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawLimitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawLimitsRequest) ProtoMessage() {}

func (x *WithdrawLimitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawLimitsRequest.ProtoReflect.Descriptor instead.
func (*WithdrawLimitsRequest) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{8}
}

func (x *WithdrawLimitsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// Доступный для вывода остаток.
type WithdrawLimitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Money            []*MoneyValue `protobuf:"bytes,1,rep,name=money,proto3" json:"money,omitempty"`                                               //Массив валютных позиций портфеля.
	Blocked          []*MoneyValue `protobuf:"bytes,2,rep,name=blocked,proto3" json:"blocked,omitempty"`                                           //Массив заблокированных валютных позиций портфеля.
	BlockedGuarantee []*MoneyValue `protobuf:"bytes,3,rep,name=blocked_guarantee,json=blockedGuarantee,proto3" json:"blocked_guarantee,omitempty"` //Заблокировано под гарантийное обеспечение фьючерсов.
}

func (x *WithdrawLimitsResponse) Reset() {
	*x = WithdrawLimitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawLimitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawLimitsResponse) ProtoMessage() {}

func (x *WithdrawLimitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawLimitsResponse.ProtoReflect.Descriptor instead.
func (*WithdrawLimitsResponse) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{9}
}

func (x *WithdrawLimitsResponse) GetMoney() []*MoneyValue {
	if x != nil {
		return x.Money
	}
	return nil
}

func (x *WithdrawLimitsResponse) GetBlocked() []*MoneyValue {
	if x != nil {
		return x.Blocked
	}
	return nil
}

func (x *WithdrawLimitsResponse) GetBlockedGuarantee() []*MoneyValue {
	if x != nil {
		return x.BlockedGuarantee
	}
	return nil
}

// Позиции портфеля.
type PortfolioPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi                 string      `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                               //Figi-идентификатора инструмента.
	InstrumentType       string      `protobuf:"bytes,2,opt,name=instrument_type,json=instrumentType,proto3" json:"instrument_type,omitempty"`                     //Тип инструмента.
	Quantity             *Quotation  `protobuf:"bytes,3,opt,name=quantity,proto3" json:"quantity,omitempty"`                                                       //Количество инструмента в портфеле в штуках.
	AveragePositionPrice *MoneyValue `protobuf:"bytes,4,opt,name=average_position_price,json=averagePositionPrice,proto3" json:"average_position_price,omitempty"` //Средневзвешенная цена позиции. **Возможна задержка до секунды для пересчёта**.
	ExpectedYield        *Quotation  `protobuf:"bytes,5,opt,name=expected_yield,json=expectedYield,proto3" json:"expected_yield,omitempty"`                        //Текущая рассчитанная доходность позиции.
	CurrentNkd           *MoneyValue `protobuf:"bytes,6,opt,name=current_nkd,json=currentNkd,proto3" json:"current_nkd,omitempty"`                                 // Текущий НКД.
	// Deprecated: Marked as deprecated in operations.proto.
	AveragePositionPricePt   *Quotation  `protobuf:"bytes,7,opt,name=average_position_price_pt,json=averagePositionPricePt,proto3" json:"average_position_price_pt,omitempty"`       // Deprecated Средняя цена позиции в пунктах (для фьючерсов). **Возможна задержка до секунды для пересчёта**.
	CurrentPrice             *MoneyValue `protobuf:"bytes,8,opt,name=current_price,json=currentPrice,proto3" json:"current_price,omitempty"`                                         //Текущая цена за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента.
	AveragePositionPriceFifo *MoneyValue `protobuf:"bytes,9,opt,name=average_position_price_fifo,json=averagePositionPriceFifo,proto3" json:"average_position_price_fifo,omitempty"` //Средняя цена позиции по методу FIFO. **Возможна задержка до секунды для пересчёта**.
	// Deprecated: Marked as deprecated in operations.proto.
	QuantityLots      *Quotation  `protobuf:"bytes,10,opt,name=quantity_lots,json=quantityLots,proto3" json:"quantity_lots,omitempty"`                  //Deprecated Количество лотов в портфеле.
	Blocked           bool        `protobuf:"varint,21,opt,name=blocked,proto3" json:"blocked,omitempty"`                                               //Заблокировано на бирже.
	BlockedLots       *Quotation  `protobuf:"bytes,22,opt,name=blocked_lots,json=blockedLots,proto3" json:"blocked_lots,omitempty"`                     //Количество бумаг, заблокированных выставленными заявками.
	PositionUid       string      `protobuf:"bytes,24,opt,name=position_uid,json=positionUid,proto3" json:"position_uid,omitempty"`                     //position_uid-идентификатора инструмента
	InstrumentUid     string      `protobuf:"bytes,25,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`               //instrument_uid-идентификатора инструмента
	VarMargin         *MoneyValue `protobuf:"bytes,26,opt,name=var_margin,json=varMargin,proto3" json:"var_margin,omitempty"`                           //Вариационная маржа
	ExpectedYieldFifo *Quotation  `protobuf:"bytes,27,opt,name=expected_yield_fifo,json=expectedYieldFifo,proto3" json:"expected_yield_fifo,omitempty"` //Текущая рассчитанная доходность позиции.
}

func (x *PortfolioPosition) Reset() {
	*x = PortfolioPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortfolioPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortfolioPosition) ProtoMessage() {}

func (x *PortfolioPosition) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortfolioPosition.ProtoReflect.Descriptor instead.
func (*PortfolioPosition) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{10}
}

func (x *PortfolioPosition) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *PortfolioPosition) GetInstrumentType() string {
	if x != nil {
		return x.InstrumentType
	}
	return ""
}

func (x *PortfolioPosition) GetQuantity() *Quotation {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *PortfolioPosition) GetAveragePositionPrice() *MoneyValue {
	if x != nil {
		return x.AveragePositionPrice
	}
	return nil
}

func (x *PortfolioPosition) GetExpectedYield() *Quotation {
	if x != nil {
		return x.ExpectedYield
	}
	return nil
}

func (x *PortfolioPosition) GetCurrentNkd() *MoneyValue {
	if x != nil {
		return x.CurrentNkd
	}
	return nil
}

// Deprecated: Marked as deprecated in operations.proto.
func (x *PortfolioPosition) GetAveragePositionPricePt() *Quotation {
	if x != nil {
		return x.AveragePositionPricePt
	}
	return nil
}

func (x *PortfolioPosition) GetCurrentPrice() *MoneyValue {
	if x != nil {
		return x.CurrentPrice
	}
	return nil
}

func (x *PortfolioPosition) GetAveragePositionPriceFifo() *MoneyValue {
	if x != nil {
		return x.AveragePositionPriceFifo
	}
	return nil
}

// Deprecated: Marked as deprecated in operations.proto.
func (x *PortfolioPosition) GetQuantityLots() *Quotation {
	if x != nil {
		return x.QuantityLots
	}
	return nil
}

func (x *PortfolioPosition) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

func (x *PortfolioPosition) GetBlockedLots() *Quotation {
	if x != nil {
		return x.BlockedLots
	}
	return nil
}

func (x *PortfolioPosition) GetPositionUid() string {
	if x != nil {
		return x.PositionUid
	}
	return ""
}

func (x *PortfolioPosition) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

func (x *PortfolioPosition) GetVarMargin() *MoneyValue {
	if x != nil {
		return x.VarMargin
	}
	return nil
}

func (x *PortfolioPosition) GetExpectedYieldFifo() *Quotation {
	if x != nil {
		return x.ExpectedYieldFifo
	}
	return nil
}

type VirtualPortfolioPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionUid              string                 `protobuf:"bytes,1,opt,name=position_uid,json=positionUid,proto3" json:"position_uid,omitempty"`                                             //position_uid-идентификатора инструмента
	InstrumentUid            string                 `protobuf:"bytes,2,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                                       //instrument_uid-идентификатора инструмента
	Figi                     string                 `protobuf:"bytes,3,opt,name=figi,proto3" json:"figi,omitempty"`                                                                              //Figi-идентификатора инструмента.
	InstrumentType           string                 `protobuf:"bytes,4,opt,name=instrument_type,json=instrumentType,proto3" json:"instrument_type,omitempty"`                                    //Тип инструмента.
	Quantity                 *Quotation             `protobuf:"bytes,5,opt,name=quantity,proto3" json:"quantity,omitempty"`                                                                      //Количество инструмента в портфеле в штуках.
	AveragePositionPrice     *MoneyValue            `protobuf:"bytes,6,opt,name=average_position_price,json=averagePositionPrice,proto3" json:"average_position_price,omitempty"`                //Средневзвешенная цена позиции. **Возможна задержка до секунды для пересчёта**.
	ExpectedYield            *Quotation             `protobuf:"bytes,7,opt,name=expected_yield,json=expectedYield,proto3" json:"expected_yield,omitempty"`                                       //Текущая рассчитанная доходность позиции.
	ExpectedYieldFifo        *Quotation             `protobuf:"bytes,8,opt,name=expected_yield_fifo,json=expectedYieldFifo,proto3" json:"expected_yield_fifo,omitempty"`                         //Текущая рассчитанная доходность позиции.
	ExpireDate               *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`                                                //Дата до которой нужно продать виртуальные бумаги, после этой даты виртуальная позиция "сгорит"
	CurrentPrice             *MoneyValue            `protobuf:"bytes,10,opt,name=current_price,json=currentPrice,proto3" json:"current_price,omitempty"`                                         //Текущая цена за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента.
	AveragePositionPriceFifo *MoneyValue            `protobuf:"bytes,11,opt,name=average_position_price_fifo,json=averagePositionPriceFifo,proto3" json:"average_position_price_fifo,omitempty"` //Средняя цена позиции по методу FIFO. **Возможна задержка до секунды для пересчёта**.
}

func (x *VirtualPortfolioPosition) Reset() {
	*x = VirtualPortfolioPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualPortfolioPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualPortfolioPosition) ProtoMessage() {}

func (x *VirtualPortfolioPosition) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualPortfolioPosition.ProtoReflect.Descriptor instead.
func (*VirtualPortfolioPosition) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{11}
}

func (x *VirtualPortfolioPosition) GetPositionUid() string {
	if x != nil {
		return x.PositionUid
	}
	return ""
}

func (x *VirtualPortfolioPosition) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

func (x *VirtualPortfolioPosition) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *VirtualPortfolioPosition) GetInstrumentType() string {
	if x != nil {
		return x.InstrumentType
	}
	return ""
}

func (x *VirtualPortfolioPosition) GetQuantity() *Quotation {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *VirtualPortfolioPosition) GetAveragePositionPrice() *MoneyValue {
	if x != nil {
		return x.AveragePositionPrice
	}
	return nil
}

func (x *VirtualPortfolioPosition) GetExpectedYield() *Quotation {
	if x != nil {
		return x.ExpectedYield
	}
	return nil
}

func (x *VirtualPortfolioPosition) GetExpectedYieldFifo() *Quotation {
	if x != nil {
		return x.ExpectedYieldFifo
	}
	return nil
}

func (x *VirtualPortfolioPosition) GetExpireDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireDate
	}
	return nil
}

func (x *VirtualPortfolioPosition) GetCurrentPrice() *MoneyValue {
	if x != nil {
		return x.CurrentPrice
	}
	return nil
}

func (x *VirtualPortfolioPosition) GetAveragePositionPriceFifo() *MoneyValue {
	if x != nil {
		return x.AveragePositionPriceFifo
	}
	return nil
}

// Баланс позиции ценной бумаги.
type PositionsSecurities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi            string `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                //Figi-идентификатор бумаги.
	Blocked         int64  `protobuf:"varint,2,opt,name=blocked,proto3" json:"blocked,omitempty"`                                         //Количество бумаг заблокированных выставленными заявками.
	Balance         int64  `protobuf:"varint,3,opt,name=balance,proto3" json:"balance,omitempty"`                                         //Текущий незаблокированный баланс.
	PositionUid     string `protobuf:"bytes,4,opt,name=position_uid,json=positionUid,proto3" json:"position_uid,omitempty"`               //Уникальный идентификатор позиции.
	InstrumentUid   string `protobuf:"bytes,5,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`         //Уникальный идентификатор  инструмента.
	ExchangeBlocked bool   `protobuf:"varint,11,opt,name=exchange_blocked,json=exchangeBlocked,proto3" json:"exchange_blocked,omitempty"` //Заблокировано на бирже.
	InstrumentType  string `protobuf:"bytes,16,opt,name=instrument_type,json=instrumentType,proto3" json:"instrument_type,omitempty"`     //Тип инструмента.
}

func (x *PositionsSecurities) Reset() {
	*x = PositionsSecurities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionsSecurities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionsSecurities) ProtoMessage() {}

func (x *PositionsSecurities) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionsSecurities.ProtoReflect.Descriptor instead.
func (*PositionsSecurities) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{12}
}

func (x *PositionsSecurities) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *PositionsSecurities) GetBlocked() int64 {
	if x != nil {
		return x.Blocked
	}
	return 0
}

func (x *PositionsSecurities) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *PositionsSecurities) GetPositionUid() string {
	if x != nil {
		return x.PositionUid
	}
	return ""
}

func (x *PositionsSecurities) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

func (x *PositionsSecurities) GetExchangeBlocked() bool {
	if x != nil {
		return x.ExchangeBlocked
	}
	return false
}

func (x *PositionsSecurities) GetInstrumentType() string {
	if x != nil {
		return x.InstrumentType
	}
	return ""
}

// Баланс фьючерса.
type PositionsFutures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figi          string `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                        //Figi-идентификатор фьючерса.
	Blocked       int64  `protobuf:"varint,2,opt,name=blocked,proto3" json:"blocked,omitempty"`                                 //Количество бумаг заблокированных выставленными заявками.
	Balance       int64  `protobuf:"varint,3,opt,name=balance,proto3" json:"balance,omitempty"`                                 //Текущий незаблокированный баланс.
	PositionUid   string `protobuf:"bytes,4,opt,name=position_uid,json=positionUid,proto3" json:"position_uid,omitempty"`       //Уникальный идентификатор позиции.
	InstrumentUid string `protobuf:"bytes,5,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"` //Уникальный идентификатор  инструмента.
}

func (x *PositionsFutures) Reset() {
	*x = PositionsFutures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionsFutures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionsFutures) ProtoMessage() {}

func (x *PositionsFutures) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionsFutures.ProtoReflect.Descriptor instead.
func (*PositionsFutures) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{13}
}

func (x *PositionsFutures) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *PositionsFutures) GetBlocked() int64 {
	if x != nil {
		return x.Blocked
	}
	return 0
}

func (x *PositionsFutures) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *PositionsFutures) GetPositionUid() string {
	if x != nil {
		return x.PositionUid
	}
	return ""
}

func (x *PositionsFutures) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

// Баланс опциона.
type PositionsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionUid   string `protobuf:"bytes,1,opt,name=position_uid,json=positionUid,proto3" json:"position_uid,omitempty"`       //Уникальный идентификатор позиции опциона.
	InstrumentUid string `protobuf:"bytes,2,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"` //Уникальный идентификатор  инструмента.
	Blocked       int64  `protobuf:"varint,11,opt,name=blocked,proto3" json:"blocked,omitempty"`                                //Количество бумаг заблокированных выставленными заявками.
	Balance       int64  `protobuf:"varint,21,opt,name=balance,proto3" json:"balance,omitempty"`                                //Текущий незаблокированный баланс.
}

func (x *PositionsOptions) Reset() {
	*x = PositionsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionsOptions) ProtoMessage() {}

func (x *PositionsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionsOptions.ProtoReflect.Descriptor instead.
func (*PositionsOptions) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{14}
}

func (x *PositionsOptions) GetPositionUid() string {
	if x != nil {
		return x.PositionUid
	}
	return ""
}

func (x *PositionsOptions) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

func (x *PositionsOptions) GetBlocked() int64 {
	if x != nil {
		return x.Blocked
	}
	return 0
}

func (x *PositionsOptions) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type BrokerReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*BrokerReportRequest_GenerateBrokerReportRequest
	//	*BrokerReportRequest_GetBrokerReportRequest
	Payload isBrokerReportRequest_Payload `protobuf_oneof:"payload"`
}

func (x *BrokerReportRequest) Reset() {
	*x = BrokerReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrokerReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerReportRequest) ProtoMessage() {}

func (x *BrokerReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerReportRequest.ProtoReflect.Descriptor instead.
func (*BrokerReportRequest) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{15}
}

func (m *BrokerReportRequest) GetPayload() isBrokerReportRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *BrokerReportRequest) GetGenerateBrokerReportRequest() *GenerateBrokerReportRequest {
	if x, ok := x.GetPayload().(*BrokerReportRequest_GenerateBrokerReportRequest); ok {
		return x.GenerateBrokerReportRequest
	}
	return nil
}

func (x *BrokerReportRequest) GetGetBrokerReportRequest() *GetBrokerReportRequest {
	if x, ok := x.GetPayload().(*BrokerReportRequest_GetBrokerReportRequest); ok {
		return x.GetBrokerReportRequest
	}
	return nil
}

type isBrokerReportRequest_Payload interface {
	isBrokerReportRequest_Payload()
}

type BrokerReportRequest_GenerateBrokerReportRequest struct {
	GenerateBrokerReportRequest *GenerateBrokerReportRequest `protobuf:"bytes,1,opt,name=generate_broker_report_request,json=generateBrokerReportRequest,proto3,oneof"`
}

type BrokerReportRequest_GetBrokerReportRequest struct {
	GetBrokerReportRequest *GetBrokerReportRequest `protobuf:"bytes,2,opt,name=get_broker_report_request,json=getBrokerReportRequest,proto3,oneof"`
}

func (*BrokerReportRequest_GenerateBrokerReportRequest) isBrokerReportRequest_Payload() {}

func (*BrokerReportRequest_GetBrokerReportRequest) isBrokerReportRequest_Payload() {}

type BrokerReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*BrokerReportResponse_GenerateBrokerReportResponse
	//	*BrokerReportResponse_GetBrokerReportResponse
	Payload isBrokerReportResponse_Payload `protobuf_oneof:"payload"`
}

func (x *BrokerReportResponse) Reset() {
	*x = BrokerReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrokerReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerReportResponse) ProtoMessage() {}

func (x *BrokerReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerReportResponse.ProtoReflect.Descriptor instead.
func (*BrokerReportResponse) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{16}
}

func (m *BrokerReportResponse) GetPayload() isBrokerReportResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *BrokerReportResponse) GetGenerateBrokerReportResponse() *GenerateBrokerReportResponse {
	if x, ok := x.GetPayload().(*BrokerReportResponse_GenerateBrokerReportResponse); ok {
		return x.GenerateBrokerReportResponse
	}
	return nil
}

func (x *BrokerReportResponse) GetGetBrokerReportResponse() *GetBrokerReportResponse {
	if x, ok := x.GetPayload().(*BrokerReportResponse_GetBrokerReportResponse); ok {
		return x.GetBrokerReportResponse
	}
	return nil
}

type isBrokerReportResponse_Payload interface {
	isBrokerReportResponse_Payload()
}

type BrokerReportResponse_GenerateBrokerReportResponse struct {
	GenerateBrokerReportResponse *GenerateBrokerReportResponse `protobuf:"bytes,1,opt,name=generate_broker_report_response,json=generateBrokerReportResponse,proto3,oneof"`
}

type BrokerReportResponse_GetBrokerReportResponse struct {
	GetBrokerReportResponse *GetBrokerReportResponse `protobuf:"bytes,2,opt,name=get_broker_report_response,json=getBrokerReportResponse,proto3,oneof"`
}

func (*BrokerReportResponse_GenerateBrokerReportResponse) isBrokerReportResponse_Payload() {}

func (*BrokerReportResponse_GetBrokerReportResponse) isBrokerReportResponse_Payload() {}

type GenerateBrokerReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string                 `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` //Идентификатор счёта клиента.
	From      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`                            //Начало периода в часовом поясе UTC.
	To        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`                                //Окончание периода в часовом поясе UTC.
}

func (x *GenerateBrokerReportRequest) Reset() {
	*x = GenerateBrokerReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateBrokerReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateBrokerReportRequest) ProtoMessage() {}

func (x *GenerateBrokerReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateBrokerReportRequest.ProtoReflect.Descriptor instead.
func (*GenerateBrokerReportRequest) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{17}
}

func (x *GenerateBrokerReportRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GenerateBrokerReportRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *GenerateBrokerReportRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

type GenerateBrokerReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"` //Идентификатор задачи формирования брокерского отчёта.
}

func (x *GenerateBrokerReportResponse) Reset() {
	*x = GenerateBrokerReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateBrokerReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateBrokerReportResponse) ProtoMessage() {}

func (x *GenerateBrokerReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateBrokerReportResponse.ProtoReflect.Descriptor instead.
func (*GenerateBrokerReportResponse) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{18}
}

func (x *GenerateBrokerReportResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetBrokerReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"` //Идентификатор задачи формирования брокерского отчёта.
	Page   *int32 `protobuf:"varint,2,opt,name=page,proto3,oneof" json:"page,omitempty"`            //Номер страницы отчета (начинается с 1), значение по умолчанию: 0.
}

func (x *GetBrokerReportRequest) Reset() {
	*x = GetBrokerReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBrokerReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBrokerReportRequest) ProtoMessage() {}

func (x *GetBrokerReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBrokerReportRequest.ProtoReflect.Descriptor instead.
func (*GetBrokerReportRequest) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{19}
}

func (x *GetBrokerReportRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GetBrokerReportRequest) GetPage() int32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

type GetBrokerReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerReport []*BrokerReport `protobuf:"bytes,1,rep,name=broker_report,json=brokerReport,proto3" json:"broker_report,omitempty"`
	ItemsCount   int32           `protobuf:"varint,2,opt,name=itemsCount,proto3" json:"itemsCount,omitempty"` //Количество записей в отчете.
	PagesCount   int32           `protobuf:"varint,3,opt,name=pagesCount,proto3" json:"pagesCount,omitempty"` //Количество страниц с данными отчета (начинается с 0).
	Page         int32           `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`             //Текущая страница (начинается с 0).
}

func (x *GetBrokerReportResponse) Reset() {
	*x = GetBrokerReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBrokerReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBrokerReportResponse) ProtoMessage() {}

func (x *GetBrokerReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBrokerReportResponse.ProtoReflect.Descriptor instead.
func (*GetBrokerReportResponse) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{20}
}

func (x *GetBrokerReportResponse) GetBrokerReport() []*BrokerReport {
	if x != nil {
		return x.BrokerReport
	}
	return nil
}

func (x *GetBrokerReportResponse) GetItemsCount() int32 {
	if x != nil {
		return x.ItemsCount
	}
	return 0
}

func (x *GetBrokerReportResponse) GetPagesCount() int32 {
	if x != nil {
		return x.PagesCount
	}
	return 0
}

func (x *GetBrokerReportResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type BrokerReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeId                    string                 `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`                                                             //Номер сделки.
	OrderId                    string                 `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                                             //Номер поручения.
	Figi                       string                 `protobuf:"bytes,3,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                  //Figi-идентификатор инструмента.
	ExecuteSign                string                 `protobuf:"bytes,4,opt,name=execute_sign,json=executeSign,proto3" json:"execute_sign,omitempty"`                                                 //Признак исполнения.
	TradeDatetime              *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=trade_datetime,json=tradeDatetime,proto3" json:"trade_datetime,omitempty"`                                           //Дата и время заключения в часовом поясе UTC.
	Exchange                   string                 `protobuf:"bytes,6,opt,name=exchange,proto3" json:"exchange,omitempty"`                                                                          //Торговая площадка.
	ClassCode                  string                 `protobuf:"bytes,7,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`                                                       //Режим торгов.
	Direction                  string                 `protobuf:"bytes,8,opt,name=direction,proto3" json:"direction,omitempty"`                                                                        //Вид сделки.
	Name                       string                 `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`                                                                                  //Сокращённое наименование актива.
	Ticker                     string                 `protobuf:"bytes,10,opt,name=ticker,proto3" json:"ticker,omitempty"`                                                                             //Код актива.
	Price                      *MoneyValue            `protobuf:"bytes,11,opt,name=price,proto3" json:"price,omitempty"`                                                                               //Цена за единицу.
	Quantity                   int64                  `protobuf:"varint,12,opt,name=quantity,proto3" json:"quantity,omitempty"`                                                                        //Количество.
	OrderAmount                *MoneyValue            `protobuf:"bytes,13,opt,name=order_amount,json=orderAmount,proto3" json:"order_amount,omitempty"`                                                //Сумма (без НКД).
	AciValue                   *Quotation             `protobuf:"bytes,14,opt,name=aci_value,json=aciValue,proto3" json:"aci_value,omitempty"`                                                         //НКД.
	TotalOrderAmount           *MoneyValue            `protobuf:"bytes,15,opt,name=total_order_amount,json=totalOrderAmount,proto3" json:"total_order_amount,omitempty"`                               //Сумма сделки.
	BrokerCommission           *MoneyValue            `protobuf:"bytes,16,opt,name=broker_commission,json=brokerCommission,proto3" json:"broker_commission,omitempty"`                                 //Комиссия брокера.
	ExchangeCommission         *MoneyValue            `protobuf:"bytes,17,opt,name=exchange_commission,json=exchangeCommission,proto3" json:"exchange_commission,omitempty"`                           //Комиссия биржи.
	ExchangeClearingCommission *MoneyValue            `protobuf:"bytes,18,opt,name=exchange_clearing_commission,json=exchangeClearingCommission,proto3" json:"exchange_clearing_commission,omitempty"` //Комиссия клир. центра.
	RepoRate                   *Quotation             `protobuf:"bytes,19,opt,name=repo_rate,json=repoRate,proto3" json:"repo_rate,omitempty"`                                                         //Ставка РЕПО (%).
	Party                      string                 `protobuf:"bytes,20,opt,name=party,proto3" json:"party,omitempty"`                                                                               //Контрагент/Брокер.
	ClearValueDate             *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=clear_value_date,json=clearValueDate,proto3" json:"clear_value_date,omitempty"`                                     //Дата расчётов в часовом поясе UTC.
	SecValueDate               *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=sec_value_date,json=secValueDate,proto3" json:"sec_value_date,omitempty"`                                           //Дата поставки в часовом поясе UTC.
	BrokerStatus               string                 `protobuf:"bytes,23,opt,name=broker_status,json=brokerStatus,proto3" json:"broker_status,omitempty"`                                             //Статус брокера.
	SeparateAgreementType      string                 `protobuf:"bytes,24,opt,name=separate_agreement_type,json=separateAgreementType,proto3" json:"separate_agreement_type,omitempty"`                //Тип дог.
	SeparateAgreementNumber    string                 `protobuf:"bytes,25,opt,name=separate_agreement_number,json=separateAgreementNumber,proto3" json:"separate_agreement_number,omitempty"`          //Номер дог.
	SeparateAgreementDate      string                 `protobuf:"bytes,26,opt,name=separate_agreement_date,json=separateAgreementDate,proto3" json:"separate_agreement_date,omitempty"`                //Дата дог.
	DeliveryType               string                 `protobuf:"bytes,27,opt,name=delivery_type,json=deliveryType,proto3" json:"delivery_type,omitempty"`                                             //Тип расчёта по сделке.
}

func (x *BrokerReport) Reset() {
	*x = BrokerReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrokerReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerReport) ProtoMessage() {}

func (x *BrokerReport) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerReport.ProtoReflect.Descriptor instead.
func (*BrokerReport) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{21}
}

func (x *BrokerReport) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *BrokerReport) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *BrokerReport) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *BrokerReport) GetExecuteSign() string {
	if x != nil {
		return x.ExecuteSign
	}
	return ""
}

func (x *BrokerReport) GetTradeDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.TradeDatetime
	}
	return nil
}

func (x *BrokerReport) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *BrokerReport) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *BrokerReport) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *BrokerReport) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BrokerReport) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *BrokerReport) GetPrice() *MoneyValue {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *BrokerReport) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *BrokerReport) GetOrderAmount() *MoneyValue {
	if x != nil {
		return x.OrderAmount
	}
	return nil
}

func (x *BrokerReport) GetAciValue() *Quotation {
	if x != nil {
		return x.AciValue
	}
	return nil
}

func (x *BrokerReport) GetTotalOrderAmount() *MoneyValue {
	if x != nil {
		return x.TotalOrderAmount
	}
	return nil
}

func (x *BrokerReport) GetBrokerCommission() *MoneyValue {
	if x != nil {
		return x.BrokerCommission
	}
	return nil
}

func (x *BrokerReport) GetExchangeCommission() *MoneyValue {
	if x != nil {
		return x.ExchangeCommission
	}
	return nil
}

func (x *BrokerReport) GetExchangeClearingCommission() *MoneyValue {
	if x != nil {
		return x.ExchangeClearingCommission
	}
	return nil
}

func (x *BrokerReport) GetRepoRate() *Quotation {
	if x != nil {
		return x.RepoRate
	}
	return nil
}

func (x *BrokerReport) GetParty() string {
	if x != nil {
		return x.Party
	}
	return ""
}

func (x *BrokerReport) GetClearValueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ClearValueDate
	}
	return nil
}

func (x *BrokerReport) GetSecValueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.SecValueDate
	}
	return nil
}

func (x *BrokerReport) GetBrokerStatus() string {
	if x != nil {
		return x.BrokerStatus
	}
	return ""
}

func (x *BrokerReport) GetSeparateAgreementType() string {
	if x != nil {
		return x.SeparateAgreementType
	}
	return ""
}

func (x *BrokerReport) GetSeparateAgreementNumber() string {
	if x != nil {
		return x.SeparateAgreementNumber
	}
	return ""
}

func (x *BrokerReport) GetSeparateAgreementDate() string {
	if x != nil {
		return x.SeparateAgreementDate
	}
	return ""
}

func (x *BrokerReport) GetDeliveryType() string {
	if x != nil {
		return x.DeliveryType
	}
	return ""
}

type GetDividendsForeignIssuerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*GetDividendsForeignIssuerRequest_GenerateDivForeignIssuerReport
	//	*GetDividendsForeignIssuerRequest_GetDivForeignIssuerReport
	Payload isGetDividendsForeignIssuerRequest_Payload `protobuf_oneof:"payload"`
}

func (x *GetDividendsForeignIssuerRequest) Reset() {
	*x = GetDividendsForeignIssuerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDividendsForeignIssuerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDividendsForeignIssuerRequest) ProtoMessage() {}

func (x *GetDividendsForeignIssuerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDividendsForeignIssuerRequest.ProtoReflect.Descriptor instead.
func (*GetDividendsForeignIssuerRequest) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{22}
}

func (m *GetDividendsForeignIssuerRequest) GetPayload() isGetDividendsForeignIssuerRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *GetDividendsForeignIssuerRequest) GetGenerateDivForeignIssuerReport() *GenerateDividendsForeignIssuerReportRequest {
	if x, ok := x.GetPayload().(*GetDividendsForeignIssuerRequest_GenerateDivForeignIssuerReport); ok {
		return x.GenerateDivForeignIssuerReport
	}
	return nil
}

func (x *GetDividendsForeignIssuerRequest) GetGetDivForeignIssuerReport() *GetDividendsForeignIssuerReportRequest {
	if x, ok := x.GetPayload().(*GetDividendsForeignIssuerRequest_GetDivForeignIssuerReport); ok {
		return x.GetDivForeignIssuerReport
	}
	return nil
}

type isGetDividendsForeignIssuerRequest_Payload interface {
	isGetDividendsForeignIssuerRequest_Payload()
}

type GetDividendsForeignIssuerRequest_GenerateDivForeignIssuerReport struct {
	GenerateDivForeignIssuerReport *GenerateDividendsForeignIssuerReportRequest `protobuf:"bytes,1,opt,name=generate_div_foreign_issuer_report,json=generateDivForeignIssuerReport,proto3,oneof"` //Объект запроса формирования отчёта.
}

type GetDividendsForeignIssuerRequest_GetDivForeignIssuerReport struct {
	GetDivForeignIssuerReport *GetDividendsForeignIssuerReportRequest `protobuf:"bytes,2,opt,name=get_div_foreign_issuer_report,json=getDivForeignIssuerReport,proto3,oneof"` //Объект запроса сформированного отчёта.
}

func (*GetDividendsForeignIssuerRequest_GenerateDivForeignIssuerReport) isGetDividendsForeignIssuerRequest_Payload() {
}

func (*GetDividendsForeignIssuerRequest_GetDivForeignIssuerReport) isGetDividendsForeignIssuerRequest_Payload() {
}

type GetDividendsForeignIssuerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*GetDividendsForeignIssuerResponse_GenerateDivForeignIssuerReportResponse
	//	*GetDividendsForeignIssuerResponse_DivForeignIssuerReport
	Payload isGetDividendsForeignIssuerResponse_Payload `protobuf_oneof:"payload"`
}

func (x *GetDividendsForeignIssuerResponse) Reset() {
	*x = GetDividendsForeignIssuerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDividendsForeignIssuerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDividendsForeignIssuerResponse) ProtoMessage() {}

func (x *GetDividendsForeignIssuerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDividendsForeignIssuerResponse.ProtoReflect.Descriptor instead.
func (*GetDividendsForeignIssuerResponse) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{23}
}

func (m *GetDividendsForeignIssuerResponse) GetPayload() isGetDividendsForeignIssuerResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *GetDividendsForeignIssuerResponse) GetGenerateDivForeignIssuerReportResponse() *GenerateDividendsForeignIssuerReportResponse {
	if x, ok := x.GetPayload().(*GetDividendsForeignIssuerResponse_GenerateDivForeignIssuerReportResponse); ok {
		return x.GenerateDivForeignIssuerReportResponse
	}
	return nil
}

func (x *GetDividendsForeignIssuerResponse) GetDivForeignIssuerReport() *GetDividendsForeignIssuerReportResponse {
	if x, ok := x.GetPayload().(*GetDividendsForeignIssuerResponse_DivForeignIssuerReport); ok {
		return x.DivForeignIssuerReport
	}
	return nil
}

type isGetDividendsForeignIssuerResponse_Payload interface {
	isGetDividendsForeignIssuerResponse_Payload()
}

type GetDividendsForeignIssuerResponse_GenerateDivForeignIssuerReportResponse struct {
	GenerateDivForeignIssuerReportResponse *GenerateDividendsForeignIssuerReportResponse `protobuf:"bytes,1,opt,name=generate_div_foreign_issuer_report_response,json=generateDivForeignIssuerReportResponse,proto3,oneof"` //Объект результата задачи запуска формирования отчёта.
}

type GetDividendsForeignIssuerResponse_DivForeignIssuerReport struct {
	DivForeignIssuerReport *GetDividendsForeignIssuerReportResponse `protobuf:"bytes,2,opt,name=div_foreign_issuer_report,json=divForeignIssuerReport,proto3,oneof"` //Отчёт "Справка о доходах за пределами РФ".
}

func (*GetDividendsForeignIssuerResponse_GenerateDivForeignIssuerReportResponse) isGetDividendsForeignIssuerResponse_Payload() {
}

func (*GetDividendsForeignIssuerResponse_DivForeignIssuerReport) isGetDividendsForeignIssuerResponse_Payload() {
}

// Объект запроса формирования отчёта "Справка о доходах за пределами РФ".
type GenerateDividendsForeignIssuerReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string                 `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` //Идентификатор счёта клиента.
	From      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`                            //Начало периода (по UTC).
	To        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`                                //Окончание периода (по UTC), как правило, возможно сформировать отчет по дату, на несколько дней меньше текущей. Начало и окончание периода должны быть в рамках одного календарного года.
}

func (x *GenerateDividendsForeignIssuerReportRequest) Reset() {
	*x = GenerateDividendsForeignIssuerReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateDividendsForeignIssuerReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateDividendsForeignIssuerReportRequest) ProtoMessage() {}

func (x *GenerateDividendsForeignIssuerReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateDividendsForeignIssuerReportRequest.ProtoReflect.Descriptor instead.
func (*GenerateDividendsForeignIssuerReportRequest) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{24}
}

func (x *GenerateDividendsForeignIssuerReportRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GenerateDividendsForeignIssuerReportRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *GenerateDividendsForeignIssuerReportRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

// Объект запроса сформированного отчёта "Справка о доходах за пределами РФ".
type GetDividendsForeignIssuerReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"` //Идентификатор задачи формирования отчёта.
	Page   *int32 `protobuf:"varint,2,opt,name=page,proto3,oneof" json:"page,omitempty"`            //Номер страницы отчета (начинается с 0), значение по умолчанию: 0.
}

func (x *GetDividendsForeignIssuerReportRequest) Reset() {
	*x = GetDividendsForeignIssuerReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDividendsForeignIssuerReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDividendsForeignIssuerReportRequest) ProtoMessage() {}

func (x *GetDividendsForeignIssuerReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDividendsForeignIssuerReportRequest.ProtoReflect.Descriptor instead.
func (*GetDividendsForeignIssuerReportRequest) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{25}
}

func (x *GetDividendsForeignIssuerReportRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GetDividendsForeignIssuerReportRequest) GetPage() int32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

// Объект результата задачи запуска формирования отчёта "Справка о доходах за пределами РФ".
type GenerateDividendsForeignIssuerReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"` //Идентификатор задачи формирования отчёта.
}

func (x *GenerateDividendsForeignIssuerReportResponse) Reset() {
	*x = GenerateDividendsForeignIssuerReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateDividendsForeignIssuerReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateDividendsForeignIssuerReportResponse) ProtoMessage() {}

func (x *GenerateDividendsForeignIssuerReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateDividendsForeignIssuerReportResponse.ProtoReflect.Descriptor instead.
func (*GenerateDividendsForeignIssuerReportResponse) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{26}
}

func (x *GenerateDividendsForeignIssuerReportResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetDividendsForeignIssuerReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DividendsForeignIssuerReport []*DividendsForeignIssuerReport `protobuf:"bytes,1,rep,name=dividends_foreign_issuer_report,json=dividendsForeignIssuerReport,proto3" json:"dividends_foreign_issuer_report,omitempty"`
	ItemsCount                   int32                           `protobuf:"varint,2,opt,name=itemsCount,proto3" json:"itemsCount,omitempty"` //Количество записей в отчете.
	PagesCount                   int32                           `protobuf:"varint,3,opt,name=pagesCount,proto3" json:"pagesCount,omitempty"` //Количество страниц с данными отчета (начинается с 0).
	Page                         int32                           `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`             //Текущая страница (начинается с 0).
}

func (x *GetDividendsForeignIssuerReportResponse) Reset() {
	*x = GetDividendsForeignIssuerReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDividendsForeignIssuerReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDividendsForeignIssuerReportResponse) ProtoMessage() {}

func (x *GetDividendsForeignIssuerReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDividendsForeignIssuerReportResponse.ProtoReflect.Descriptor instead.
func (*GetDividendsForeignIssuerReportResponse) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{27}
}

func (x *GetDividendsForeignIssuerReportResponse) GetDividendsForeignIssuerReport() []*DividendsForeignIssuerReport {
	if x != nil {
		return x.DividendsForeignIssuerReport
	}
	return nil
}

func (x *GetDividendsForeignIssuerReportResponse) GetItemsCount() int32 {
	if x != nil {
		return x.ItemsCount
	}
	return 0
}

func (x *GetDividendsForeignIssuerReportResponse) GetPagesCount() int32 {
	if x != nil {
		return x.PagesCount
	}
	return 0
}

func (x *GetDividendsForeignIssuerReportResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

// Отчёт "Справка о доходах за пределами РФ".
type DividendsForeignIssuerReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordDate         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=record_date,json=recordDate,proto3" json:"record_date,omitempty"`                         //Дата фиксации реестра.
	PaymentDate        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=payment_date,json=paymentDate,proto3" json:"payment_date,omitempty"`                      //Дата выплаты.
	SecurityName       string                 `protobuf:"bytes,3,opt,name=security_name,json=securityName,proto3" json:"security_name,omitempty"`                   //Наименование ценной бумаги.
	Isin               string                 `protobuf:"bytes,4,opt,name=isin,proto3" json:"isin,omitempty"`                                                       //ISIN-идентификатор ценной бумаги.
	IssuerCountry      string                 `protobuf:"bytes,5,opt,name=issuer_country,json=issuerCountry,proto3" json:"issuer_country,omitempty"`                //Страна эмитента. Для депозитарных расписок указывается страна эмитента базового актива.
	Quantity           int64                  `protobuf:"varint,6,opt,name=quantity,proto3" json:"quantity,omitempty"`                                              //Количество ценных бумаг.
	Dividend           *Quotation             `protobuf:"bytes,7,opt,name=dividend,proto3" json:"dividend,omitempty"`                                               //Выплаты на одну бумагу
	ExternalCommission *Quotation             `protobuf:"bytes,8,opt,name=external_commission,json=externalCommission,proto3" json:"external_commission,omitempty"` //Комиссия внешних платёжных агентов.
	DividendGross      *Quotation             `protobuf:"bytes,9,opt,name=dividend_gross,json=dividendGross,proto3" json:"dividend_gross,omitempty"`                //Сумма до удержания налога.
	Tax                *Quotation             `protobuf:"bytes,10,opt,name=tax,proto3" json:"tax,omitempty"`                                                        //Сумма налога, удержанного агентом.
	DividendAmount     *Quotation             `protobuf:"bytes,11,opt,name=dividend_amount,json=dividendAmount,proto3" json:"dividend_amount,omitempty"`            //Итоговая сумма выплаты.
	Currency           string                 `protobuf:"bytes,12,opt,name=currency,proto3" json:"currency,omitempty"`                                              //Валюта.
}

func (x *DividendsForeignIssuerReport) Reset() {
	*x = DividendsForeignIssuerReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DividendsForeignIssuerReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DividendsForeignIssuerReport) ProtoMessage() {}

func (x *DividendsForeignIssuerReport) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DividendsForeignIssuerReport.ProtoReflect.Descriptor instead.
func (*DividendsForeignIssuerReport) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{28}
}

func (x *DividendsForeignIssuerReport) GetRecordDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RecordDate
	}
	return nil
}

func (x *DividendsForeignIssuerReport) GetPaymentDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PaymentDate
	}
	return nil
}

func (x *DividendsForeignIssuerReport) GetSecurityName() string {
	if x != nil {
		return x.SecurityName
	}
	return ""
}

func (x *DividendsForeignIssuerReport) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *DividendsForeignIssuerReport) GetIssuerCountry() string {
	if x != nil {
		return x.IssuerCountry
	}
	return ""
}

func (x *DividendsForeignIssuerReport) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *DividendsForeignIssuerReport) GetDividend() *Quotation {
	if x != nil {
		return x.Dividend
	}
	return nil
}

func (x *DividendsForeignIssuerReport) GetExternalCommission() *Quotation {
	if x != nil {
		return x.ExternalCommission
	}
	return nil
}

func (x *DividendsForeignIssuerReport) GetDividendGross() *Quotation {
	if x != nil {
		return x.DividendGross
	}
	return nil
}

func (x *DividendsForeignIssuerReport) GetTax() *Quotation {
	if x != nil {
		return x.Tax
	}
	return nil
}

func (x *DividendsForeignIssuerReport) GetDividendAmount() *Quotation {
	if x != nil {
		return x.DividendAmount
	}
	return nil
}

func (x *DividendsForeignIssuerReport) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

// Запрос установки stream-соединения.
type PortfolioStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts []string `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"` //Массив идентификаторов счётов пользователя
}

func (x *PortfolioStreamRequest) Reset() {
	*x = PortfolioStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortfolioStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortfolioStreamRequest) ProtoMessage() {}

func (x *PortfolioStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortfolioStreamRequest.ProtoReflect.Descriptor instead.
func (*PortfolioStreamRequest) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{29}
}

func (x *PortfolioStreamRequest) GetAccounts() []string {
	if x != nil {
		return x.Accounts
	}
	return nil
}

// Информация по позициям и доходностям портфелей.
type PortfolioStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*PortfolioStreamResponse_Subscriptions
	//	*PortfolioStreamResponse_Portfolio
	//	*PortfolioStreamResponse_Ping
	Payload isPortfolioStreamResponse_Payload `protobuf_oneof:"payload"`
}

func (x *PortfolioStreamResponse) Reset() {
	*x = PortfolioStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortfolioStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortfolioStreamResponse) ProtoMessage() {}

func (x *PortfolioStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortfolioStreamResponse.ProtoReflect.Descriptor instead.
func (*PortfolioStreamResponse) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{30}
}

func (m *PortfolioStreamResponse) GetPayload() isPortfolioStreamResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *PortfolioStreamResponse) GetSubscriptions() *PortfolioSubscriptionResult {
	if x, ok := x.GetPayload().(*PortfolioStreamResponse_Subscriptions); ok {
		return x.Subscriptions
	}
	return nil
}

func (x *PortfolioStreamResponse) GetPortfolio() *PortfolioResponse {
	if x, ok := x.GetPayload().(*PortfolioStreamResponse_Portfolio); ok {
		return x.Portfolio
	}
	return nil
}

func (x *PortfolioStreamResponse) GetPing() *Ping {
	if x, ok := x.GetPayload().(*PortfolioStreamResponse_Ping); ok {
		return x.Ping
	}
	return nil
}

type isPortfolioStreamResponse_Payload interface {
	isPortfolioStreamResponse_Payload()
}

type PortfolioStreamResponse_Subscriptions struct {
	Subscriptions *PortfolioSubscriptionResult `protobuf:"bytes,1,opt,name=subscriptions,proto3,oneof"` //Объект результата подписки.
}

type PortfolioStreamResponse_Portfolio struct {
	Portfolio *PortfolioResponse `protobuf:"bytes,2,opt,name=portfolio,proto3,oneof"` //Объект стриминга портфеля.
}

type PortfolioStreamResponse_Ping struct {
	Ping *Ping `protobuf:"bytes,3,opt,name=ping,proto3,oneof"` //Проверка активности стрима.
}

func (*PortfolioStreamResponse_Subscriptions) isPortfolioStreamResponse_Payload() {}

func (*PortfolioStreamResponse_Portfolio) isPortfolioStreamResponse_Payload() {}

func (*PortfolioStreamResponse_Ping) isPortfolioStreamResponse_Payload() {}

// Объект результата подписки.
type PortfolioSubscriptionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts []*AccountSubscriptionStatus `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"` //Массив счетов клиента.
}

func (x *PortfolioSubscriptionResult) Reset() {
	*x = PortfolioSubscriptionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortfolioSubscriptionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortfolioSubscriptionResult) ProtoMessage() {}

func (x *PortfolioSubscriptionResult) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortfolioSubscriptionResult.ProtoReflect.Descriptor instead.
func (*PortfolioSubscriptionResult) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{31}
}

func (x *PortfolioSubscriptionResult) GetAccounts() []*AccountSubscriptionStatus {
	if x != nil {
		return x.Accounts
	}
	return nil
}

// Счет клиента.
type AccountSubscriptionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId          string                      `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                                                                                    //Идентификатор счёта
	SubscriptionStatus PortfolioSubscriptionStatus `protobuf:"varint,6,opt,name=subscription_status,json=subscriptionStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.PortfolioSubscriptionStatus" json:"subscription_status,omitempty"` //Результат подписки.
}

func (x *AccountSubscriptionStatus) Reset() {
	*x = AccountSubscriptionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountSubscriptionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountSubscriptionStatus) ProtoMessage() {}

func (x *AccountSubscriptionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountSubscriptionStatus.ProtoReflect.Descriptor instead.
func (*AccountSubscriptionStatus) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{32}
}

func (x *AccountSubscriptionStatus) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AccountSubscriptionStatus) GetSubscriptionStatus() PortfolioSubscriptionStatus {
	if x != nil {
		return x.SubscriptionStatus
	}
	return PortfolioSubscriptionStatus_PORTFOLIO_SUBSCRIPTION_STATUS_UNSPECIFIED
}

// Запрос списка операций по счёту с пагинацией.
type GetOperationsByCursorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId          string                 `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                                                                  //Идентификатор счёта клиента. Обязательный параметр для данного метода, остальные параметры опциональны.
	InstrumentId       *string                `protobuf:"bytes,2,opt,name=instrument_id,json=instrumentId,proto3,oneof" json:"instrument_id,omitempty"`                                                                   //Идентификатор инструмента (Figi инструмента или uid инструмента)
	From               *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=from,proto3,oneof" json:"from,omitempty"`                                                                                                       //Начало периода (по UTC).
	To                 *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=to,proto3,oneof" json:"to,omitempty"`                                                                                                           //Окончание периода (по UTC).
	Cursor             *string                `protobuf:"bytes,11,opt,name=cursor,proto3,oneof" json:"cursor,omitempty"`                                                                                                  //Идентификатор элемента, с которого начать формировать ответ.
	Limit              *int32                 `protobuf:"varint,12,opt,name=limit,proto3,oneof" json:"limit,omitempty"`                                                                                                   //Лимит количества операций. По умолчанию устанавливается значение **100**, максимальное значение 1000.
	OperationTypes     []OperationType        `protobuf:"varint,13,rep,packed,name=operation_types,json=operationTypes,proto3,enum=tinkoff.public.invest.api.contract.v1.OperationType" json:"operation_types,omitempty"` //Тип операции. Принимает значение из списка OperationType.
	State              *OperationState        `protobuf:"varint,14,opt,name=state,proto3,enum=tinkoff.public.invest.api.contract.v1.OperationState,oneof" json:"state,omitempty"`                                         //Статус запрашиваемых операций, возможные значения указаны в OperationState.
	WithoutCommissions *bool                  `protobuf:"varint,15,opt,name=without_commissions,json=withoutCommissions,proto3,oneof" json:"without_commissions,omitempty"`                                               //Флаг возвращать ли комиссии, по умолчанию false
	WithoutTrades      *bool                  `protobuf:"varint,16,opt,name=without_trades,json=withoutTrades,proto3,oneof" json:"without_trades,omitempty"`                                                              //Флаг получения ответа без массива сделок.
	WithoutOvernights  *bool                  `protobuf:"varint,17,opt,name=without_overnights,json=withoutOvernights,proto3,oneof" json:"without_overnights,omitempty"`                                                  //Флаг не показывать overnight операций.
}

func (x *GetOperationsByCursorRequest) Reset() {
	*x = GetOperationsByCursorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOperationsByCursorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperationsByCursorRequest) ProtoMessage() {}

func (x *GetOperationsByCursorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperationsByCursorRequest.ProtoReflect.Descriptor instead.
func (*GetOperationsByCursorRequest) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{33}
}

func (x *GetOperationsByCursorRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetOperationsByCursorRequest) GetInstrumentId() string {
	if x != nil && x.InstrumentId != nil {
		return *x.InstrumentId
	}
	return ""
}

func (x *GetOperationsByCursorRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *GetOperationsByCursorRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *GetOperationsByCursorRequest) GetCursor() string {
	if x != nil && x.Cursor != nil {
		return *x.Cursor
	}
	return ""
}

func (x *GetOperationsByCursorRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *GetOperationsByCursorRequest) GetOperationTypes() []OperationType {
	if x != nil {
		return x.OperationTypes
	}
	return nil
}

func (x *GetOperationsByCursorRequest) GetState() OperationState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return OperationState_OPERATION_STATE_UNSPECIFIED
}

func (x *GetOperationsByCursorRequest) GetWithoutCommissions() bool {
	if x != nil && x.WithoutCommissions != nil {
		return *x.WithoutCommissions
	}
	return false
}

func (x *GetOperationsByCursorRequest) GetWithoutTrades() bool {
	if x != nil && x.WithoutTrades != nil {
		return *x.WithoutTrades
	}
	return false
}

func (x *GetOperationsByCursorRequest) GetWithoutOvernights() bool {
	if x != nil && x.WithoutOvernights != nil {
		return *x.WithoutOvernights
	}
	return false
}

// Список операций по счёту с пагинацией.
type GetOperationsByCursorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasNext    bool             `protobuf:"varint,1,opt,name=has_next,json=hasNext,proto3" json:"has_next,omitempty"`         //Признак, есть ли следующий элемент.
	NextCursor string           `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor,proto3" json:"next_cursor,omitempty"` //Следующий курсор.
	Items      []*OperationItem `protobuf:"bytes,6,rep,name=items,proto3" json:"items,omitempty"`                             //Список операций.
}

func (x *GetOperationsByCursorResponse) Reset() {
	*x = GetOperationsByCursorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOperationsByCursorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperationsByCursorResponse) ProtoMessage() {}

func (x *GetOperationsByCursorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperationsByCursorResponse.ProtoReflect.Descriptor instead.
func (*GetOperationsByCursorResponse) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{34}
}

func (x *GetOperationsByCursorResponse) GetHasNext() bool {
	if x != nil {
		return x.HasNext
	}
	return false
}

func (x *GetOperationsByCursorResponse) GetNextCursor() string {
	if x != nil {
		return x.NextCursor
	}
	return ""
}

func (x *GetOperationsByCursorResponse) GetItems() []*OperationItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// Данные об операции.
type OperationItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cursor            string                 `protobuf:"bytes,1,opt,name=cursor,proto3" json:"cursor,omitempty"`                                                                                                   //Курсор.
	BrokerAccountId   string                 `protobuf:"bytes,6,opt,name=broker_account_id,json=brokerAccountId,proto3" json:"broker_account_id,omitempty"`                                                        //Номер счета клиента.
	Id                string                 `protobuf:"bytes,16,opt,name=id,proto3" json:"id,omitempty"`                                                                                                          //Идентификатор операции, может меняться с течением времени.
	ParentOperationId string                 `protobuf:"bytes,17,opt,name=parent_operation_id,json=parentOperationId,proto3" json:"parent_operation_id,omitempty"`                                                 //Идентификатор родительской операции, может измениться, если изменился id родительской операции.
	Name              string                 `protobuf:"bytes,18,opt,name=name,proto3" json:"name,omitempty"`                                                                                                      //Название операции.
	Date              *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=date,proto3" json:"date,omitempty"`                                                                                                      //Дата поручения.
	Type              OperationType          `protobuf:"varint,22,opt,name=type,proto3,enum=tinkoff.public.invest.api.contract.v1.OperationType" json:"type,omitempty"`                                            //Тип операции.
	Description       string                 `protobuf:"bytes,23,opt,name=description,proto3" json:"description,omitempty"`                                                                                        //Описание операции.
	State             OperationState         `protobuf:"varint,24,opt,name=state,proto3,enum=tinkoff.public.invest.api.contract.v1.OperationState" json:"state,omitempty"`                                         //Статус поручения.
	InstrumentUid     string                 `protobuf:"bytes,31,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                                                               //Уникальный идентификатор инструмента.
	Figi              string                 `protobuf:"bytes,32,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                      //Figi.
	InstrumentType    string                 `protobuf:"bytes,33,opt,name=instrument_type,json=instrumentType,proto3" json:"instrument_type,omitempty"`                                                            //Тип инструмента.
	InstrumentKind    InstrumentType         `protobuf:"varint,34,opt,name=instrument_kind,json=instrumentKind,proto3,enum=tinkoff.public.invest.api.contract.v1.InstrumentType" json:"instrument_kind,omitempty"` //Тип инструмента.
	PositionUid       string                 `protobuf:"bytes,35,opt,name=position_uid,json=positionUid,proto3" json:"position_uid,omitempty"`                                                                     //position_uid-идентификатора инструмента.
	Payment           *MoneyValue            `protobuf:"bytes,41,opt,name=payment,proto3" json:"payment,omitempty"`                                                                                                //Сумма операции.
	Price             *MoneyValue            `protobuf:"bytes,42,opt,name=price,proto3" json:"price,omitempty"`                                                                                                    //Цена операции за 1 инструмент.
	Commission        *MoneyValue            `protobuf:"bytes,43,opt,name=commission,proto3" json:"commission,omitempty"`                                                                                          //Комиссия.
	Yield             *MoneyValue            `protobuf:"bytes,44,opt,name=yield,proto3" json:"yield,omitempty"`                                                                                                    //Доходность.
	YieldRelative     *Quotation             `protobuf:"bytes,45,opt,name=yield_relative,json=yieldRelative,proto3" json:"yield_relative,omitempty"`                                                               //Относительная доходность.
	AccruedInt        *MoneyValue            `protobuf:"bytes,46,opt,name=accrued_int,json=accruedInt,proto3" json:"accrued_int,omitempty"`                                                                        //Накопленный купонный доход.
	Quantity          int64                  `protobuf:"varint,51,opt,name=quantity,proto3" json:"quantity,omitempty"`                                                                                             //Количество единиц инструмента.
	QuantityRest      int64                  `protobuf:"varint,52,opt,name=quantity_rest,json=quantityRest,proto3" json:"quantity_rest,omitempty"`                                                                 //Неисполненный остаток по сделке.
	QuantityDone      int64                  `protobuf:"varint,53,opt,name=quantity_done,json=quantityDone,proto3" json:"quantity_done,omitempty"`                                                                 //Исполненный остаток.
	CancelDateTime    *timestamppb.Timestamp `protobuf:"bytes,56,opt,name=cancel_date_time,json=cancelDateTime,proto3" json:"cancel_date_time,omitempty"`                                                          //Дата и время снятия заявки.
	CancelReason      string                 `protobuf:"bytes,57,opt,name=cancel_reason,json=cancelReason,proto3" json:"cancel_reason,omitempty"`                                                                  //Причина отмены операции.
	TradesInfo        *OperationItemTrades   `protobuf:"bytes,61,opt,name=trades_info,json=tradesInfo,proto3" json:"trades_info,omitempty"`                                                                        //Массив сделок.
	AssetUid          string                 `protobuf:"bytes,64,opt,name=asset_uid,json=assetUid,proto3" json:"asset_uid,omitempty"`                                                                              //Идентификатор актива
}

func (x *OperationItem) Reset() {
	*x = OperationItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationItem) ProtoMessage() {}

func (x *OperationItem) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationItem.ProtoReflect.Descriptor instead.
func (*OperationItem) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{35}
}

func (x *OperationItem) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *OperationItem) GetBrokerAccountId() string {
	if x != nil {
		return x.BrokerAccountId
	}
	return ""
}

func (x *OperationItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OperationItem) GetParentOperationId() string {
	if x != nil {
		return x.ParentOperationId
	}
	return ""
}

func (x *OperationItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OperationItem) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *OperationItem) GetType() OperationType {
	if x != nil {
		return x.Type
	}
	return OperationType_OPERATION_TYPE_UNSPECIFIED
}

func (x *OperationItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OperationItem) GetState() OperationState {
	if x != nil {
		return x.State
	}
	return OperationState_OPERATION_STATE_UNSPECIFIED
}

func (x *OperationItem) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

func (x *OperationItem) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *OperationItem) GetInstrumentType() string {
	if x != nil {
		return x.InstrumentType
	}
	return ""
}

func (x *OperationItem) GetInstrumentKind() InstrumentType {
	if x != nil {
		return x.InstrumentKind
	}
	return InstrumentType_INSTRUMENT_TYPE_UNSPECIFIED
}

func (x *OperationItem) GetPositionUid() string {
	if x != nil {
		return x.PositionUid
	}
	return ""
}

func (x *OperationItem) GetPayment() *MoneyValue {
	if x != nil {
		return x.Payment
	}
	return nil
}

func (x *OperationItem) GetPrice() *MoneyValue {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *OperationItem) GetCommission() *MoneyValue {
	if x != nil {
		return x.Commission
	}
	return nil
}

func (x *OperationItem) GetYield() *MoneyValue {
	if x != nil {
		return x.Yield
	}
	return nil
}

func (x *OperationItem) GetYieldRelative() *Quotation {
	if x != nil {
		return x.YieldRelative
	}
	return nil
}

func (x *OperationItem) GetAccruedInt() *MoneyValue {
	if x != nil {
		return x.AccruedInt
	}
	return nil
}

func (x *OperationItem) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *OperationItem) GetQuantityRest() int64 {
	if x != nil {
		return x.QuantityRest
	}
	return 0
}

func (x *OperationItem) GetQuantityDone() int64 {
	if x != nil {
		return x.QuantityDone
	}
	return 0
}

func (x *OperationItem) GetCancelDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CancelDateTime
	}
	return nil
}

func (x *OperationItem) GetCancelReason() string {
	if x != nil {
		return x.CancelReason
	}
	return ""
}

func (x *OperationItem) GetTradesInfo() *OperationItemTrades {
	if x != nil {
		return x.TradesInfo
	}
	return nil
}

func (x *OperationItem) GetAssetUid() string {
	if x != nil {
		return x.AssetUid
	}
	return ""
}

// Массив с информацией о сделках.
type OperationItemTrades struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trades []*OperationItemTrade `protobuf:"bytes,6,rep,name=trades,proto3" json:"trades,omitempty"`
}

func (x *OperationItemTrades) Reset() {
	*x = OperationItemTrades{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationItemTrades) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationItemTrades) ProtoMessage() {}

func (x *OperationItemTrades) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationItemTrades.ProtoReflect.Descriptor instead.
func (*OperationItemTrades) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{36}
}

func (x *OperationItemTrades) GetTrades() []*OperationItemTrade {
	if x != nil {
		return x.Trades
	}
	return nil
}

// Сделка по операции.
type OperationItemTrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num           string                 `protobuf:"bytes,1,opt,name=num,proto3" json:"num,omitempty"`                                           //Номер сделки
	Date          *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=date,proto3" json:"date,omitempty"`                                         //Дата сделки
	Quantity      int64                  `protobuf:"varint,11,opt,name=quantity,proto3" json:"quantity,omitempty"`                               //Количество в единицах.
	Price         *MoneyValue            `protobuf:"bytes,16,opt,name=price,proto3" json:"price,omitempty"`                                      //Цена.
	Yield         *MoneyValue            `protobuf:"bytes,21,opt,name=yield,proto3" json:"yield,omitempty"`                                      //Доходность.
	YieldRelative *Quotation             `protobuf:"bytes,22,opt,name=yield_relative,json=yieldRelative,proto3" json:"yield_relative,omitempty"` //Относительная доходность.
}

func (x *OperationItemTrade) Reset() {
	*x = OperationItemTrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationItemTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationItemTrade) ProtoMessage() {}

func (x *OperationItemTrade) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationItemTrade.ProtoReflect.Descriptor instead.
func (*OperationItemTrade) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{37}
}

func (x *OperationItemTrade) GetNum() string {
	if x != nil {
		return x.Num
	}
	return ""
}

func (x *OperationItemTrade) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *OperationItemTrade) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *OperationItemTrade) GetPrice() *MoneyValue {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *OperationItemTrade) GetYield() *MoneyValue {
	if x != nil {
		return x.Yield
	}
	return nil
}

func (x *OperationItemTrade) GetYieldRelative() *Quotation {
	if x != nil {
		return x.YieldRelative
	}
	return nil
}

// Запрос установки stream-соединения позиций.
type PositionsStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts []string `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"` //Массив идентификаторов счётов пользователя
}

func (x *PositionsStreamRequest) Reset() {
	*x = PositionsStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionsStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionsStreamRequest) ProtoMessage() {}

func (x *PositionsStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionsStreamRequest.ProtoReflect.Descriptor instead.
func (*PositionsStreamRequest) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{38}
}

func (x *PositionsStreamRequest) GetAccounts() []string {
	if x != nil {
		return x.Accounts
	}
	return nil
}

// Информация по изменению позиций портфеля.
type PositionsStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*PositionsStreamResponse_Subscriptions
	//	*PositionsStreamResponse_Position
	//	*PositionsStreamResponse_Ping
	Payload isPositionsStreamResponse_Payload `protobuf_oneof:"payload"`
}

func (x *PositionsStreamResponse) Reset() {
	*x = PositionsStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionsStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionsStreamResponse) ProtoMessage() {}

func (x *PositionsStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionsStreamResponse.ProtoReflect.Descriptor instead.
func (*PositionsStreamResponse) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{39}
}

func (m *PositionsStreamResponse) GetPayload() isPositionsStreamResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *PositionsStreamResponse) GetSubscriptions() *PositionsSubscriptionResult {
	if x, ok := x.GetPayload().(*PositionsStreamResponse_Subscriptions); ok {
		return x.Subscriptions
	}
	return nil
}

func (x *PositionsStreamResponse) GetPosition() *PositionData {
	if x, ok := x.GetPayload().(*PositionsStreamResponse_Position); ok {
		return x.Position
	}
	return nil
}

func (x *PositionsStreamResponse) GetPing() *Ping {
	if x, ok := x.GetPayload().(*PositionsStreamResponse_Ping); ok {
		return x.Ping
	}
	return nil
}

type isPositionsStreamResponse_Payload interface {
	isPositionsStreamResponse_Payload()
}

type PositionsStreamResponse_Subscriptions struct {
	Subscriptions *PositionsSubscriptionResult `protobuf:"bytes,1,opt,name=subscriptions,proto3,oneof"` //Объект результата подписки.
}

type PositionsStreamResponse_Position struct {
	Position *PositionData `protobuf:"bytes,2,opt,name=position,proto3,oneof"` //Объект стриминга позиций.
}

type PositionsStreamResponse_Ping struct {
	Ping *Ping `protobuf:"bytes,3,opt,name=ping,proto3,oneof"` //Проверка активности стрима.
}

func (*PositionsStreamResponse_Subscriptions) isPositionsStreamResponse_Payload() {}

func (*PositionsStreamResponse_Position) isPositionsStreamResponse_Payload() {}

func (*PositionsStreamResponse_Ping) isPositionsStreamResponse_Payload() {}

// Объект результата подписки.
type PositionsSubscriptionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts []*PositionsSubscriptionStatus `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"` //Массив счетов клиента.
}

func (x *PositionsSubscriptionResult) Reset() {
	*x = PositionsSubscriptionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionsSubscriptionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionsSubscriptionResult) ProtoMessage() {}

func (x *PositionsSubscriptionResult) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionsSubscriptionResult.ProtoReflect.Descriptor instead.
func (*PositionsSubscriptionResult) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{40}
}

func (x *PositionsSubscriptionResult) GetAccounts() []*PositionsSubscriptionStatus {
	if x != nil {
		return x.Accounts
	}
	return nil
}

// Счет клиента.
type PositionsSubscriptionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId          string                             `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                                                                                           //Идентификатор счёта
	SubscriptionStatus PositionsAccountSubscriptionStatus `protobuf:"varint,6,opt,name=subscription_status,json=subscriptionStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.PositionsAccountSubscriptionStatus" json:"subscription_status,omitempty"` //Результат подписки.
}

func (x *PositionsSubscriptionStatus) Reset() {
	*x = PositionsSubscriptionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionsSubscriptionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionsSubscriptionStatus) ProtoMessage() {}

func (x *PositionsSubscriptionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionsSubscriptionStatus.ProtoReflect.Descriptor instead.
func (*PositionsSubscriptionStatus) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{41}
}

func (x *PositionsSubscriptionStatus) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *PositionsSubscriptionStatus) GetSubscriptionStatus() PositionsAccountSubscriptionStatus {
	if x != nil {
		return x.SubscriptionStatus
	}
	return PositionsAccountSubscriptionStatus_POSITIONS_SUBSCRIPTION_STATUS_UNSPECIFIED
}

// Данные о позиции портфеля.
type PositionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId  string                 `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` //Идентификатор счёта.
	Money      []*PositionsMoney      `protobuf:"bytes,2,rep,name=money,proto3" json:"money,omitempty"`                          //Массив валютных позиций портфеля.
	Securities []*PositionsSecurities `protobuf:"bytes,3,rep,name=securities,proto3" json:"securities,omitempty"`                //Список ценно-бумажных позиций портфеля.
	Futures    []*PositionsFutures    `protobuf:"bytes,4,rep,name=futures,proto3" json:"futures,omitempty"`                      //Список фьючерсов портфеля.
	Options    []*PositionsOptions    `protobuf:"bytes,5,rep,name=options,proto3" json:"options,omitempty"`                      //Список опционов портфеля.
	Date       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=date,proto3" json:"date,omitempty"`                            //Дата и время операции в формате UTC.
}

func (x *PositionData) Reset() {
	*x = PositionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionData) ProtoMessage() {}

func (x *PositionData) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionData.ProtoReflect.Descriptor instead.
func (*PositionData) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{42}
}

func (x *PositionData) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *PositionData) GetMoney() []*PositionsMoney {
	if x != nil {
		return x.Money
	}
	return nil
}

func (x *PositionData) GetSecurities() []*PositionsSecurities {
	if x != nil {
		return x.Securities
	}
	return nil
}

func (x *PositionData) GetFutures() []*PositionsFutures {
	if x != nil {
		return x.Futures
	}
	return nil
}

func (x *PositionData) GetOptions() []*PositionsOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *PositionData) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

// Валютная позиция портфеля.
type PositionsMoney struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableValue *MoneyValue `protobuf:"bytes,1,opt,name=available_value,json=availableValue,proto3" json:"available_value,omitempty"` //Доступное количество валютный позиций.
	BlockedValue   *MoneyValue `protobuf:"bytes,2,opt,name=blocked_value,json=blockedValue,proto3" json:"blocked_value,omitempty"`       //Заблокированное количество валютный позиций.
}

func (x *PositionsMoney) Reset() {
	*x = PositionsMoney{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operations_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionsMoney) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionsMoney) ProtoMessage() {}

func (x *PositionsMoney) ProtoReflect() protoreflect.Message {
	mi := &file_operations_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionsMoney.ProtoReflect.Descriptor instead.
func (*PositionsMoney) Descriptor() ([]byte, []int) {
	return file_operations_proto_rawDescGZIP(), []int{43}
}

func (x *PositionsMoney) GetAvailableValue() *MoneyValue {
	if x != nil {
		return x.AvailableValue
	}
	return nil
}

func (x *PositionsMoney) GetBlockedValue() *MoneyValue {
	if x != nil {
		return x.BlockedValue
	}
	return nil
}

var File_operations_proto protoreflect.FileDescriptor

var file_operations_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x25, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xab, 0x02, 0x0a, 0x11, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x01, 0x52, 0x02, 0x74, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x02, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x66,
	0x69, 0x67, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x66, 0x69, 0x67,
	0x69, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x74, 0x6f, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x66, 0x69, 0x67, 0x69, 0x22, 0x66, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x9f, 0x06, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x4b, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x4b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x67,
	0x69, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5b,
	0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x55, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x69,
	0x64, 0x22, 0xc9, 0x01, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x37, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0xdb, 0x01,
	0x0a, 0x10, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x68, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01,
	0x22, 0x2c, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x55, 0x42, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x55, 0x53, 0x44, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x55, 0x52, 0x10, 0x02, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xeb, 0x08, 0x0a, 0x11,
	0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x61, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x5b, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x74, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x45,
	0x74, 0x66, 0x12, 0x69, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x63, 0x0a,
	0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x57, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x79,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x56, 0x0a, 0x09, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x63, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x70, 0x12, 0x67, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x12, 0x6c, 0x0a, 0x11, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x36, 0x0a, 0x10, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0xe8, 0x03, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79,
	0x12, 0x4b, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x5a, 0x0a,
	0x0a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x51, 0x0a, 0x07, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x52, 0x07, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3b, 0x0a, 0x15,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x8e, 0x02, 0x0a, 0x16, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x4b, 0x0a,
	0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x5e, 0x0a, 0x11, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x22, 0xb7, 0x09, 0x0a, 0x11, 0x50,
	0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x69, 0x67, 0x69, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x67, 0x0a, 0x16, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x52, 0x0a,
	0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6b, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6b,
	0x64, 0x12, 0x6f, 0x0a, 0x19, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x02, 0x18, 0x01, 0x52, 0x16, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x50, 0x74, 0x12, 0x56, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x70, 0x0a, 0x1b, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x18, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x46, 0x69, 0x66, 0x6f, 0x12, 0x59, 0x0a, 0x0d,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4c, 0x6f, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x12, 0x53, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x74,
	0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x4c, 0x6f, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x64,
	0x12, 0x50, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x76, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x12, 0x60, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x79,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x66, 0x69, 0x66, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x59, 0x69, 0x65, 0x6c, 0x64,
	0x46, 0x69, 0x66, 0x6f, 0x22, 0x9a, 0x06, 0x0a, 0x18, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x69, 0x67, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x12,
	0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x67, 0x0a, 0x16, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x57, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x79, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x60, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x66, 0x69, 0x66, 0x6f, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x69, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x70, 0x0a, 0x1b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x66, 0x6f, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x46, 0x69, 0x66,
	0x6f, 0x22, 0xfb, 0x01, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67,
	0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xa4, 0x01, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xa8, 0x02, 0x0a, 0x13, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x89, 0x01, 0x0a, 0x1e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x1b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7a, 0x0a,
	0x19, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x16, 0x67, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0xaf, 0x02, 0x0a, 0x14, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8c, 0x01,
	0x0a, 0x1f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1c,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x1a,
	0x67, 0x65, 0x74, 0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3e, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x17, 0x67, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xa7, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x2f, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x74, 0x6f,
	0x22, 0x37, 0x0a, 0x1c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x58, 0x0a, 0x0d, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0c, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xca, 0x0b,
	0x0a, 0x0c, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x41, 0x0a, 0x0e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4d,
	0x0a, 0x09, 0x61, 0x63, 0x69, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x61, 0x63, 0x69, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5f, 0x0a,
	0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5e,
	0x0a, 0x11, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x62,
	0x0a, 0x13, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x73, 0x0a, 0x1c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65,
	0x70, 0x6f, 0x52, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x10,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x65, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x3a, 0x0a, 0x19, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x67,
	0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x41, 0x67,
	0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x36, 0x0a,
	0x17, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe4, 0x02, 0x0a, 0x20, 0x47,
	0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0xa0, 0x01, 0x0a, 0x22, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x76,
	0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x69, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x1e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x69, 0x76, 0x46,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x91, 0x01, 0x0a, 0x1d, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x76, 0x5f, 0x66,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x46,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x19, 0x67, 0x65, 0x74,
	0x44, 0x69, 0x76, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x22, 0xf1, 0x02, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x64, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xb2, 0x01, 0x0a, 0x2b, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x76, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x69,
	0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x26, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x69,
	0x76, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8b, 0x01, 0x0a,
	0x19, 0x64, 0x69, 0x76, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4e, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x16, 0x64, 0x69, 0x76, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x2b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2f,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x74, 0x6f, 0x22,
	0x68, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x46,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x22, 0x47, 0x0a, 0x2c, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x6f,
	0x72, 0x65, 0x69, 0x67, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x22, 0x8a, 0x02, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a,
	0x01, 0x0a, 0x1f, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x66, 0x6f, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x1c, 0x64,
	0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22,
	0xdb, 0x05, 0x0a, 0x1c, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x6f, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a,
	0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x73, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x12, 0x61, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x0e, 0x64, 0x69, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x47, 0x72, 0x6f,
	0x73, 0x73, 0x12, 0x42, 0x0a, 0x03, 0x74, 0x61, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x03, 0x74, 0x61, 0x78, 0x12, 0x59, 0x0a, 0x0f, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x34, 0x0a,
	0x16, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x22, 0xad, 0x02, 0x0a, 0x17, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69,
	0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6a, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x58, 0x0a, 0x09, 0x70,
	0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74,
	0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x12, 0x41, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0x7b, 0x0a, 0x1b, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x5c, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x22, 0xaf, 0x01, 0x0a, 0x19, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x73, 0x0a,
	0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xd4, 0x05, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02,
	0x52, 0x02, 0x74, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x5d, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x50,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x48, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x34, 0x0a, 0x13, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52,
	0x12, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07,
	0x52, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08,
	0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x6e, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x1d, 0x47, 0x65,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x43, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x68,
	0x61, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68,
	0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78,
	0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0xa1, 0x0b, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x2a, 0x0a,
	0x11, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x67,
	0x69, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x4b, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x05, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x57, 0x0a, 0x0e, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x79, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x72,
	0x75, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x61, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x33, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x6f,
	0x6e, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x5b, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x55, 0x69, 0x64, 0x22, 0x68, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x51,
	0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x22, 0xdd, 0x02, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x47, 0x0a, 0x05, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x57, 0x0a, 0x0e, 0x79, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x22, 0x34, 0x0a, 0x16, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xa6, 0x02, 0x0a, 0x17, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00,
	0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x51, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x04, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0x7d, 0x0a, 0x1b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x5e, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22,
	0xb8, 0x01, 0x0a, 0x1b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x7a,
	0x0a, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xac, 0x03, 0x0a, 0x0c, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x05, 0x6d, 0x6f,
	0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x5a, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x07, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x07, 0x66,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x0e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x5a, 0x0a, 0x0f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x2a, 0x8b, 0x01, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a, 0xba,
	0x10, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4e,
	0x44, 0x5f, 0x54, 0x41, 0x58, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54,
	0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x03, 0x12, 0x1c, 0x0a,
	0x18, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4f, 0x56, 0x45, 0x52, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41,
	0x58, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x41, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45,
	0x4c, 0x4c, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x56, 0x49,
	0x44, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x41, 0x58, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x55, 0x54,
	0x50, 0x55, 0x54, 0x10, 0x09, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x50,
	0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x0a, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x58, 0x5f, 0x43,
	0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x45,
	0x4e, 0x45, 0x46, 0x49, 0x54, 0x5f, 0x54, 0x41, 0x58, 0x10, 0x0d, 0x12, 0x1d, 0x0a, 0x19, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41,
	0x52, 0x47, 0x49, 0x4e, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x59,
	0x10, 0x0f, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x59, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x10, 0x12,
	0x23, 0x0a, 0x1f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x49,
	0x45, 0x53, 0x10, 0x11, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x5f, 0x4d, 0x41, 0x52, 0x47,
	0x49, 0x4e, 0x10, 0x12, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x46, 0x45,
	0x45, 0x10, 0x13, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x59, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e,
	0x10, 0x14, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x4e, 0x44, 0x10, 0x15, 0x12,
	0x17, 0x0a, 0x13, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x16, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x50, 0x4f,
	0x4e, 0x10, 0x17, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x46, 0x45,
	0x45, 0x10, 0x18, 0x12, 0x24, 0x0a, 0x20, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x4e, 0x44, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x19, 0x12, 0x25, 0x0a, 0x21, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x52,
	0x55, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x41, 0x52, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x10, 0x1a,
	0x12, 0x28, 0x0a, 0x24, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x56,
	0x41, 0x52, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x10, 0x1b, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c,
	0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x42, 0x55, 0x59, 0x10, 0x1c, 0x12, 0x20, 0x0a, 0x1c, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45,
	0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x1d, 0x12, 0x1d, 0x0a,
	0x19, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x4d, 0x46, 0x45, 0x45, 0x10, 0x1e, 0x12, 0x1d, 0x0a, 0x19,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x43, 0x4b, 0x5f, 0x50, 0x46, 0x45, 0x45, 0x10, 0x1f, 0x12, 0x22, 0x0a, 0x1e, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41,
	0x58, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x20, 0x12,
	0x27, 0x0a, 0x23, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x41, 0x58, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x21, 0x12, 0x2b, 0x0a, 0x27, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x44,
	0x45, 0x4e, 0x44, 0x5f, 0x54, 0x41, 0x58, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x49, 0x56, 0x45, 0x10, 0x22, 0x12, 0x2a, 0x0a, 0x26, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x54, 0x5f,
	0x54, 0x41, 0x58, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10,
	0x23, 0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x58, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x24,
	0x12, 0x27, 0x0a, 0x23, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x41, 0x58, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x47,
	0x52, 0x45, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x25, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x58, 0x5f,
	0x52, 0x45, 0x50, 0x4f, 0x10, 0x26, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x58, 0x5f, 0x52, 0x45, 0x50,
	0x4f, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x27, 0x12, 0x22, 0x0a, 0x1e, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x58, 0x5f, 0x52,
	0x45, 0x50, 0x4f, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x10, 0x28, 0x12, 0x2c, 0x0a, 0x28,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x41, 0x58, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x4f,
	0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x29, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x58,
	0x5f, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x4f,
	0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x2a, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x56,
	0x5f, 0x45, 0x58, 0x54, 0x10, 0x2b, 0x12, 0x28, 0x0a, 0x24, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x58, 0x5f, 0x43, 0x4f, 0x52,
	0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x10, 0x2c,
	0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x2d, 0x12, 0x1a, 0x0a,
	0x16, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4f, 0x55, 0x54, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x2e, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x4d, 0x50, 0x5f, 0x44, 0x55, 0x54, 0x59, 0x10, 0x2f, 0x12, 0x1f, 0x0a, 0x1b,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x53, 0x57, 0x49, 0x46, 0x54, 0x10, 0x32, 0x12, 0x1e, 0x0a,
	0x1a, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x53, 0x57, 0x49, 0x46, 0x54, 0x10, 0x33, 0x12, 0x23, 0x0a,
	0x1f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x41, 0x43, 0x51, 0x55, 0x49, 0x52, 0x49, 0x4e, 0x47,
	0x10, 0x35, 0x12, 0x22, 0x0a, 0x1e, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x41, 0x43, 0x51, 0x55, 0x49,
	0x52, 0x49, 0x4e, 0x47, 0x10, 0x36, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f,
	0x50, 0x45, 0x4e, 0x41, 0x4c, 0x54, 0x59, 0x10, 0x37, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x38, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x5f, 0x49, 0x49, 0x53, 0x5f, 0x42, 0x53, 0x10, 0x39, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x5f, 0x42, 0x53, 0x5f, 0x42, 0x53, 0x10, 0x3a, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x5f,
	0x4d, 0x55, 0x4c, 0x54, 0x49, 0x10, 0x3b, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x50, 0x5f, 0x4d, 0x55,
	0x4c, 0x54, 0x49, 0x10, 0x3c, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x50, 0x4c, 0x41,
	0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x3d, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x5f,
	0x43, 0x4f, 0x4d, 0x10, 0x3e, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x43,
	0x4f, 0x4d, 0x45, 0x10, 0x3f, 0x12, 0x24, 0x0a, 0x20, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45,
	0x58, 0x50, 0x49, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x40, 0x2a, 0xde, 0x01, 0x0a, 0x1b,
	0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x29, 0x50,
	0x4f, 0x52, 0x54, 0x46, 0x4f, 0x4c, 0x49, 0x4f, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x4f,
	0x52, 0x54, 0x46, 0x4f, 0x4c, 0x49, 0x4f, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x33, 0x0a, 0x2f, 0x50, 0x4f, 0x52, 0x54, 0x46, 0x4f, 0x4c,
	0x49, 0x4f, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x30, 0x0a, 0x2c, 0x50, 0x4f,
	0x52, 0x54, 0x46, 0x4f, 0x4c, 0x49, 0x4f, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x2a, 0xe5, 0x01, 0x0a,
	0x22, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x29, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f,
	0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x33, 0x0a,
	0x2f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43,
	0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x02, 0x12, 0x30, 0x0a, 0x2c, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f,
	0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x03, 0x32, 0x98, 0x08, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x81, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c,
	0x69, 0x6f, 0x12, 0x37, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x66,
	0x6f, 0x6c, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x38, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12,
	0x3c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x3a, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xae, 0x01, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x47, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x48, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa2, 0x01, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x43, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x12, 0x43, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x43, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x79, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0xc3, 0x02, 0x0a, 0x17, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x0f,
	0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x3d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69,
	0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x92, 0x01, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x3d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x61, 0x0a, 0x1c, 0x72, 0x75, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x69, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x0c, 0x2e, 0x2f, 0x3b, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x61, 0x70, 0x69, 0xa2, 0x02, 0x05, 0x54, 0x49, 0x41, 0x50, 0x49, 0xaa, 0x02, 0x14,
	0x54, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x41, 0x70,
	0x69, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x11, 0x54, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x5c, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x5c, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_operations_proto_rawDescOnce sync.Once
	file_operations_proto_rawDescData = file_operations_proto_rawDesc
)

func file_operations_proto_rawDescGZIP() []byte {
	file_operations_proto_rawDescOnce.Do(func() {
		file_operations_proto_rawDescData = protoimpl.X.CompressGZIP(file_operations_proto_rawDescData)
	})
	return file_operations_proto_rawDescData
}

var file_operations_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_operations_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_operations_proto_goTypes = []interface{}{
	(OperationState)(0),                                  // 0: tinkoff.public.invest.api.contract.v1.OperationState
	(OperationType)(0),                                   // 1: tinkoff.public.invest.api.contract.v1.OperationType
	(PortfolioSubscriptionStatus)(0),                     // 2: tinkoff.public.invest.api.contract.v1.PortfolioSubscriptionStatus
	(PositionsAccountSubscriptionStatus)(0),              // 3: tinkoff.public.invest.api.contract.v1.PositionsAccountSubscriptionStatus
	(PortfolioRequest_CurrencyRequest)(0),                // 4: tinkoff.public.invest.api.contract.v1.PortfolioRequest.CurrencyRequest
	(*OperationsRequest)(nil),                            // 5: tinkoff.public.invest.api.contract.v1.OperationsRequest
	(*OperationsResponse)(nil),                           // 6: tinkoff.public.invest.api.contract.v1.OperationsResponse
	(*Operation)(nil),                                    // 7: tinkoff.public.invest.api.contract.v1.Operation
	(*OperationTrade)(nil),                               // 8: tinkoff.public.invest.api.contract.v1.OperationTrade
	(*PortfolioRequest)(nil),                             // 9: tinkoff.public.invest.api.contract.v1.PortfolioRequest
	(*PortfolioResponse)(nil),                            // 10: tinkoff.public.invest.api.contract.v1.PortfolioResponse
	(*PositionsRequest)(nil),                             // 11: tinkoff.public.invest.api.contract.v1.PositionsRequest
	(*PositionsResponse)(nil),                            // 12: tinkoff.public.invest.api.contract.v1.PositionsResponse
	(*WithdrawLimitsRequest)(nil),                        // 13: tinkoff.public.invest.api.contract.v1.WithdrawLimitsRequest
	(*WithdrawLimitsResponse)(nil),                       // 14: tinkoff.public.invest.api.contract.v1.WithdrawLimitsResponse
	(*PortfolioPosition)(nil),                            // 15: tinkoff.public.invest.api.contract.v1.PortfolioPosition
	(*VirtualPortfolioPosition)(nil),                     // 16: tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition
	(*PositionsSecurities)(nil),                          // 17: tinkoff.public.invest.api.contract.v1.PositionsSecurities
	(*PositionsFutures)(nil),                             // 18: tinkoff.public.invest.api.contract.v1.PositionsFutures
	(*PositionsOptions)(nil),                             // 19: tinkoff.public.invest.api.contract.v1.PositionsOptions
	(*BrokerReportRequest)(nil),                          // 20: tinkoff.public.invest.api.contract.v1.BrokerReportRequest
	(*BrokerReportResponse)(nil),                         // 21: tinkoff.public.invest.api.contract.v1.BrokerReportResponse
	(*GenerateBrokerReportRequest)(nil),                  // 22: tinkoff.public.invest.api.contract.v1.GenerateBrokerReportRequest
	(*GenerateBrokerReportResponse)(nil),                 // 23: tinkoff.public.invest.api.contract.v1.GenerateBrokerReportResponse
	(*GetBrokerReportRequest)(nil),                       // 24: tinkoff.public.invest.api.contract.v1.GetBrokerReportRequest
	(*GetBrokerReportResponse)(nil),                      // 25: tinkoff.public.invest.api.contract.v1.GetBrokerReportResponse
	(*BrokerReport)(nil),                                 // 26: tinkoff.public.invest.api.contract.v1.BrokerReport
	(*GetDividendsForeignIssuerRequest)(nil),             // 27: tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerRequest
	(*GetDividendsForeignIssuerResponse)(nil),            // 28: tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerResponse
	(*GenerateDividendsForeignIssuerReportRequest)(nil),  // 29: tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest
	(*GetDividendsForeignIssuerReportRequest)(nil),       // 30: tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest
	(*GenerateDividendsForeignIssuerReportResponse)(nil), // 31: tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse
	(*GetDividendsForeignIssuerReportResponse)(nil),      // 32: tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse
	(*DividendsForeignIssuerReport)(nil),                 // 33: tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport
	(*PortfolioStreamRequest)(nil),                       // 34: tinkoff.public.invest.api.contract.v1.PortfolioStreamRequest
	(*PortfolioStreamResponse)(nil),                      // 35: tinkoff.public.invest.api.contract.v1.PortfolioStreamResponse
	(*PortfolioSubscriptionResult)(nil),                  // 36: tinkoff.public.invest.api.contract.v1.PortfolioSubscriptionResult
	(*AccountSubscriptionStatus)(nil),                    // 37: tinkoff.public.invest.api.contract.v1.AccountSubscriptionStatus
	(*GetOperationsByCursorRequest)(nil),                 // 38: tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest
	(*GetOperationsByCursorResponse)(nil),                // 39: tinkoff.public.invest.api.contract.v1.GetOperationsByCursorResponse
	(*OperationItem)(nil),                                // 40: tinkoff.public.invest.api.contract.v1.OperationItem
	(*OperationItemTrades)(nil),                          // 41: tinkoff.public.invest.api.contract.v1.OperationItemTrades
	(*OperationItemTrade)(nil),                           // 42: tinkoff.public.invest.api.contract.v1.OperationItemTrade
	(*PositionsStreamRequest)(nil),                       // 43: tinkoff.public.invest.api.contract.v1.PositionsStreamRequest
	(*PositionsStreamResponse)(nil),                      // 44: tinkoff.public.invest.api.contract.v1.PositionsStreamResponse
	(*PositionsSubscriptionResult)(nil),                  // 45: tinkoff.public.invest.api.contract.v1.PositionsSubscriptionResult
	(*PositionsSubscriptionStatus)(nil),                  // 46: tinkoff.public.invest.api.contract.v1.PositionsSubscriptionStatus
	(*PositionData)(nil),                                 // 47: tinkoff.public.invest.api.contract.v1.PositionData
	(*PositionsMoney)(nil),                               // 48: tinkoff.public.invest.api.contract.v1.PositionsMoney
	(*timestamppb.Timestamp)(nil),                        // 49: google.protobuf.Timestamp
	(*MoneyValue)(nil),                                   // 50: tinkoff.public.invest.api.contract.v1.MoneyValue
	(*Quotation)(nil),                                    // 51: tinkoff.public.invest.api.contract.v1.Quotation
	(*Ping)(nil),                                         // 52: tinkoff.public.invest.api.contract.v1.Ping
	(InstrumentType)(0),                                  // 53: tinkoff.public.invest.api.contract.v1.InstrumentType
}
var file_operations_proto_depIdxs = []int32{
	49,  // 0: tinkoff.public.invest.api.contract.v1.OperationsRequest.from:type_name -> google.protobuf.Timestamp
	49,  // 1: tinkoff.public.invest.api.contract.v1.OperationsRequest.to:type_name -> google.protobuf.Timestamp
	0,   // 2: tinkoff.public.invest.api.contract.v1.OperationsRequest.state:type_name -> tinkoff.public.invest.api.contract.v1.OperationState
	7,   // 3: tinkoff.public.invest.api.contract.v1.OperationsResponse.operations:type_name -> tinkoff.public.invest.api.contract.v1.Operation
	50,  // 4: tinkoff.public.invest.api.contract.v1.Operation.payment:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	50,  // 5: tinkoff.public.invest.api.contract.v1.Operation.price:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	0,   // 6: tinkoff.public.invest.api.contract.v1.Operation.state:type_name -> tinkoff.public.invest.api.contract.v1.OperationState
	49,  // 7: tinkoff.public.invest.api.contract.v1.Operation.date:type_name -> google.protobuf.Timestamp
	1,   // 8: tinkoff.public.invest.api.contract.v1.Operation.operation_type:type_name -> tinkoff.public.invest.api.contract.v1.OperationType
	8,   // 9: tinkoff.public.invest.api.contract.v1.Operation.trades:type_name -> tinkoff.public.invest.api.contract.v1.OperationTrade
	49,  // 10: tinkoff.public.invest.api.contract.v1.OperationTrade.date_time:type_name -> google.protobuf.Timestamp
	50,  // 11: tinkoff.public.invest.api.contract.v1.OperationTrade.price:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	4,   // 12: tinkoff.public.invest.api.contract.v1.PortfolioRequest.currency:type_name -> tinkoff.public.invest.api.contract.v1.PortfolioRequest.CurrencyRequest
	50,  // 13: tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_shares:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	50,  // 14: tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_bonds:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	50,  // 15: tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_etf:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	50,  // 16: tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_currencies:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	50,  // 17: tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_futures:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	51,  // 18: tinkoff.public.invest.api.contract.v1.PortfolioResponse.expected_yield:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	15,  // 19: tinkoff.public.invest.api.contract.v1.PortfolioResponse.positions:type_name -> tinkoff.public.invest.api.contract.v1.PortfolioPosition
	50,  // 20: tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_options:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	50,  // 21: tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_sp:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	50,  // 22: tinkoff.public.invest.api.contract.v1.PortfolioResponse.total_amount_portfolio:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	16,  // 23: tinkoff.public.invest.api.contract.v1.PortfolioResponse.virtual_positions:type_name -> tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition
	50,  // 24: tinkoff.public.invest.api.contract.v1.PositionsResponse.money:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	50,  // 25: tinkoff.public.invest.api.contract.v1.PositionsResponse.blocked:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	17,  // 26: tinkoff.public.invest.api.contract.v1.PositionsResponse.securities:type_name -> tinkoff.public.invest.api.contract.v1.PositionsSecurities
	18,  // 27: tinkoff.public.invest.api.contract.v1.PositionsResponse.futures:type_name -> tinkoff.public.invest.api.contract.v1.PositionsFutures
	19,  // 28: tinkoff.public.invest.api.contract.v1.PositionsResponse.options:type_name -> tinkoff.public.invest.api.contract.v1.PositionsOptions
	50,  // 29: tinkoff.public.invest.api.contract.v1.WithdrawLimitsResponse.money:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	50,  // 30: tinkoff.public.invest.api.contract.v1.WithdrawLimitsResponse.blocked:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	50,  // 31: tinkoff.public.invest.api.contract.v1.WithdrawLimitsResponse.blocked_guarantee:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	51,  // 32: tinkoff.public.invest.api.contract.v1.PortfolioPosition.quantity:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	50,  // 33: tinkoff.public.invest.api.contract.v1.PortfolioPosition.average_position_price:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	51,  // 34: tinkoff.public.invest.api.contract.v1.PortfolioPosition.expected_yield:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	50,  // 35: tinkoff.public.invest.api.contract.v1.PortfolioPosition.current_nkd:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	51,  // 36: tinkoff.public.invest.api.contract.v1.PortfolioPosition.average_position_price_pt:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	50,  // 37: tinkoff.public.invest.api.contract.v1.PortfolioPosition.current_price:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	50,  // 38: tinkoff.public.invest.api.contract.v1.PortfolioPosition.average_position_price_fifo:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	51,  // 39: tinkoff.public.invest.api.contract.v1.PortfolioPosition.quantity_lots:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	51,  // 40: tinkoff.public.invest.api.contract.v1.PortfolioPosition.blocked_lots:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	50,  // 41: tinkoff.public.invest.api.contract.v1.PortfolioPosition.var_margin:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	51,  // 42: tinkoff.public.invest.api.contract.v1.PortfolioPosition.expected_yield_fifo:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	51,  // 43: tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.quantity:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	50,  // 44: tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.average_position_price:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	51,  // 45: tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.expected_yield:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	51,  // 46: tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.expected_yield_fifo:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	49,  // 47: tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.expire_date:type_name -> google.protobuf.Timestamp
	50,  // 48: tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.current_price:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	50,  // 49: tinkoff.public.invest.api.contract.v1.VirtualPortfolioPosition.average_position_price_fifo:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	22,  // 50: tinkoff.public.invest.api.contract.v1.BrokerReportRequest.generate_broker_report_request:type_name -> tinkoff.public.invest.api.contract.v1.GenerateBrokerReportRequest
	24,  // 51: tinkoff.public.invest.api.contract.v1.BrokerReportRequest.get_broker_report_request:type_name -> tinkoff.public.invest.api.contract.v1.GetBrokerReportRequest
	23,  // 52: tinkoff.public.invest.api.contract.v1.BrokerReportResponse.generate_broker_report_response:type_name -> tinkoff.public.invest.api.contract.v1.GenerateBrokerReportResponse
	25,  // 53: tinkoff.public.invest.api.contract.v1.BrokerReportResponse.get_broker_report_response:type_name -> tinkoff.public.invest.api.contract.v1.GetBrokerReportResponse
	49,  // 54: tinkoff.public.invest.api.contract.v1.GenerateBrokerReportRequest.from:type_name -> google.protobuf.Timestamp
	49,  // 55: tinkoff.public.invest.api.contract.v1.GenerateBrokerReportRequest.to:type_name -> google.protobuf.Timestamp
	26,  // 56: tinkoff.public.invest.api.contract.v1.GetBrokerReportResponse.broker_report:type_name -> tinkoff.public.invest.api.contract.v1.BrokerReport
	49,  // 57: tinkoff.public.invest.api.contract.v1.BrokerReport.trade_datetime:type_name -> google.protobuf.Timestamp
	50,  // 58: tinkoff.public.invest.api.contract.v1.BrokerReport.price:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	50,  // 59: tinkoff.public.invest.api.contract.v1.BrokerReport.order_amount:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	51,  // 60: tinkoff.public.invest.api.contract.v1.BrokerReport.aci_value:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	50,  // 61: tinkoff.public.invest.api.contract.v1.BrokerReport.total_order_amount:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	50,  // 62: tinkoff.public.invest.api.contract.v1.BrokerReport.broker_commission:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	50,  // 63: tinkoff.public.invest.api.contract.v1.BrokerReport.exchange_commission:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	50,  // 64: tinkoff.public.invest.api.contract.v1.BrokerReport.exchange_clearing_commission:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	51,  // 65: tinkoff.public.invest.api.contract.v1.BrokerReport.repo_rate:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	49,  // 66: tinkoff.public.invest.api.contract.v1.BrokerReport.clear_value_date:type_name -> google.protobuf.Timestamp
	49,  // 67: tinkoff.public.invest.api.contract.v1.BrokerReport.sec_value_date:type_name -> google.protobuf.Timestamp
	29,  // 68: tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerRequest.generate_div_foreign_issuer_report:type_name -> tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest
	30,  // 69: tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerRequest.get_div_foreign_issuer_report:type_name -> tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportRequest
	31,  // 70: tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerResponse.generate_div_foreign_issuer_report_response:type_name -> tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportResponse
	32,  // 71: tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerResponse.div_foreign_issuer_report:type_name -> tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse
	49,  // 72: tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.from:type_name -> google.protobuf.Timestamp
	49,  // 73: tinkoff.public.invest.api.contract.v1.GenerateDividendsForeignIssuerReportRequest.to:type_name -> google.protobuf.Timestamp
	33,  // 74: tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerReportResponse.dividends_foreign_issuer_report:type_name -> tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport
	49,  // 75: tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.record_date:type_name -> google.protobuf.Timestamp
	49,  // 76: tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.payment_date:type_name -> google.protobuf.Timestamp
	51,  // 77: tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.dividend:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	51,  // 78: tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.external_commission:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	51,  // 79: tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.dividend_gross:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	51,  // 80: tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.tax:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	51,  // 81: tinkoff.public.invest.api.contract.v1.DividendsForeignIssuerReport.dividend_amount:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	36,  // 82: tinkoff.public.invest.api.contract.v1.PortfolioStreamResponse.subscriptions:type_name -> tinkoff.public.invest.api.contract.v1.PortfolioSubscriptionResult
	10,  // 83: tinkoff.public.invest.api.contract.v1.PortfolioStreamResponse.portfolio:type_name -> tinkoff.public.invest.api.contract.v1.PortfolioResponse
	52,  // 84: tinkoff.public.invest.api.contract.v1.PortfolioStreamResponse.ping:type_name -> tinkoff.public.invest.api.contract.v1.Ping
	37,  // 85: tinkoff.public.invest.api.contract.v1.PortfolioSubscriptionResult.accounts:type_name -> tinkoff.public.invest.api.contract.v1.AccountSubscriptionStatus
	2,   // 86: tinkoff.public.invest.api.contract.v1.AccountSubscriptionStatus.subscription_status:type_name -> tinkoff.public.invest.api.contract.v1.PortfolioSubscriptionStatus
	49,  // 87: tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.from:type_name -> google.protobuf.Timestamp
	49,  // 88: tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.to:type_name -> google.protobuf.Timestamp
	1,   // 89: tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.operation_types:type_name -> tinkoff.public.invest.api.contract.v1.OperationType
	0,   // 90: tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest.state:type_name -> tinkoff.public.invest.api.contract.v1.OperationState
	40,  // 91: tinkoff.public.invest.api.contract.v1.GetOperationsByCursorResponse.items:type_name -> tinkoff.public.invest.api.contract.v1.OperationItem
	49,  // 92: tinkoff.public.invest.api.contract.v1.OperationItem.date:type_name -> google.protobuf.Timestamp
	1,   // 93: tinkoff.public.invest.api.contract.v1.OperationItem.type:type_name -> tinkoff.public.invest.api.contract.v1.OperationType
	0,   // 94: tinkoff.public.invest.api.contract.v1.OperationItem.state:type_name -> tinkoff.public.invest.api.contract.v1.OperationState
	53,  // 95: tinkoff.public.invest.api.contract.v1.OperationItem.instrument_kind:type_name -> tinkoff.public.invest.api.contract.v1.InstrumentType
	50,  // 96: tinkoff.public.invest.api.contract.v1.OperationItem.payment:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	50,  // 97: tinkoff.public.invest.api.contract.v1.OperationItem.price:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	50,  // 98: tinkoff.public.invest.api.contract.v1.OperationItem.commission:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	50,  // 99: tinkoff.public.invest.api.contract.v1.OperationItem.yield:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	51,  // 100: tinkoff.public.invest.api.contract.v1.OperationItem.yield_relative:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	50,  // 101: tinkoff.public.invest.api.contract.v1.OperationItem.accrued_int:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	49,  // 102: tinkoff.public.invest.api.contract.v1.OperationItem.cancel_date_time:type_name -> google.protobuf.Timestamp
	41,  // 103: tinkoff.public.invest.api.contract.v1.OperationItem.trades_info:type_name -> tinkoff.public.invest.api.contract.v1.OperationItemTrades
	42,  // 104: tinkoff.public.invest.api.contract.v1.OperationItemTrades.trades:type_name -> tinkoff.public.invest.api.contract.v1.OperationItemTrade
	49,  // 105: tinkoff.public.invest.api.contract.v1.OperationItemTrade.date:type_name -> google.protobuf.Timestamp
	50,  // 106: tinkoff.public.invest.api.contract.v1.OperationItemTrade.price:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	50,  // 107: tinkoff.public.invest.api.contract.v1.OperationItemTrade.yield:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	51,  // 108: tinkoff.public.invest.api.contract.v1.OperationItemTrade.yield_relative:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	45,  // 109: tinkoff.public.invest.api.contract.v1.PositionsStreamResponse.subscriptions:type_name -> tinkoff.public.invest.api.contract.v1.PositionsSubscriptionResult
	47,  // 110: tinkoff.public.invest.api.contract.v1.PositionsStreamResponse.position:type_name -> tinkoff.public.invest.api.contract.v1.PositionData
	52,  // 111: tinkoff.public.invest.api.contract.v1.PositionsStreamResponse.ping:type_name -> tinkoff.public.invest.api.contract.v1.Ping
	46,  // 112: tinkoff.public.invest.api.contract.v1.PositionsSubscriptionResult.accounts:type_name -> tinkoff.public.invest.api.contract.v1.PositionsSubscriptionStatus
	3,   // 113: tinkoff.public.invest.api.contract.v1.PositionsSubscriptionStatus.subscription_status:type_name -> tinkoff.public.invest.api.contract.v1.PositionsAccountSubscriptionStatus
	48,  // 114: tinkoff.public.invest.api.contract.v1.PositionData.money:type_name -> tinkoff.public.invest.api.contract.v1.PositionsMoney
	17,  // 115: tinkoff.public.invest.api.contract.v1.PositionData.securities:type_name -> tinkoff.public.invest.api.contract.v1.PositionsSecurities
	18,  // 116: tinkoff.public.invest.api.contract.v1.PositionData.futures:type_name -> tinkoff.public.invest.api.contract.v1.PositionsFutures
	19,  // 117: tinkoff.public.invest.api.contract.v1.PositionData.options:type_name -> tinkoff.public.invest.api.contract.v1.PositionsOptions
	49,  // 118: tinkoff.public.invest.api.contract.v1.PositionData.date:type_name -> google.protobuf.Timestamp
	50,  // 119: tinkoff.public.invest.api.contract.v1.PositionsMoney.available_value:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	50,  // 120: tinkoff.public.invest.api.contract.v1.PositionsMoney.blocked_value:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	5,   // 121: tinkoff.public.invest.api.contract.v1.OperationsService.GetOperations:input_type -> tinkoff.public.invest.api.contract.v1.OperationsRequest
	9,   // 122: tinkoff.public.invest.api.contract.v1.OperationsService.GetPortfolio:input_type -> tinkoff.public.invest.api.contract.v1.PortfolioRequest
	11,  // 123: tinkoff.public.invest.api.contract.v1.OperationsService.GetPositions:input_type -> tinkoff.public.invest.api.contract.v1.PositionsRequest
	13,  // 124: tinkoff.public.invest.api.contract.v1.OperationsService.GetWithdrawLimits:input_type -> tinkoff.public.invest.api.contract.v1.WithdrawLimitsRequest
	20,  // 125: tinkoff.public.invest.api.contract.v1.OperationsService.GetBrokerReport:input_type -> tinkoff.public.invest.api.contract.v1.BrokerReportRequest
	27,  // 126: tinkoff.public.invest.api.contract.v1.OperationsService.GetDividendsForeignIssuer:input_type -> tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerRequest
	38,  // 127: tinkoff.public.invest.api.contract.v1.OperationsService.GetOperationsByCursor:input_type -> tinkoff.public.invest.api.contract.v1.GetOperationsByCursorRequest
	34,  // 128: tinkoff.public.invest.api.contract.v1.OperationsStreamService.PortfolioStream:input_type -> tinkoff.public.invest.api.contract.v1.PortfolioStreamRequest
	43,  // 129: tinkoff.public.invest.api.contract.v1.OperationsStreamService.PositionsStream:input_type -> tinkoff.public.invest.api.contract.v1.PositionsStreamRequest
	6,   // 130: tinkoff.public.invest.api.contract.v1.OperationsService.GetOperations:output_type -> tinkoff.public.invest.api.contract.v1.OperationsResponse
	10,  // 131: tinkoff.public.invest.api.contract.v1.OperationsService.GetPortfolio:output_type -> tinkoff.public.invest.api.contract.v1.PortfolioResponse
	12,  // 132: tinkoff.public.invest.api.contract.v1.OperationsService.GetPositions:output_type -> tinkoff.public.invest.api.contract.v1.PositionsResponse
	14,  // 133: tinkoff.public.invest.api.contract.v1.OperationsService.GetWithdrawLimits:output_type -> tinkoff.public.invest.api.contract.v1.WithdrawLimitsResponse
	21,  // 134: tinkoff.public.invest.api.contract.v1.OperationsService.GetBrokerReport:output_type -> tinkoff.public.invest.api.contract.v1.BrokerReportResponse
	28,  // 135: tinkoff.public.invest.api.contract.v1.OperationsService.GetDividendsForeignIssuer:output_type -> tinkoff.public.invest.api.contract.v1.GetDividendsForeignIssuerResponse
	39,  // 136: tinkoff.public.invest.api.contract.v1.OperationsService.GetOperationsByCursor:output_type -> tinkoff.public.invest.api.contract.v1.GetOperationsByCursorResponse
	35,  // 137: tinkoff.public.invest.api.contract.v1.OperationsStreamService.PortfolioStream:output_type -> tinkoff.public.invest.api.contract.v1.PortfolioStreamResponse
	44,  // 138: tinkoff.public.invest.api.contract.v1.OperationsStreamService.PositionsStream:output_type -> tinkoff.public.invest.api.contract.v1.PositionsStreamResponse
	130, // [130:139] is the sub-list for method output_type
	121, // [121:130] is the sub-list for method input_type
	121, // [121:121] is the sub-list for extension type_name
	121, // [121:121] is the sub-list for extension extendee
	0,   // [0:121] is the sub-list for field type_name
}

func init() { file_operations_proto_init() }
func file_operations_proto_init() {
	if File_operations_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_operations_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationTrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortfolioRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortfolioResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawLimitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawLimitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortfolioPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualPortfolioPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionsSecurities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionsFutures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrokerReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrokerReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateBrokerReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateBrokerReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBrokerReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBrokerReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrokerReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDividendsForeignIssuerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDividendsForeignIssuerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateDividendsForeignIssuerReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDividendsForeignIssuerReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateDividendsForeignIssuerReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDividendsForeignIssuerReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DividendsForeignIssuerReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortfolioStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortfolioStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortfolioSubscriptionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountSubscriptionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOperationsByCursorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOperationsByCursorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationItemTrades); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationItemTrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionsStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionsStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionsSubscriptionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionsSubscriptionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operations_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionsMoney); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_operations_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_operations_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_operations_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*BrokerReportRequest_GenerateBrokerReportRequest)(nil),
		(*BrokerReportRequest_GetBrokerReportRequest)(nil),
	}
	file_operations_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*BrokerReportResponse_GenerateBrokerReportResponse)(nil),
		(*BrokerReportResponse_GetBrokerReportResponse)(nil),
	}
	file_operations_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_operations_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*GetDividendsForeignIssuerRequest_GenerateDivForeignIssuerReport)(nil),
		(*GetDividendsForeignIssuerRequest_GetDivForeignIssuerReport)(nil),
	}
	file_operations_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*GetDividendsForeignIssuerResponse_GenerateDivForeignIssuerReportResponse)(nil),
		(*GetDividendsForeignIssuerResponse_DivForeignIssuerReport)(nil),
	}
	file_operations_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_operations_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*PortfolioStreamResponse_Subscriptions)(nil),
		(*PortfolioStreamResponse_Portfolio)(nil),
		(*PortfolioStreamResponse_Ping)(nil),
	}
	file_operations_proto_msgTypes[33].OneofWrappers = []interface{}{}
	file_operations_proto_msgTypes[39].OneofWrappers = []interface{}{
		(*PositionsStreamResponse_Subscriptions)(nil),
		(*PositionsStreamResponse_Position)(nil),
		(*PositionsStreamResponse_Ping)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_operations_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_operations_proto_goTypes,
		DependencyIndexes: file_operations_proto_depIdxs,
		EnumInfos:         file_operations_proto_enumTypes,
		MessageInfos:      file_operations_proto_msgTypes,
	}.Build()
	File_operations_proto = out.File
	file_operations_proto_rawDesc = nil
	file_operations_proto_goTypes = nil
	file_operations_proto_depIdxs = nil
}
