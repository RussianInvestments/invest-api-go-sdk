// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.26.1
// source: orders.proto

package investapi

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Направление операции.
type OrderDirection int32

const (
	OrderDirection_ORDER_DIRECTION_UNSPECIFIED OrderDirection = 0 //Значение не указано
	OrderDirection_ORDER_DIRECTION_BUY         OrderDirection = 1 //Покупка
	OrderDirection_ORDER_DIRECTION_SELL        OrderDirection = 2 //Продажа
)

// Enum value maps for OrderDirection.
var (
	OrderDirection_name = map[int32]string{
		0: "ORDER_DIRECTION_UNSPECIFIED",
		1: "ORDER_DIRECTION_BUY",
		2: "ORDER_DIRECTION_SELL",
	}
	OrderDirection_value = map[string]int32{
		"ORDER_DIRECTION_UNSPECIFIED": 0,
		"ORDER_DIRECTION_BUY":         1,
		"ORDER_DIRECTION_SELL":        2,
	}
)

func (x OrderDirection) Enum() *OrderDirection {
	p := new(OrderDirection)
	*p = x
	return p
}

func (x OrderDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_orders_proto_enumTypes[0].Descriptor()
}

func (OrderDirection) Type() protoreflect.EnumType {
	return &file_orders_proto_enumTypes[0]
}

func (x OrderDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderDirection.Descriptor instead.
func (OrderDirection) EnumDescriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{0}
}

// Тип заявки.
type OrderType int32

const (
	OrderType_ORDER_TYPE_UNSPECIFIED OrderType = 0 //Значение не указано
	OrderType_ORDER_TYPE_LIMIT       OrderType = 1 //Лимитная
	OrderType_ORDER_TYPE_MARKET      OrderType = 2 //Рыночная
	OrderType_ORDER_TYPE_BESTPRICE   OrderType = 3 //Лучшая цена
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "ORDER_TYPE_UNSPECIFIED",
		1: "ORDER_TYPE_LIMIT",
		2: "ORDER_TYPE_MARKET",
		3: "ORDER_TYPE_BESTPRICE",
	}
	OrderType_value = map[string]int32{
		"ORDER_TYPE_UNSPECIFIED": 0,
		"ORDER_TYPE_LIMIT":       1,
		"ORDER_TYPE_MARKET":      2,
		"ORDER_TYPE_BESTPRICE":   3,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_orders_proto_enumTypes[1].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_orders_proto_enumTypes[1]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{1}
}

// Текущий статус заявки (поручения)
type OrderExecutionReportStatus int32

const (
	OrderExecutionReportStatus_EXECUTION_REPORT_STATUS_UNSPECIFIED   OrderExecutionReportStatus = 0
	OrderExecutionReportStatus_EXECUTION_REPORT_STATUS_FILL          OrderExecutionReportStatus = 1 //Исполнена
	OrderExecutionReportStatus_EXECUTION_REPORT_STATUS_REJECTED      OrderExecutionReportStatus = 2 //Отклонена
	OrderExecutionReportStatus_EXECUTION_REPORT_STATUS_CANCELLED     OrderExecutionReportStatus = 3 //Отменена пользователем
	OrderExecutionReportStatus_EXECUTION_REPORT_STATUS_NEW           OrderExecutionReportStatus = 4 //Новая
	OrderExecutionReportStatus_EXECUTION_REPORT_STATUS_PARTIALLYFILL OrderExecutionReportStatus = 5 //Частично исполнена
)

// Enum value maps for OrderExecutionReportStatus.
var (
	OrderExecutionReportStatus_name = map[int32]string{
		0: "EXECUTION_REPORT_STATUS_UNSPECIFIED",
		1: "EXECUTION_REPORT_STATUS_FILL",
		2: "EXECUTION_REPORT_STATUS_REJECTED",
		3: "EXECUTION_REPORT_STATUS_CANCELLED",
		4: "EXECUTION_REPORT_STATUS_NEW",
		5: "EXECUTION_REPORT_STATUS_PARTIALLYFILL",
	}
	OrderExecutionReportStatus_value = map[string]int32{
		"EXECUTION_REPORT_STATUS_UNSPECIFIED":   0,
		"EXECUTION_REPORT_STATUS_FILL":          1,
		"EXECUTION_REPORT_STATUS_REJECTED":      2,
		"EXECUTION_REPORT_STATUS_CANCELLED":     3,
		"EXECUTION_REPORT_STATUS_NEW":           4,
		"EXECUTION_REPORT_STATUS_PARTIALLYFILL": 5,
	}
)

func (x OrderExecutionReportStatus) Enum() *OrderExecutionReportStatus {
	p := new(OrderExecutionReportStatus)
	*p = x
	return p
}

func (x OrderExecutionReportStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderExecutionReportStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_orders_proto_enumTypes[2].Descriptor()
}

func (OrderExecutionReportStatus) Type() protoreflect.EnumType {
	return &file_orders_proto_enumTypes[2]
}

func (x OrderExecutionReportStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderExecutionReportStatus.Descriptor instead.
func (OrderExecutionReportStatus) EnumDescriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{2}
}

// Алгоритм исполнения заявки
type TimeInForceType int32

const (
	TimeInForceType_TIME_IN_FORCE_UNSPECIFIED   TimeInForceType = 0 //Значение не определено см. TIME_IN_FORCE_DAY
	TimeInForceType_TIME_IN_FORCE_DAY           TimeInForceType = 1 //Заявка действует до конца торгового дня. Значение по умолчанию
	TimeInForceType_TIME_IN_FORCE_FILL_AND_KILL TimeInForceType = 2 //Если в момент выставления возможно исполнение заявки(в т.ч. частичное), заявка будет исполнена или отменена сразу после выставления
	TimeInForceType_TIME_IN_FORCE_FILL_OR_KILL  TimeInForceType = 3 //Если в момент выставления возможно полное исполнение заявки, заявка будет исполнена или отменена сразу после выставления, недоступно для срочного рынка и торговли по выходным
)

// Enum value maps for TimeInForceType.
var (
	TimeInForceType_name = map[int32]string{
		0: "TIME_IN_FORCE_UNSPECIFIED",
		1: "TIME_IN_FORCE_DAY",
		2: "TIME_IN_FORCE_FILL_AND_KILL",
		3: "TIME_IN_FORCE_FILL_OR_KILL",
	}
	TimeInForceType_value = map[string]int32{
		"TIME_IN_FORCE_UNSPECIFIED":   0,
		"TIME_IN_FORCE_DAY":           1,
		"TIME_IN_FORCE_FILL_AND_KILL": 2,
		"TIME_IN_FORCE_FILL_OR_KILL":  3,
	}
)

func (x TimeInForceType) Enum() *TimeInForceType {
	p := new(TimeInForceType)
	*p = x
	return p
}

func (x TimeInForceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeInForceType) Descriptor() protoreflect.EnumDescriptor {
	return file_orders_proto_enumTypes[3].Descriptor()
}

func (TimeInForceType) Type() protoreflect.EnumType {
	return &file_orders_proto_enumTypes[3]
}

func (x TimeInForceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeInForceType.Descriptor instead.
func (TimeInForceType) EnumDescriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{3}
}

// Маркер
type OrderStateStreamResponse_MarkerType int32

const (
	OrderStateStreamResponse_MARKER_UNKNOWN OrderStateStreamResponse_MarkerType = 0 //не определено
	OrderStateStreamResponse_MARKER_BROKER  OrderStateStreamResponse_MarkerType = 1 //сделки брокера
	OrderStateStreamResponse_MARKER_CHAT    OrderStateStreamResponse_MarkerType = 2 //исполнение поручение, полученного от клиента через каналы связи
	OrderStateStreamResponse_MARKER_PAPER   OrderStateStreamResponse_MarkerType = 3 //исполнение поручение, полученного от клиента в бумажной форме
	OrderStateStreamResponse_MARKER_MARGIN  OrderStateStreamResponse_MarkerType = 4 //принудительное закрытие позиций
	OrderStateStreamResponse_MARKER_TKBNM   OrderStateStreamResponse_MarkerType = 5 //сделки по управлению ликвидностью
	OrderStateStreamResponse_MARKER_SHORT   OrderStateStreamResponse_MarkerType = 6 //сделки РЕПО по привлечению у клиентов бумаг
	OrderStateStreamResponse_MARKER_SPECMM  OrderStateStreamResponse_MarkerType = 7 //перенос временно непокрытых позиций
	OrderStateStreamResponse_MARKER_PO      OrderStateStreamResponse_MarkerType = 8
)

// Enum value maps for OrderStateStreamResponse_MarkerType.
var (
	OrderStateStreamResponse_MarkerType_name = map[int32]string{
		0: "MARKER_UNKNOWN",
		1: "MARKER_BROKER",
		2: "MARKER_CHAT",
		3: "MARKER_PAPER",
		4: "MARKER_MARGIN",
		5: "MARKER_TKBNM",
		6: "MARKER_SHORT",
		7: "MARKER_SPECMM",
		8: "MARKER_PO",
	}
	OrderStateStreamResponse_MarkerType_value = map[string]int32{
		"MARKER_UNKNOWN": 0,
		"MARKER_BROKER":  1,
		"MARKER_CHAT":    2,
		"MARKER_PAPER":   3,
		"MARKER_MARGIN":  4,
		"MARKER_TKBNM":   5,
		"MARKER_SHORT":   6,
		"MARKER_SPECMM":  7,
		"MARKER_PO":      8,
	}
)

func (x OrderStateStreamResponse_MarkerType) Enum() *OrderStateStreamResponse_MarkerType {
	p := new(OrderStateStreamResponse_MarkerType)
	*p = x
	return p
}

func (x OrderStateStreamResponse_MarkerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStateStreamResponse_MarkerType) Descriptor() protoreflect.EnumDescriptor {
	return file_orders_proto_enumTypes[4].Descriptor()
}

func (OrderStateStreamResponse_MarkerType) Type() protoreflect.EnumType {
	return &file_orders_proto_enumTypes[4]
}

func (x OrderStateStreamResponse_MarkerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderStateStreamResponse_MarkerType.Descriptor instead.
func (OrderStateStreamResponse_MarkerType) EnumDescriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{22, 0}
}

// Дополнительная информация по статусу заявки
type OrderStateStreamResponse_StatusCauseInfo int32

const (
	OrderStateStreamResponse_CAUSE_UNSPECIFIED                   OrderStateStreamResponse_StatusCauseInfo = 0  //Не определено
	OrderStateStreamResponse_CAUSE_CANCELLED_BY_CLIENT           OrderStateStreamResponse_StatusCauseInfo = 15 //Отменено клиентом
	OrderStateStreamResponse_CAUSE_CANCELLED_BY_EXCHANGE         OrderStateStreamResponse_StatusCauseInfo = 1  //Отменено биржей
	OrderStateStreamResponse_CAUSE_CANCELLED_NOT_ENOUGH_POSITION OrderStateStreamResponse_StatusCauseInfo = 2  //Заявка не выставлена из-за нехватки средств
	OrderStateStreamResponse_CAUSE_CANCELLED_BY_CLIENT_BLOCK     OrderStateStreamResponse_StatusCauseInfo = 3  //Отменено из-за блокировки клиента
	OrderStateStreamResponse_CAUSE_REJECTED_BY_BROKER            OrderStateStreamResponse_StatusCauseInfo = 4  //Отклонено брокером
	OrderStateStreamResponse_CAUSE_REJECTED_BY_EXCHANGE          OrderStateStreamResponse_StatusCauseInfo = 5  //Отклонено биржей
	OrderStateStreamResponse_CAUSE_CANCELLED_BY_BROKER           OrderStateStreamResponse_StatusCauseInfo = 6  //Отменено брокером
)

// Enum value maps for OrderStateStreamResponse_StatusCauseInfo.
var (
	OrderStateStreamResponse_StatusCauseInfo_name = map[int32]string{
		0:  "CAUSE_UNSPECIFIED",
		15: "CAUSE_CANCELLED_BY_CLIENT",
		1:  "CAUSE_CANCELLED_BY_EXCHANGE",
		2:  "CAUSE_CANCELLED_NOT_ENOUGH_POSITION",
		3:  "CAUSE_CANCELLED_BY_CLIENT_BLOCK",
		4:  "CAUSE_REJECTED_BY_BROKER",
		5:  "CAUSE_REJECTED_BY_EXCHANGE",
		6:  "CAUSE_CANCELLED_BY_BROKER",
	}
	OrderStateStreamResponse_StatusCauseInfo_value = map[string]int32{
		"CAUSE_UNSPECIFIED":                   0,
		"CAUSE_CANCELLED_BY_CLIENT":           15,
		"CAUSE_CANCELLED_BY_EXCHANGE":         1,
		"CAUSE_CANCELLED_NOT_ENOUGH_POSITION": 2,
		"CAUSE_CANCELLED_BY_CLIENT_BLOCK":     3,
		"CAUSE_REJECTED_BY_BROKER":            4,
		"CAUSE_REJECTED_BY_EXCHANGE":          5,
		"CAUSE_CANCELLED_BY_BROKER":           6,
	}
)

func (x OrderStateStreamResponse_StatusCauseInfo) Enum() *OrderStateStreamResponse_StatusCauseInfo {
	p := new(OrderStateStreamResponse_StatusCauseInfo)
	*p = x
	return p
}

func (x OrderStateStreamResponse_StatusCauseInfo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStateStreamResponse_StatusCauseInfo) Descriptor() protoreflect.EnumDescriptor {
	return file_orders_proto_enumTypes[5].Descriptor()
}

func (OrderStateStreamResponse_StatusCauseInfo) Type() protoreflect.EnumType {
	return &file_orders_proto_enumTypes[5]
}

func (x OrderStateStreamResponse_StatusCauseInfo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderStateStreamResponse_StatusCauseInfo.Descriptor instead.
func (OrderStateStreamResponse_StatusCauseInfo) EnumDescriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{22, 1}
}

// Запрос установки соединения.
type TradesStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts []string `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"` //Идентификаторы счетов.
}

func (x *TradesStreamRequest) Reset() {
	*x = TradesStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orders_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesStreamRequest) ProtoMessage() {}

func (x *TradesStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orders_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesStreamRequest.ProtoReflect.Descriptor instead.
func (*TradesStreamRequest) Descriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{0}
}

func (x *TradesStreamRequest) GetAccounts() []string {
	if x != nil {
		return x.Accounts
	}
	return nil
}

// Информация о торговых поручениях.
type TradesStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*TradesStreamResponse_OrderTrades
	//	*TradesStreamResponse_Ping
	//	*TradesStreamResponse_Subscription
	Payload isTradesStreamResponse_Payload `protobuf_oneof:"payload"`
}

func (x *TradesStreamResponse) Reset() {
	*x = TradesStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orders_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesStreamResponse) ProtoMessage() {}

func (x *TradesStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orders_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesStreamResponse.ProtoReflect.Descriptor instead.
func (*TradesStreamResponse) Descriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{1}
}

func (m *TradesStreamResponse) GetPayload() isTradesStreamResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *TradesStreamResponse) GetOrderTrades() *OrderTrades {
	if x, ok := x.GetPayload().(*TradesStreamResponse_OrderTrades); ok {
		return x.OrderTrades
	}
	return nil
}

func (x *TradesStreamResponse) GetPing() *Ping {
	if x, ok := x.GetPayload().(*TradesStreamResponse_Ping); ok {
		return x.Ping
	}
	return nil
}

func (x *TradesStreamResponse) GetSubscription() *SubscriptionResponse {
	if x, ok := x.GetPayload().(*TradesStreamResponse_Subscription); ok {
		return x.Subscription
	}
	return nil
}

type isTradesStreamResponse_Payload interface {
	isTradesStreamResponse_Payload()
}

type TradesStreamResponse_OrderTrades struct {
	OrderTrades *OrderTrades `protobuf:"bytes,1,opt,name=order_trades,json=orderTrades,proto3,oneof"` //Информация об исполнении торгового поручения.
}

type TradesStreamResponse_Ping struct {
	Ping *Ping `protobuf:"bytes,2,opt,name=ping,proto3,oneof"` //Проверка активности стрима.
}

type TradesStreamResponse_Subscription struct {
	Subscription *SubscriptionResponse `protobuf:"bytes,3,opt,name=subscription,proto3,oneof"` //Ответ на запрос на подписку.
}

func (*TradesStreamResponse_OrderTrades) isTradesStreamResponse_Payload() {}

func (*TradesStreamResponse_Ping) isTradesStreamResponse_Payload() {}

func (*TradesStreamResponse_Subscription) isTradesStreamResponse_Payload() {}

// Информация об исполнении торгового поручения.
type OrderTrades struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId       string                 `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                                 //Идентификатор торгового поручения.
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                           //Дата и время создания сообщения в часовом поясе UTC.
	Direction     OrderDirection         `protobuf:"varint,3,opt,name=direction,proto3,enum=tinkoff.public.invest.api.contract.v1.OrderDirection" json:"direction,omitempty"` //Направление сделки.
	Figi          string                 `protobuf:"bytes,4,opt,name=figi,proto3" json:"figi,omitempty"`                                                                      //Figi-идентификатор инструмента.
	Trades        []*OrderTrade          `protobuf:"bytes,5,rep,name=trades,proto3" json:"trades,omitempty"`                                                                  //Массив сделок.
	AccountId     string                 `protobuf:"bytes,6,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                           //Идентификатор счёта.
	InstrumentUid string                 `protobuf:"bytes,7,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                               //UID идентификатор инструмента.
}

func (x *OrderTrades) Reset() {
	*x = OrderTrades{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orders_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderTrades) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderTrades) ProtoMessage() {}

func (x *OrderTrades) ProtoReflect() protoreflect.Message {
	mi := &file_orders_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderTrades.ProtoReflect.Descriptor instead.
func (*OrderTrades) Descriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{2}
}

func (x *OrderTrades) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OrderTrades) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OrderTrades) GetDirection() OrderDirection {
	if x != nil {
		return x.Direction
	}
	return OrderDirection_ORDER_DIRECTION_UNSPECIFIED
}

func (x *OrderTrades) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *OrderTrades) GetTrades() []*OrderTrade {
	if x != nil {
		return x.Trades
	}
	return nil
}

func (x *OrderTrades) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *OrderTrades) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

// Информация о сделке.
type OrderTrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"` //Дата и время совершения сделки в часовом поясе UTC.
	Price    *Quotation             `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`                       //Цена за 1 инструмент, по которой совершена сделка.
	Quantity int64                  `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`                //Количество штук в сделке.
	TradeId  string                 `protobuf:"bytes,4,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`    //Идентификатор сделки.
}

func (x *OrderTrade) Reset() {
	*x = OrderTrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orders_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderTrade) ProtoMessage() {}

func (x *OrderTrade) ProtoReflect() protoreflect.Message {
	mi := &file_orders_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderTrade.ProtoReflect.Descriptor instead.
func (*OrderTrade) Descriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{3}
}

func (x *OrderTrade) GetDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DateTime
	}
	return nil
}

func (x *OrderTrade) GetPrice() *Quotation {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *OrderTrade) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *OrderTrade) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

// Запрос выставления торгового поручения.
type PostOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in orders.proto.
	Figi         *string         `protobuf:"bytes,1,opt,name=figi,proto3,oneof" json:"figi,omitempty"`                                                                                          //Deprecated Figi-идентификатор инструмента. Необходимо использовать instrument_id.
	Quantity     int64           `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`                                                                                       //Количество лотов.
	Price        *Quotation      `protobuf:"bytes,3,opt,name=price,proto3,oneof" json:"price,omitempty"`                                                                                        //Цена за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента. Игнорируется для рыночных поручений.
	Direction    OrderDirection  `protobuf:"varint,4,opt,name=direction,proto3,enum=tinkoff.public.invest.api.contract.v1.OrderDirection" json:"direction,omitempty"`                           //Направление операции.
	AccountId    string          `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                                                     //Номер счёта.
	OrderType    OrderType       `protobuf:"varint,6,opt,name=order_type,json=orderType,proto3,enum=tinkoff.public.invest.api.contract.v1.OrderType" json:"order_type,omitempty"`               //Тип заявки.
	OrderId      string          `protobuf:"bytes,7,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                                                           //Идентификатор запроса выставления поручения для целей идемпотентности в формате UID. Максимальная длина 36 символов.
	InstrumentId string          `protobuf:"bytes,8,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"`                                                            //Идентификатор инструмента, принимает значения Figi или Instrument_uid.
	TimeInForce  TimeInForceType `protobuf:"varint,9,opt,name=time_in_force,json=timeInForce,proto3,enum=tinkoff.public.invest.api.contract.v1.TimeInForceType" json:"time_in_force,omitempty"` //Алгоритм исполнения поручения, применяется только к лимитной заявке.
	PriceType    PriceType       `protobuf:"varint,10,opt,name=price_type,json=priceType,proto3,enum=tinkoff.public.invest.api.contract.v1.PriceType" json:"price_type,omitempty"`              //Тип цены.
}

func (x *PostOrderRequest) Reset() {
	*x = PostOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orders_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostOrderRequest) ProtoMessage() {}

func (x *PostOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orders_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostOrderRequest.ProtoReflect.Descriptor instead.
func (*PostOrderRequest) Descriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{4}
}

// Deprecated: Marked as deprecated in orders.proto.
func (x *PostOrderRequest) GetFigi() string {
	if x != nil && x.Figi != nil {
		return *x.Figi
	}
	return ""
}

func (x *PostOrderRequest) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *PostOrderRequest) GetPrice() *Quotation {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *PostOrderRequest) GetDirection() OrderDirection {
	if x != nil {
		return x.Direction
	}
	return OrderDirection_ORDER_DIRECTION_UNSPECIFIED
}

func (x *PostOrderRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *PostOrderRequest) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_ORDER_TYPE_UNSPECIFIED
}

func (x *PostOrderRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *PostOrderRequest) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

func (x *PostOrderRequest) GetTimeInForce() TimeInForceType {
	if x != nil {
		return x.TimeInForce
	}
	return TimeInForceType_TIME_IN_FORCE_UNSPECIFIED
}

func (x *PostOrderRequest) GetPriceType() PriceType {
	if x != nil {
		return x.PriceType
	}
	return PriceType_PRICE_TYPE_UNSPECIFIED
}

// Информация о выставлении поручения.
type PostOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId               string                     `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                                                                                                    //Биржевой идентификатор заявки.
	ExecutionReportStatus OrderExecutionReportStatus `protobuf:"varint,2,opt,name=execution_report_status,json=executionReportStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.OrderExecutionReportStatus" json:"execution_report_status,omitempty"` //Текущий статус заявки.
	LotsRequested         int64                      `protobuf:"varint,3,opt,name=lots_requested,json=lotsRequested,proto3" json:"lots_requested,omitempty"`                                                                                                 //Запрошено лотов.
	LotsExecuted          int64                      `protobuf:"varint,4,opt,name=lots_executed,json=lotsExecuted,proto3" json:"lots_executed,omitempty"`                                                                                                    //Исполнено лотов.
	InitialOrderPrice     *MoneyValue                `protobuf:"bytes,5,opt,name=initial_order_price,json=initialOrderPrice,proto3" json:"initial_order_price,omitempty"`                                                                                    //Начальная цена заявки. Произведение количества запрошенных лотов на цену.
	ExecutedOrderPrice    *MoneyValue                `protobuf:"bytes,6,opt,name=executed_order_price,json=executedOrderPrice,proto3" json:"executed_order_price,omitempty"`                                                                                 //Исполненная средняя цена одного инструмента в заявке.
	TotalOrderAmount      *MoneyValue                `protobuf:"bytes,7,opt,name=total_order_amount,json=totalOrderAmount,proto3" json:"total_order_amount,omitempty"`                                                                                       //Итоговая стоимость заявки, включающая все комиссии.
	InitialCommission     *MoneyValue                `protobuf:"bytes,8,opt,name=initial_commission,json=initialCommission,proto3" json:"initial_commission,omitempty"`                                                                                      //Начальная комиссия. Комиссия рассчитанная при выставлении заявки.
	ExecutedCommission    *MoneyValue                `protobuf:"bytes,9,opt,name=executed_commission,json=executedCommission,proto3" json:"executed_commission,omitempty"`                                                                                   //Фактическая комиссия по итогам исполнения заявки.
	AciValue              *MoneyValue                `protobuf:"bytes,10,opt,name=aci_value,json=aciValue,proto3" json:"aci_value,omitempty"`                                                                                                                //Значение НКД (накопленного купонного дохода) на дату. Подробнее: [НКД при выставлении торговых поручений](https://russianinvestments.github.io/investAPI/head-orders#coupon)
	Figi                  string                     `protobuf:"bytes,11,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                                                        // Figi-идентификатор инструмента.
	Direction             OrderDirection             `protobuf:"varint,12,opt,name=direction,proto3,enum=tinkoff.public.invest.api.contract.v1.OrderDirection" json:"direction,omitempty"`                                                                   //Направление сделки.
	InitialSecurityPrice  *MoneyValue                `protobuf:"bytes,13,opt,name=initial_security_price,json=initialSecurityPrice,proto3" json:"initial_security_price,omitempty"`                                                                          //Начальная цена за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента.
	OrderType             OrderType                  `protobuf:"varint,14,opt,name=order_type,json=orderType,proto3,enum=tinkoff.public.invest.api.contract.v1.OrderType" json:"order_type,omitempty"`                                                       //Тип заявки.
	Message               string                     `protobuf:"bytes,15,opt,name=message,proto3" json:"message,omitempty"`                                                                                                                                  //Дополнительные данные об исполнении заявки.
	InitialOrderPricePt   *Quotation                 `protobuf:"bytes,16,opt,name=initial_order_price_pt,json=initialOrderPricePt,proto3" json:"initial_order_price_pt,omitempty"`                                                                           //Начальная цена заявки в пунктах (для фьючерсов).
	InstrumentUid         string                     `protobuf:"bytes,17,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                                                                                                 //UID идентификатор инструмента.
	OrderRequestId        string                     `protobuf:"bytes,20,opt,name=order_request_id,json=orderRequestId,proto3" json:"order_request_id,omitempty"`                                                                                            //Идентификатор ключа идемпотентности, переданный клиентом, в формате UID. Максимальная длина 36 символов.
	ResponseMetadata      *ResponseMetadata          `protobuf:"bytes,254,opt,name=response_metadata,json=responseMetadata,proto3" json:"response_metadata,omitempty"`                                                                                       //Метадата
}

func (x *PostOrderResponse) Reset() {
	*x = PostOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orders_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostOrderResponse) ProtoMessage() {}

func (x *PostOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orders_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostOrderResponse.ProtoReflect.Descriptor instead.
func (*PostOrderResponse) Descriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{5}
}

func (x *PostOrderResponse) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *PostOrderResponse) GetExecutionReportStatus() OrderExecutionReportStatus {
	if x != nil {
		return x.ExecutionReportStatus
	}
	return OrderExecutionReportStatus_EXECUTION_REPORT_STATUS_UNSPECIFIED
}

func (x *PostOrderResponse) GetLotsRequested() int64 {
	if x != nil {
		return x.LotsRequested
	}
	return 0
}

func (x *PostOrderResponse) GetLotsExecuted() int64 {
	if x != nil {
		return x.LotsExecuted
	}
	return 0
}

func (x *PostOrderResponse) GetInitialOrderPrice() *MoneyValue {
	if x != nil {
		return x.InitialOrderPrice
	}
	return nil
}

func (x *PostOrderResponse) GetExecutedOrderPrice() *MoneyValue {
	if x != nil {
		return x.ExecutedOrderPrice
	}
	return nil
}

func (x *PostOrderResponse) GetTotalOrderAmount() *MoneyValue {
	if x != nil {
		return x.TotalOrderAmount
	}
	return nil
}

func (x *PostOrderResponse) GetInitialCommission() *MoneyValue {
	if x != nil {
		return x.InitialCommission
	}
	return nil
}

func (x *PostOrderResponse) GetExecutedCommission() *MoneyValue {
	if x != nil {
		return x.ExecutedCommission
	}
	return nil
}

func (x *PostOrderResponse) GetAciValue() *MoneyValue {
	if x != nil {
		return x.AciValue
	}
	return nil
}

func (x *PostOrderResponse) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *PostOrderResponse) GetDirection() OrderDirection {
	if x != nil {
		return x.Direction
	}
	return OrderDirection_ORDER_DIRECTION_UNSPECIFIED
}

func (x *PostOrderResponse) GetInitialSecurityPrice() *MoneyValue {
	if x != nil {
		return x.InitialSecurityPrice
	}
	return nil
}

func (x *PostOrderResponse) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_ORDER_TYPE_UNSPECIFIED
}

func (x *PostOrderResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PostOrderResponse) GetInitialOrderPricePt() *Quotation {
	if x != nil {
		return x.InitialOrderPricePt
	}
	return nil
}

func (x *PostOrderResponse) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

func (x *PostOrderResponse) GetOrderRequestId() string {
	if x != nil {
		return x.OrderRequestId
	}
	return ""
}

func (x *PostOrderResponse) GetResponseMetadata() *ResponseMetadata {
	if x != nil {
		return x.ResponseMetadata
	}
	return nil
}

// Запрос выставления асинхронного торгового поручения.
type PostOrderAsyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentId string           `protobuf:"bytes,1,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"`                                                                  //Идентификатор инструмента, принимает значения Figi или Instrument_uid.
	Quantity     int64            `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`                                                                                             //Количество лотов.
	Price        *Quotation       `protobuf:"bytes,3,opt,name=price,proto3,oneof" json:"price,omitempty"`                                                                                              //Цена за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента. Игнорируется для рыночных поручений.
	Direction    OrderDirection   `protobuf:"varint,4,opt,name=direction,proto3,enum=tinkoff.public.invest.api.contract.v1.OrderDirection" json:"direction,omitempty"`                                 //Направление операции.
	AccountId    string           `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                                                           //Номер счёта.
	OrderType    OrderType        `protobuf:"varint,6,opt,name=order_type,json=orderType,proto3,enum=tinkoff.public.invest.api.contract.v1.OrderType" json:"order_type,omitempty"`                     //Тип заявки.
	OrderId      string           `protobuf:"bytes,7,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                                                                 //Идентификатор запроса выставления поручения для целей идемпотентности в формате UID. Максимальная длина 36 символов.
	TimeInForce  *TimeInForceType `protobuf:"varint,8,opt,name=time_in_force,json=timeInForce,proto3,enum=tinkoff.public.invest.api.contract.v1.TimeInForceType,oneof" json:"time_in_force,omitempty"` //Алгоритм исполнения поручения, применяется только к лимитной заявке.
	PriceType    *PriceType       `protobuf:"varint,9,opt,name=price_type,json=priceType,proto3,enum=tinkoff.public.invest.api.contract.v1.PriceType,oneof" json:"price_type,omitempty"`               //Тип цены.
}

func (x *PostOrderAsyncRequest) Reset() {
	*x = PostOrderAsyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orders_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostOrderAsyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostOrderAsyncRequest) ProtoMessage() {}

func (x *PostOrderAsyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orders_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostOrderAsyncRequest.ProtoReflect.Descriptor instead.
func (*PostOrderAsyncRequest) Descriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{6}
}

func (x *PostOrderAsyncRequest) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

func (x *PostOrderAsyncRequest) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *PostOrderAsyncRequest) GetPrice() *Quotation {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *PostOrderAsyncRequest) GetDirection() OrderDirection {
	if x != nil {
		return x.Direction
	}
	return OrderDirection_ORDER_DIRECTION_UNSPECIFIED
}

func (x *PostOrderAsyncRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *PostOrderAsyncRequest) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_ORDER_TYPE_UNSPECIFIED
}

func (x *PostOrderAsyncRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *PostOrderAsyncRequest) GetTimeInForce() TimeInForceType {
	if x != nil && x.TimeInForce != nil {
		return *x.TimeInForce
	}
	return TimeInForceType_TIME_IN_FORCE_UNSPECIFIED
}

func (x *PostOrderAsyncRequest) GetPriceType() PriceType {
	if x != nil && x.PriceType != nil {
		return *x.PriceType
	}
	return PriceType_PRICE_TYPE_UNSPECIFIED
}

type PostOrderAsyncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderRequestId        string                     `protobuf:"bytes,1,opt,name=order_request_id,json=orderRequestId,proto3" json:"order_request_id,omitempty"`                                                                                             //Идентификатор ключа идемпотентности, переданный клиентом, в формате UID. Максимальная длина 36 символов.
	ExecutionReportStatus OrderExecutionReportStatus `protobuf:"varint,2,opt,name=execution_report_status,json=executionReportStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.OrderExecutionReportStatus" json:"execution_report_status,omitempty"` //Текущий статус заявки.
	TradeIntentId         *string                    `protobuf:"bytes,3,opt,name=trade_intent_id,json=tradeIntentId,proto3,oneof" json:"trade_intent_id,omitempty"`                                                                                          //Идентификатор торгового поручения.
}

func (x *PostOrderAsyncResponse) Reset() {
	*x = PostOrderAsyncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orders_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostOrderAsyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostOrderAsyncResponse) ProtoMessage() {}

func (x *PostOrderAsyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orders_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostOrderAsyncResponse.ProtoReflect.Descriptor instead.
func (*PostOrderAsyncResponse) Descriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{7}
}

func (x *PostOrderAsyncResponse) GetOrderRequestId() string {
	if x != nil {
		return x.OrderRequestId
	}
	return ""
}

func (x *PostOrderAsyncResponse) GetExecutionReportStatus() OrderExecutionReportStatus {
	if x != nil {
		return x.ExecutionReportStatus
	}
	return OrderExecutionReportStatus_EXECUTION_REPORT_STATUS_UNSPECIFIED
}

func (x *PostOrderAsyncResponse) GetTradeIntentId() string {
	if x != nil && x.TradeIntentId != nil {
		return *x.TradeIntentId
	}
	return ""
}

// Запрос отмены торгового поручения.
type CancelOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` //Номер счёта.
	OrderId   string `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`       //Идентификатор заявки.
}

func (x *CancelOrderRequest) Reset() {
	*x = CancelOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orders_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrderRequest) ProtoMessage() {}

func (x *CancelOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orders_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrderRequest.ProtoReflect.Descriptor instead.
func (*CancelOrderRequest) Descriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{8}
}

func (x *CancelOrderRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CancelOrderRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

// Результат отмены торгового поручения.
type CancelOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time             *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`                                                   //Дата и время отмены заявки в часовом поясе UTC.
	ResponseMetadata *ResponseMetadata      `protobuf:"bytes,254,opt,name=response_metadata,json=responseMetadata,proto3" json:"response_metadata,omitempty"` //Метадата
}

func (x *CancelOrderResponse) Reset() {
	*x = CancelOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orders_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrderResponse) ProtoMessage() {}

func (x *CancelOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orders_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrderResponse.ProtoReflect.Descriptor instead.
func (*CancelOrderResponse) Descriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{9}
}

func (x *CancelOrderResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *CancelOrderResponse) GetResponseMetadata() *ResponseMetadata {
	if x != nil {
		return x.ResponseMetadata
	}
	return nil
}

// Запрос получения статуса торгового поручения.
type GetOrderStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string    `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                                       //Номер счёта.
	OrderId   string    `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                                             //Идентификатор заявки.
	PriceType PriceType `protobuf:"varint,3,opt,name=price_type,json=priceType,proto3,enum=tinkoff.public.invest.api.contract.v1.PriceType" json:"price_type,omitempty"` //Тип цены.
}

func (x *GetOrderStateRequest) Reset() {
	*x = GetOrderStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orders_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderStateRequest) ProtoMessage() {}

func (x *GetOrderStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orders_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderStateRequest.ProtoReflect.Descriptor instead.
func (*GetOrderStateRequest) Descriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{10}
}

func (x *GetOrderStateRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetOrderStateRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *GetOrderStateRequest) GetPriceType() PriceType {
	if x != nil {
		return x.PriceType
	}
	return PriceType_PRICE_TYPE_UNSPECIFIED
}

// Запрос получения списка активных торговых поручений.
type GetOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"` //Номер счёта.
}

func (x *GetOrdersRequest) Reset() {
	*x = GetOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orders_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrdersRequest) ProtoMessage() {}

func (x *GetOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orders_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrdersRequest.ProtoReflect.Descriptor instead.
func (*GetOrdersRequest) Descriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{11}
}

func (x *GetOrdersRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

// Список активных торговых поручений.
type GetOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orders []*OrderState `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"` //Массив активных заявок.
}

func (x *GetOrdersResponse) Reset() {
	*x = GetOrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orders_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrdersResponse) ProtoMessage() {}

func (x *GetOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orders_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrdersResponse.ProtoReflect.Descriptor instead.
func (*GetOrdersResponse) Descriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{12}
}

func (x *GetOrdersResponse) GetOrders() []*OrderState {
	if x != nil {
		return x.Orders
	}
	return nil
}

// Информация о торговом поручении.
type OrderState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId               string                     `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                                                                                                    //Биржевой идентификатор заявки.
	ExecutionReportStatus OrderExecutionReportStatus `protobuf:"varint,2,opt,name=execution_report_status,json=executionReportStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.OrderExecutionReportStatus" json:"execution_report_status,omitempty"` //Текущий статус заявки.
	LotsRequested         int64                      `protobuf:"varint,3,opt,name=lots_requested,json=lotsRequested,proto3" json:"lots_requested,omitempty"`                                                                                                 //Запрошено лотов.
	LotsExecuted          int64                      `protobuf:"varint,4,opt,name=lots_executed,json=lotsExecuted,proto3" json:"lots_executed,omitempty"`                                                                                                    //Исполнено лотов.
	InitialOrderPrice     *MoneyValue                `protobuf:"bytes,5,opt,name=initial_order_price,json=initialOrderPrice,proto3" json:"initial_order_price,omitempty"`                                                                                    //Начальная цена заявки. Произведение количества запрошенных лотов на цену.
	ExecutedOrderPrice    *MoneyValue                `protobuf:"bytes,6,opt,name=executed_order_price,json=executedOrderPrice,proto3" json:"executed_order_price,omitempty"`                                                                                 //Исполненная цена заявки. Произведение средней цены покупки на количество лотов.
	TotalOrderAmount      *MoneyValue                `protobuf:"bytes,7,opt,name=total_order_amount,json=totalOrderAmount,proto3" json:"total_order_amount,omitempty"`                                                                                       //Итоговая стоимость заявки, включающая все комиссии.
	AveragePositionPrice  *MoneyValue                `protobuf:"bytes,8,opt,name=average_position_price,json=averagePositionPrice,proto3" json:"average_position_price,omitempty"`                                                                           //Средняя цена позиции по сделке.
	InitialCommission     *MoneyValue                `protobuf:"bytes,9,opt,name=initial_commission,json=initialCommission,proto3" json:"initial_commission,omitempty"`                                                                                      //Начальная комиссия. Комиссия, рассчитанная на момент подачи заявки.
	ExecutedCommission    *MoneyValue                `protobuf:"bytes,10,opt,name=executed_commission,json=executedCommission,proto3" json:"executed_commission,omitempty"`                                                                                  //Фактическая комиссия по итогам исполнения заявки.
	Figi                  string                     `protobuf:"bytes,11,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                                                        //Figi-идентификатор инструмента.
	Direction             OrderDirection             `protobuf:"varint,12,opt,name=direction,proto3,enum=tinkoff.public.invest.api.contract.v1.OrderDirection" json:"direction,omitempty"`                                                                   //Направление заявки.
	InitialSecurityPrice  *MoneyValue                `protobuf:"bytes,13,opt,name=initial_security_price,json=initialSecurityPrice,proto3" json:"initial_security_price,omitempty"`                                                                          //Начальная цена за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента.
	Stages                []*OrderStage              `protobuf:"bytes,14,rep,name=stages,proto3" json:"stages,omitempty"`                                                                                                                                    //Стадии выполнения заявки.
	ServiceCommission     *MoneyValue                `protobuf:"bytes,15,opt,name=service_commission,json=serviceCommission,proto3" json:"service_commission,omitempty"`                                                                                     //Сервисная комиссия.
	Currency              string                     `protobuf:"bytes,16,opt,name=currency,proto3" json:"currency,omitempty"`                                                                                                                                //Валюта заявки.
	OrderType             OrderType                  `protobuf:"varint,17,opt,name=order_type,json=orderType,proto3,enum=tinkoff.public.invest.api.contract.v1.OrderType" json:"order_type,omitempty"`                                                       //Тип заявки.
	OrderDate             *timestamppb.Timestamp     `protobuf:"bytes,18,opt,name=order_date,json=orderDate,proto3" json:"order_date,omitempty"`                                                                                                             //Дата и время выставления заявки в часовом поясе UTC.
	InstrumentUid         string                     `protobuf:"bytes,19,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                                                                                                 //UID идентификатор инструмента.
	OrderRequestId        string                     `protobuf:"bytes,20,opt,name=order_request_id,json=orderRequestId,proto3" json:"order_request_id,omitempty"`                                                                                            //Идентификатор ключа идемпотентности, переданный клиентом, в формате UID. Максимальная длина 36 символов.
}

func (x *OrderState) Reset() {
	*x = OrderState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orders_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderState) ProtoMessage() {}

func (x *OrderState) ProtoReflect() protoreflect.Message {
	mi := &file_orders_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderState.ProtoReflect.Descriptor instead.
func (*OrderState) Descriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{13}
}

func (x *OrderState) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OrderState) GetExecutionReportStatus() OrderExecutionReportStatus {
	if x != nil {
		return x.ExecutionReportStatus
	}
	return OrderExecutionReportStatus_EXECUTION_REPORT_STATUS_UNSPECIFIED
}

func (x *OrderState) GetLotsRequested() int64 {
	if x != nil {
		return x.LotsRequested
	}
	return 0
}

func (x *OrderState) GetLotsExecuted() int64 {
	if x != nil {
		return x.LotsExecuted
	}
	return 0
}

func (x *OrderState) GetInitialOrderPrice() *MoneyValue {
	if x != nil {
		return x.InitialOrderPrice
	}
	return nil
}

func (x *OrderState) GetExecutedOrderPrice() *MoneyValue {
	if x != nil {
		return x.ExecutedOrderPrice
	}
	return nil
}

func (x *OrderState) GetTotalOrderAmount() *MoneyValue {
	if x != nil {
		return x.TotalOrderAmount
	}
	return nil
}

func (x *OrderState) GetAveragePositionPrice() *MoneyValue {
	if x != nil {
		return x.AveragePositionPrice
	}
	return nil
}

func (x *OrderState) GetInitialCommission() *MoneyValue {
	if x != nil {
		return x.InitialCommission
	}
	return nil
}

func (x *OrderState) GetExecutedCommission() *MoneyValue {
	if x != nil {
		return x.ExecutedCommission
	}
	return nil
}

func (x *OrderState) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *OrderState) GetDirection() OrderDirection {
	if x != nil {
		return x.Direction
	}
	return OrderDirection_ORDER_DIRECTION_UNSPECIFIED
}

func (x *OrderState) GetInitialSecurityPrice() *MoneyValue {
	if x != nil {
		return x.InitialSecurityPrice
	}
	return nil
}

func (x *OrderState) GetStages() []*OrderStage {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *OrderState) GetServiceCommission() *MoneyValue {
	if x != nil {
		return x.ServiceCommission
	}
	return nil
}

func (x *OrderState) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *OrderState) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_ORDER_TYPE_UNSPECIFIED
}

func (x *OrderState) GetOrderDate() *timestamppb.Timestamp {
	if x != nil {
		return x.OrderDate
	}
	return nil
}

func (x *OrderState) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

func (x *OrderState) GetOrderRequestId() string {
	if x != nil {
		return x.OrderRequestId
	}
	return ""
}

// Сделки в рамках торгового поручения.
type OrderStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price         *MoneyValue            `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`                                      //Цена за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента.
	Quantity      int64                  `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`                               //Количество лотов.
	TradeId       string                 `protobuf:"bytes,3,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`                   //Идентификатор сделки.
	ExecutionTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=execution_time,json=executionTime,proto3" json:"execution_time,omitempty"` //Время исполнения сделки
}

func (x *OrderStage) Reset() {
	*x = OrderStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orders_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStage) ProtoMessage() {}

func (x *OrderStage) ProtoReflect() protoreflect.Message {
	mi := &file_orders_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStage.ProtoReflect.Descriptor instead.
func (*OrderStage) Descriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{14}
}

func (x *OrderStage) GetPrice() *MoneyValue {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *OrderStage) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *OrderStage) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *OrderStage) GetExecutionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExecutionTime
	}
	return nil
}

// Запрос изменения выставленной заявки.
type ReplaceOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId      string     `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                                              //Номер счета.
	OrderId        string     `protobuf:"bytes,6,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                                                    //Идентификатор заявки на бирже.
	IdempotencyKey string     `protobuf:"bytes,7,opt,name=idempotency_key,json=idempotencyKey,proto3" json:"idempotency_key,omitempty"`                                               //Новый идентификатор запроса выставления поручения для целей идемпотентности. Максимальная длина 36 символов. Перезатирает старый ключ.
	Quantity       int64      `protobuf:"varint,11,opt,name=quantity,proto3" json:"quantity,omitempty"`                                                                               //Количество лотов.
	Price          *Quotation `protobuf:"bytes,12,opt,name=price,proto3,oneof" json:"price,omitempty"`                                                                                //Цена за 1 инструмент.
	PriceType      *PriceType `protobuf:"varint,13,opt,name=price_type,json=priceType,proto3,enum=tinkoff.public.invest.api.contract.v1.PriceType,oneof" json:"price_type,omitempty"` //Тип цены.
}

func (x *ReplaceOrderRequest) Reset() {
	*x = ReplaceOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orders_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceOrderRequest) ProtoMessage() {}

func (x *ReplaceOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orders_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceOrderRequest.ProtoReflect.Descriptor instead.
func (*ReplaceOrderRequest) Descriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{15}
}

func (x *ReplaceOrderRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ReplaceOrderRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *ReplaceOrderRequest) GetIdempotencyKey() string {
	if x != nil {
		return x.IdempotencyKey
	}
	return ""
}

func (x *ReplaceOrderRequest) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *ReplaceOrderRequest) GetPrice() *Quotation {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *ReplaceOrderRequest) GetPriceType() PriceType {
	if x != nil && x.PriceType != nil {
		return *x.PriceType
	}
	return PriceType_PRICE_TYPE_UNSPECIFIED
}

// Запрос на расчет количества доступных для покупки/продажи лотов. Если не указывать цену инструмента, то расчет произведется по текущум ценам в стакане: по лучшему предложению для покупки и по лучшему спросу для продажи.
type GetMaxLotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId    string     `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`          //Номер счета
	InstrumentId string     `protobuf:"bytes,2,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"` //Идентификатор инструмента, принимает значения Figi или instrument_uid
	Price        *Quotation `protobuf:"bytes,3,opt,name=price,proto3,oneof" json:"price,omitempty"`                             //Цена инструмента
}

func (x *GetMaxLotsRequest) Reset() {
	*x = GetMaxLotsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orders_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMaxLotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMaxLotsRequest) ProtoMessage() {}

func (x *GetMaxLotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orders_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMaxLotsRequest.ProtoReflect.Descriptor instead.
func (*GetMaxLotsRequest) Descriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{16}
}

func (x *GetMaxLotsRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetMaxLotsRequest) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

func (x *GetMaxLotsRequest) GetPrice() *Quotation {
	if x != nil {
		return x.Price
	}
	return nil
}

// Результат количество доступных для покупки/продажи лотов
type GetMaxLotsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency         string                             `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`                                           //Валюта инструмента
	BuyLimits        *GetMaxLotsResponse_BuyLimitsView  `protobuf:"bytes,2,opt,name=buy_limits,json=buyLimits,proto3" json:"buy_limits,omitempty"`                        //Лимиты для покупок на собственные деньги
	BuyMarginLimits  *GetMaxLotsResponse_BuyLimitsView  `protobuf:"bytes,3,opt,name=buy_margin_limits,json=buyMarginLimits,proto3" json:"buy_margin_limits,omitempty"`    //Лимиты для покупок с учетом маржинального кредитования
	SellLimits       *GetMaxLotsResponse_SellLimitsView `protobuf:"bytes,4,opt,name=sell_limits,json=sellLimits,proto3" json:"sell_limits,omitempty"`                     //Лимиты для продаж по собственной позиции
	SellMarginLimits *GetMaxLotsResponse_SellLimitsView `protobuf:"bytes,5,opt,name=sell_margin_limits,json=sellMarginLimits,proto3" json:"sell_margin_limits,omitempty"` //Лимиты для продаж с учетом маржинального кредитования
}

func (x *GetMaxLotsResponse) Reset() {
	*x = GetMaxLotsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orders_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMaxLotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMaxLotsResponse) ProtoMessage() {}

func (x *GetMaxLotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orders_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMaxLotsResponse.ProtoReflect.Descriptor instead.
func (*GetMaxLotsResponse) Descriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{17}
}

func (x *GetMaxLotsResponse) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *GetMaxLotsResponse) GetBuyLimits() *GetMaxLotsResponse_BuyLimitsView {
	if x != nil {
		return x.BuyLimits
	}
	return nil
}

func (x *GetMaxLotsResponse) GetBuyMarginLimits() *GetMaxLotsResponse_BuyLimitsView {
	if x != nil {
		return x.BuyMarginLimits
	}
	return nil
}

func (x *GetMaxLotsResponse) GetSellLimits() *GetMaxLotsResponse_SellLimitsView {
	if x != nil {
		return x.SellLimits
	}
	return nil
}

func (x *GetMaxLotsResponse) GetSellMarginLimits() *GetMaxLotsResponse_SellLimitsView {
	if x != nil {
		return x.SellMarginLimits
	}
	return nil
}

// Запрос получения предварительной стоимости заявки
type GetOrderPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId    string         `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                            //Номер счета
	InstrumentId string         `protobuf:"bytes,2,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"`                                   //Идентификатор инструмента, принимает значения Figi или instrument_uid
	Price        *Quotation     `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`                                                                     //Цена инструмента
	Direction    OrderDirection `protobuf:"varint,12,opt,name=direction,proto3,enum=tinkoff.public.invest.api.contract.v1.OrderDirection" json:"direction,omitempty"` //Направление заявки
	Quantity     int64          `protobuf:"varint,13,opt,name=quantity,proto3" json:"quantity,omitempty"`                                                             //Количество лотов
}

func (x *GetOrderPriceRequest) Reset() {
	*x = GetOrderPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orders_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderPriceRequest) ProtoMessage() {}

func (x *GetOrderPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orders_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderPriceRequest.ProtoReflect.Descriptor instead.
func (*GetOrderPriceRequest) Descriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{18}
}

func (x *GetOrderPriceRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetOrderPriceRequest) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

func (x *GetOrderPriceRequest) GetPrice() *Quotation {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *GetOrderPriceRequest) GetDirection() OrderDirection {
	if x != nil {
		return x.Direction
	}
	return OrderDirection_ORDER_DIRECTION_UNSPECIFIED
}

func (x *GetOrderPriceRequest) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

// Предварительная стоимость заявки
type GetOrderPriceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalOrderAmount      *MoneyValue `protobuf:"bytes,1,opt,name=total_order_amount,json=totalOrderAmount,proto3" json:"total_order_amount,omitempty"`                //Итоговая стоимость заявки
	InitialOrderAmount    *MoneyValue `protobuf:"bytes,5,opt,name=initial_order_amount,json=initialOrderAmount,proto3" json:"initial_order_amount,omitempty"`          //Стоимость заявки без комиссий, НКД, ГО (для фьючерсов — стоимость контрактов)
	LotsRequested         int64       `protobuf:"varint,3,opt,name=lots_requested,json=lotsRequested,proto3" json:"lots_requested,omitempty"`                          //Запрошено лотов
	ExecutedCommission    *MoneyValue `protobuf:"bytes,7,opt,name=executed_commission,json=executedCommission,proto3" json:"executed_commission,omitempty"`            //Общая комиссия
	ExecutedCommissionRub *MoneyValue `protobuf:"bytes,8,opt,name=executed_commission_rub,json=executedCommissionRub,proto3" json:"executed_commission_rub,omitempty"` //Общая комиссия в рублях
	ServiceCommission     *MoneyValue `protobuf:"bytes,9,opt,name=service_commission,json=serviceCommission,proto3" json:"service_commission,omitempty"`               //Сервисная комиссия
	DealCommission        *MoneyValue `protobuf:"bytes,10,opt,name=deal_commission,json=dealCommission,proto3" json:"deal_commission,omitempty"`                       //Комиссия за проведение сделки
	// Types that are assignable to InstrumentExtra:
	//
	//	*GetOrderPriceResponse_ExtraBond_
	//	*GetOrderPriceResponse_ExtraFuture_
	InstrumentExtra isGetOrderPriceResponse_InstrumentExtra `protobuf_oneof:"instrument_extra"`
}

func (x *GetOrderPriceResponse) Reset() {
	*x = GetOrderPriceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orders_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderPriceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderPriceResponse) ProtoMessage() {}

func (x *GetOrderPriceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orders_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderPriceResponse.ProtoReflect.Descriptor instead.
func (*GetOrderPriceResponse) Descriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{19}
}

func (x *GetOrderPriceResponse) GetTotalOrderAmount() *MoneyValue {
	if x != nil {
		return x.TotalOrderAmount
	}
	return nil
}

func (x *GetOrderPriceResponse) GetInitialOrderAmount() *MoneyValue {
	if x != nil {
		return x.InitialOrderAmount
	}
	return nil
}

func (x *GetOrderPriceResponse) GetLotsRequested() int64 {
	if x != nil {
		return x.LotsRequested
	}
	return 0
}

func (x *GetOrderPriceResponse) GetExecutedCommission() *MoneyValue {
	if x != nil {
		return x.ExecutedCommission
	}
	return nil
}

func (x *GetOrderPriceResponse) GetExecutedCommissionRub() *MoneyValue {
	if x != nil {
		return x.ExecutedCommissionRub
	}
	return nil
}

func (x *GetOrderPriceResponse) GetServiceCommission() *MoneyValue {
	if x != nil {
		return x.ServiceCommission
	}
	return nil
}

func (x *GetOrderPriceResponse) GetDealCommission() *MoneyValue {
	if x != nil {
		return x.DealCommission
	}
	return nil
}

func (m *GetOrderPriceResponse) GetInstrumentExtra() isGetOrderPriceResponse_InstrumentExtra {
	if m != nil {
		return m.InstrumentExtra
	}
	return nil
}

func (x *GetOrderPriceResponse) GetExtraBond() *GetOrderPriceResponse_ExtraBond {
	if x, ok := x.GetInstrumentExtra().(*GetOrderPriceResponse_ExtraBond_); ok {
		return x.ExtraBond
	}
	return nil
}

func (x *GetOrderPriceResponse) GetExtraFuture() *GetOrderPriceResponse_ExtraFuture {
	if x, ok := x.GetInstrumentExtra().(*GetOrderPriceResponse_ExtraFuture_); ok {
		return x.ExtraFuture
	}
	return nil
}

type isGetOrderPriceResponse_InstrumentExtra interface {
	isGetOrderPriceResponse_InstrumentExtra()
}

type GetOrderPriceResponse_ExtraBond_ struct {
	ExtraBond *GetOrderPriceResponse_ExtraBond `protobuf:"bytes,12,opt,name=extra_bond,json=extraBond,proto3,oneof"` //Дополнительная информация по облигациям
}

type GetOrderPriceResponse_ExtraFuture_ struct {
	ExtraFuture *GetOrderPriceResponse_ExtraFuture `protobuf:"bytes,13,opt,name=extra_future,json=extraFuture,proto3,oneof"` //Дополнительная информация по фьючерсам
}

func (*GetOrderPriceResponse_ExtraBond_) isGetOrderPriceResponse_InstrumentExtra() {}

func (*GetOrderPriceResponse_ExtraFuture_) isGetOrderPriceResponse_InstrumentExtra() {}

// Запрос установки стрим-соединения торговых поручений
type OrderStateStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts        []string `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`                                                //Идентификаторы счетов.
	PingDelayMillis *int32   `protobuf:"varint,15,opt,name=ping_delay_millis,json=pingDelayMillis,proto3,oneof" json:"ping_delay_millis,omitempty"` //Задержка пинг сообщений milliseconds 1000-120000, default 120000
}

func (x *OrderStateStreamRequest) Reset() {
	*x = OrderStateStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orders_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderStateStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStateStreamRequest) ProtoMessage() {}

func (x *OrderStateStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orders_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStateStreamRequest.ProtoReflect.Descriptor instead.
func (*OrderStateStreamRequest) Descriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{20}
}

func (x *OrderStateStreamRequest) GetAccounts() []string {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *OrderStateStreamRequest) GetPingDelayMillis() int32 {
	if x != nil && x.PingDelayMillis != nil {
		return *x.PingDelayMillis
	}
	return 0
}

type SubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackingId string                   `protobuf:"bytes,1,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"`                                            //Уникальный идентификатор запроса, подробнее: [tracking_id](https://russianinvestments.github.io/investAPI/grpc#tracking-id).
	Status     ResultSubscriptionStatus `protobuf:"varint,2,opt,name=status,proto3,enum=tinkoff.public.invest.api.contract.v1.ResultSubscriptionStatus" json:"status,omitempty"` //Статус подписки.
	StreamId   string                   `protobuf:"bytes,4,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`                                                  //Идентификатор открытого соединения
	Accounts   []string                 `protobuf:"bytes,5,rep,name=accounts,proto3" json:"accounts,omitempty"`                                                                  //Идентификаторы счетов.
	Error      *ErrorDetail             `protobuf:"bytes,7,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (x *SubscriptionResponse) Reset() {
	*x = SubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orders_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionResponse) ProtoMessage() {}

func (x *SubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orders_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionResponse.ProtoReflect.Descriptor instead.
func (*SubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{21}
}

func (x *SubscriptionResponse) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *SubscriptionResponse) GetStatus() ResultSubscriptionStatus {
	if x != nil {
		return x.Status
	}
	return ResultSubscriptionStatus_RESULT_SUBSCRIPTION_STATUS_UNSPECIFIED
}

func (x *SubscriptionResponse) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *SubscriptionResponse) GetAccounts() []string {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *SubscriptionResponse) GetError() *ErrorDetail {
	if x != nil {
		return x.Error
	}
	return nil
}

// Информация по заявкам
type OrderStateStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*OrderStateStreamResponse_OrderState_
	//	*OrderStateStreamResponse_Ping
	//	*OrderStateStreamResponse_Subscription
	Payload isOrderStateStreamResponse_Payload `protobuf_oneof:"payload"`
}

func (x *OrderStateStreamResponse) Reset() {
	*x = OrderStateStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orders_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderStateStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStateStreamResponse) ProtoMessage() {}

func (x *OrderStateStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orders_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStateStreamResponse.ProtoReflect.Descriptor instead.
func (*OrderStateStreamResponse) Descriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{22}
}

func (m *OrderStateStreamResponse) GetPayload() isOrderStateStreamResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *OrderStateStreamResponse) GetOrderState() *OrderStateStreamResponse_OrderState {
	if x, ok := x.GetPayload().(*OrderStateStreamResponse_OrderState_); ok {
		return x.OrderState
	}
	return nil
}

func (x *OrderStateStreamResponse) GetPing() *Ping {
	if x, ok := x.GetPayload().(*OrderStateStreamResponse_Ping); ok {
		return x.Ping
	}
	return nil
}

func (x *OrderStateStreamResponse) GetSubscription() *SubscriptionResponse {
	if x, ok := x.GetPayload().(*OrderStateStreamResponse_Subscription); ok {
		return x.Subscription
	}
	return nil
}

type isOrderStateStreamResponse_Payload interface {
	isOrderStateStreamResponse_Payload()
}

type OrderStateStreamResponse_OrderState_ struct {
	OrderState *OrderStateStreamResponse_OrderState `protobuf:"bytes,1,opt,name=order_state,json=orderState,proto3,oneof"` //Информация об исполнении торгового поручения.
}

type OrderStateStreamResponse_Ping struct {
	Ping *Ping `protobuf:"bytes,2,opt,name=ping,proto3,oneof"` //Проверка активности стрима.
}

type OrderStateStreamResponse_Subscription struct {
	Subscription *SubscriptionResponse `protobuf:"bytes,3,opt,name=subscription,proto3,oneof"` //Ответ на запрос на подписку.
}

func (*OrderStateStreamResponse_OrderState_) isOrderStateStreamResponse_Payload() {}

func (*OrderStateStreamResponse_Ping) isOrderStateStreamResponse_Payload() {}

func (*OrderStateStreamResponse_Subscription) isOrderStateStreamResponse_Payload() {}

type GetMaxLotsResponse_BuyLimitsView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuyMoneyAmount   *Quotation `protobuf:"bytes,1,opt,name=buy_money_amount,json=buyMoneyAmount,proto3" json:"buy_money_amount,omitempty"`          //Количество доступной валюты для покупки
	BuyMaxLots       int64      `protobuf:"varint,2,opt,name=buy_max_lots,json=buyMaxLots,proto3" json:"buy_max_lots,omitempty"`                     //Максимальное доступное количество лотов для покупки
	BuyMaxMarketLots int64      `protobuf:"varint,3,opt,name=buy_max_market_lots,json=buyMaxMarketLots,proto3" json:"buy_max_market_lots,omitempty"` //Максимальное доступное количество лотов для покупки для заявки по рыночной цене на текущий момент
}

func (x *GetMaxLotsResponse_BuyLimitsView) Reset() {
	*x = GetMaxLotsResponse_BuyLimitsView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orders_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMaxLotsResponse_BuyLimitsView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMaxLotsResponse_BuyLimitsView) ProtoMessage() {}

func (x *GetMaxLotsResponse_BuyLimitsView) ProtoReflect() protoreflect.Message {
	mi := &file_orders_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMaxLotsResponse_BuyLimitsView.ProtoReflect.Descriptor instead.
func (*GetMaxLotsResponse_BuyLimitsView) Descriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{17, 0}
}

func (x *GetMaxLotsResponse_BuyLimitsView) GetBuyMoneyAmount() *Quotation {
	if x != nil {
		return x.BuyMoneyAmount
	}
	return nil
}

func (x *GetMaxLotsResponse_BuyLimitsView) GetBuyMaxLots() int64 {
	if x != nil {
		return x.BuyMaxLots
	}
	return 0
}

func (x *GetMaxLotsResponse_BuyLimitsView) GetBuyMaxMarketLots() int64 {
	if x != nil {
		return x.BuyMaxMarketLots
	}
	return 0
}

type GetMaxLotsResponse_SellLimitsView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SellMaxLots int64 `protobuf:"varint,1,opt,name=sell_max_lots,json=sellMaxLots,proto3" json:"sell_max_lots,omitempty"` //Максимальное доступное количество лотов для продажи
}

func (x *GetMaxLotsResponse_SellLimitsView) Reset() {
	*x = GetMaxLotsResponse_SellLimitsView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orders_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMaxLotsResponse_SellLimitsView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMaxLotsResponse_SellLimitsView) ProtoMessage() {}

func (x *GetMaxLotsResponse_SellLimitsView) ProtoReflect() protoreflect.Message {
	mi := &file_orders_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMaxLotsResponse_SellLimitsView.ProtoReflect.Descriptor instead.
func (*GetMaxLotsResponse_SellLimitsView) Descriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{17, 1}
}

func (x *GetMaxLotsResponse_SellLimitsView) GetSellMaxLots() int64 {
	if x != nil {
		return x.SellMaxLots
	}
	return 0
}

type GetOrderPriceResponse_ExtraBond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AciValue              *MoneyValue `protobuf:"bytes,2,opt,name=aci_value,json=aciValue,proto3" json:"aci_value,omitempty"`                                          //Значение НКД (накопленного купонного дохода) на дату
	NominalConversionRate *Quotation  `protobuf:"bytes,3,opt,name=nominal_conversion_rate,json=nominalConversionRate,proto3" json:"nominal_conversion_rate,omitempty"` //Курс конвертации для замещающих облигаций
}

func (x *GetOrderPriceResponse_ExtraBond) Reset() {
	*x = GetOrderPriceResponse_ExtraBond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orders_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderPriceResponse_ExtraBond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderPriceResponse_ExtraBond) ProtoMessage() {}

func (x *GetOrderPriceResponse_ExtraBond) ProtoReflect() protoreflect.Message {
	mi := &file_orders_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderPriceResponse_ExtraBond.ProtoReflect.Descriptor instead.
func (*GetOrderPriceResponse_ExtraBond) Descriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{19, 0}
}

func (x *GetOrderPriceResponse_ExtraBond) GetAciValue() *MoneyValue {
	if x != nil {
		return x.AciValue
	}
	return nil
}

func (x *GetOrderPriceResponse_ExtraBond) GetNominalConversionRate() *Quotation {
	if x != nil {
		return x.NominalConversionRate
	}
	return nil
}

type GetOrderPriceResponse_ExtraFuture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitialMargin *MoneyValue `protobuf:"bytes,2,opt,name=initial_margin,json=initialMargin,proto3" json:"initial_margin,omitempty"` //Гарантийное обеспечение для фьючерса
}

func (x *GetOrderPriceResponse_ExtraFuture) Reset() {
	*x = GetOrderPriceResponse_ExtraFuture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orders_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderPriceResponse_ExtraFuture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderPriceResponse_ExtraFuture) ProtoMessage() {}

func (x *GetOrderPriceResponse_ExtraFuture) ProtoReflect() protoreflect.Message {
	mi := &file_orders_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderPriceResponse_ExtraFuture.ProtoReflect.Descriptor instead.
func (*GetOrderPriceResponse_ExtraFuture) Descriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{19, 1}
}

func (x *GetOrderPriceResponse_ExtraFuture) GetInitialMargin() *MoneyValue {
	if x != nil {
		return x.InitialMargin
	}
	return nil
}

// Заявка
type OrderStateStreamResponse_OrderState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId               string                                    `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                                                                                                    //Биржевой идентификатор заявки
	OrderRequestId        *string                                   `protobuf:"bytes,2,opt,name=order_request_id,json=orderRequestId,proto3,oneof" json:"order_request_id,omitempty"`                                                                                       //Идентификатор ключа идемпотентности, переданный клиентом, в формате UID. Максимальная длина 36 символов.
	ClientCode            string                                    `protobuf:"bytes,3,opt,name=client_code,json=clientCode,proto3" json:"client_code,omitempty"`                                                                                                           //Код клиента на бирже
	CreatedAt             *timestamppb.Timestamp                    `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                                                                                              //Дата создания заявки
	ExecutionReportStatus OrderExecutionReportStatus                `protobuf:"varint,5,opt,name=execution_report_status,json=executionReportStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.OrderExecutionReportStatus" json:"execution_report_status,omitempty"` //Статус заявки
	StatusInfo            *OrderStateStreamResponse_StatusCauseInfo `protobuf:"varint,6,opt,name=status_info,json=statusInfo,proto3,enum=tinkoff.public.invest.api.contract.v1.OrderStateStreamResponse_StatusCauseInfo,oneof" json:"status_info,omitempty"`                //Дополнительная информация по статусу
	Ticker                string                                    `protobuf:"bytes,7,opt,name=ticker,proto3" json:"ticker,omitempty"`                                                                                                                                     //Тикер инструмента
	ClassCode             string                                    `protobuf:"bytes,8,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`                                                                                                              //Класс-код (секция торгов)
	LotSize               int32                                     `protobuf:"varint,9,opt,name=lot_size,json=lotSize,proto3" json:"lot_size,omitempty"`                                                                                                                   //Лотность инструмента заявки
	Direction             OrderDirection                            `protobuf:"varint,10,opt,name=direction,proto3,enum=tinkoff.public.invest.api.contract.v1.OrderDirection" json:"direction,omitempty"`                                                                   //Направление заявки
	TimeInForce           TimeInForceType                           `protobuf:"varint,11,opt,name=time_in_force,json=timeInForce,proto3,enum=tinkoff.public.invest.api.contract.v1.TimeInForceType" json:"time_in_force,omitempty"`                                         //Алгоритм исполнения поручения
	OrderType             OrderType                                 `protobuf:"varint,12,opt,name=order_type,json=orderType,proto3,enum=tinkoff.public.invest.api.contract.v1.OrderType" json:"order_type,omitempty"`                                                       //Тип заявки
	AccountId             string                                    `protobuf:"bytes,13,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                                                                                             //Номер счета
	InitialOrderPrice     *MoneyValue                               `protobuf:"bytes,22,opt,name=initial_order_price,json=initialOrderPrice,proto3" json:"initial_order_price,omitempty"`                                                                                   //Начальная цена заявки
	OrderPrice            *MoneyValue                               `protobuf:"bytes,23,opt,name=order_price,json=orderPrice,proto3" json:"order_price,omitempty"`                                                                                                          //Цена выставления заявки
	Amount                *MoneyValue                               `protobuf:"bytes,24,opt,name=amount,proto3,oneof" json:"amount,omitempty"`                                                                                                                              //Предрассчитанная стоимость полной заявки
	ExecutedOrderPrice    *MoneyValue                               `protobuf:"bytes,25,opt,name=executed_order_price,json=executedOrderPrice,proto3" json:"executed_order_price,omitempty"`                                                                                //Исполненная средняя цена одного инструмента в заявке
	Currency              string                                    `protobuf:"bytes,26,opt,name=currency,proto3" json:"currency,omitempty"`                                                                                                                                //Валюта исполнения
	LotsRequested         int64                                     `protobuf:"varint,27,opt,name=lots_requested,json=lotsRequested,proto3" json:"lots_requested,omitempty"`                                                                                                //Запрошено лотов
	LotsExecuted          int64                                     `protobuf:"varint,28,opt,name=lots_executed,json=lotsExecuted,proto3" json:"lots_executed,omitempty"`                                                                                                   //Исполнено лотов
	LotsLeft              int64                                     `protobuf:"varint,29,opt,name=lots_left,json=lotsLeft,proto3" json:"lots_left,omitempty"`                                                                                                               //Число неисполненных лотов по заявке
	LotsCancelled         int64                                     `protobuf:"varint,30,opt,name=lots_cancelled,json=lotsCancelled,proto3" json:"lots_cancelled,omitempty"`                                                                                                //Отмененные лоты
	Marker                *OrderStateStreamResponse_MarkerType      `protobuf:"varint,31,opt,name=marker,proto3,enum=tinkoff.public.invest.api.contract.v1.OrderStateStreamResponse_MarkerType,oneof" json:"marker,omitempty"`                                              //Спецсимвол
	Trades                []*OrderTrade                             `protobuf:"bytes,33,rep,name=trades,proto3" json:"trades,omitempty"`                                                                                                                                    //	Список сделок
	CompletionTime        *timestamppb.Timestamp                    `protobuf:"bytes,35,opt,name=completion_time,json=completionTime,proto3" json:"completion_time,omitempty"`                                                                                              //Время исполнения заявки
	Exchange              string                                    `protobuf:"bytes,36,opt,name=exchange,proto3" json:"exchange,omitempty"`                                                                                                                                //Код биржи
	InstrumentUid         string                                    `protobuf:"bytes,41,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                                                                                                 //UID идентификатор инструмента
}

func (x *OrderStateStreamResponse_OrderState) Reset() {
	*x = OrderStateStreamResponse_OrderState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orders_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderStateStreamResponse_OrderState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStateStreamResponse_OrderState) ProtoMessage() {}

func (x *OrderStateStreamResponse_OrderState) ProtoReflect() protoreflect.Message {
	mi := &file_orders_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStateStreamResponse_OrderState.ProtoReflect.Descriptor instead.
func (*OrderStateStreamResponse_OrderState) Descriptor() ([]byte, []int) {
	return file_orders_proto_rawDescGZIP(), []int{22, 0}
}

func (x *OrderStateStreamResponse_OrderState) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OrderStateStreamResponse_OrderState) GetOrderRequestId() string {
	if x != nil && x.OrderRequestId != nil {
		return *x.OrderRequestId
	}
	return ""
}

func (x *OrderStateStreamResponse_OrderState) GetClientCode() string {
	if x != nil {
		return x.ClientCode
	}
	return ""
}

func (x *OrderStateStreamResponse_OrderState) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OrderStateStreamResponse_OrderState) GetExecutionReportStatus() OrderExecutionReportStatus {
	if x != nil {
		return x.ExecutionReportStatus
	}
	return OrderExecutionReportStatus_EXECUTION_REPORT_STATUS_UNSPECIFIED
}

func (x *OrderStateStreamResponse_OrderState) GetStatusInfo() OrderStateStreamResponse_StatusCauseInfo {
	if x != nil && x.StatusInfo != nil {
		return *x.StatusInfo
	}
	return OrderStateStreamResponse_CAUSE_UNSPECIFIED
}

func (x *OrderStateStreamResponse_OrderState) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *OrderStateStreamResponse_OrderState) GetClassCode() string {
	if x != nil {
		return x.ClassCode
	}
	return ""
}

func (x *OrderStateStreamResponse_OrderState) GetLotSize() int32 {
	if x != nil {
		return x.LotSize
	}
	return 0
}

func (x *OrderStateStreamResponse_OrderState) GetDirection() OrderDirection {
	if x != nil {
		return x.Direction
	}
	return OrderDirection_ORDER_DIRECTION_UNSPECIFIED
}

func (x *OrderStateStreamResponse_OrderState) GetTimeInForce() TimeInForceType {
	if x != nil {
		return x.TimeInForce
	}
	return TimeInForceType_TIME_IN_FORCE_UNSPECIFIED
}

func (x *OrderStateStreamResponse_OrderState) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_ORDER_TYPE_UNSPECIFIED
}

func (x *OrderStateStreamResponse_OrderState) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *OrderStateStreamResponse_OrderState) GetInitialOrderPrice() *MoneyValue {
	if x != nil {
		return x.InitialOrderPrice
	}
	return nil
}

func (x *OrderStateStreamResponse_OrderState) GetOrderPrice() *MoneyValue {
	if x != nil {
		return x.OrderPrice
	}
	return nil
}

func (x *OrderStateStreamResponse_OrderState) GetAmount() *MoneyValue {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *OrderStateStreamResponse_OrderState) GetExecutedOrderPrice() *MoneyValue {
	if x != nil {
		return x.ExecutedOrderPrice
	}
	return nil
}

func (x *OrderStateStreamResponse_OrderState) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *OrderStateStreamResponse_OrderState) GetLotsRequested() int64 {
	if x != nil {
		return x.LotsRequested
	}
	return 0
}

func (x *OrderStateStreamResponse_OrderState) GetLotsExecuted() int64 {
	if x != nil {
		return x.LotsExecuted
	}
	return 0
}

func (x *OrderStateStreamResponse_OrderState) GetLotsLeft() int64 {
	if x != nil {
		return x.LotsLeft
	}
	return 0
}

func (x *OrderStateStreamResponse_OrderState) GetLotsCancelled() int64 {
	if x != nil {
		return x.LotsCancelled
	}
	return 0
}

func (x *OrderStateStreamResponse_OrderState) GetMarker() OrderStateStreamResponse_MarkerType {
	if x != nil && x.Marker != nil {
		return *x.Marker
	}
	return OrderStateStreamResponse_MARKER_UNKNOWN
}

func (x *OrderStateStreamResponse_OrderState) GetTrades() []*OrderTrade {
	if x != nil {
		return x.Trades
	}
	return nil
}

func (x *OrderStateStreamResponse_OrderState) GetCompletionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletionTime
	}
	return nil
}

func (x *OrderStateStreamResponse_OrderState) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *OrderStateStreamResponse_OrderState) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

var File_orders_proto protoreflect.FileDescriptor

var file_orders_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x31, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xa0, 0x02, 0x0a, 0x14, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x57, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x04, 0x70, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x61, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xdd, 0x02, 0x0a, 0x0b,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x53, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x12, 0x49, 0x0a, 0x06, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x06, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x22, 0xc4, 0x01, 0x0a, 0x0a,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x64, 0x22, 0xf6, 0x04, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69, 0x67,
	0x69, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x58, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x54, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x0d, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x36, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66, 0x69, 0x67,
	0x69, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x90, 0x0b, 0x0a, 0x11,
	0x50, 0x6f, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x79, 0x0a, 0x17,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x15, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x74, 0x73, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x6c, 0x6f, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x6f, 0x74, 0x73, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x64, 0x12, 0x61, 0x0a, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x14, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x12, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x12,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x62,
	0x0a, 0x13, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x09, 0x61, 0x63, 0x69, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x61, 0x63, 0x69, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x12, 0x53, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x16, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x65, 0x0a, 0x16, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x50, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x65, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0xfe, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x10, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x85,
	0x05, 0x0a, 0x15, 0x50, 0x6f, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x73, 0x79, 0x6e,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x58, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x54,
	0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52, 0x09, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x88, 0x02, 0x0a, 0x16, 0x50, 0x6f, 0x73, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2d, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x7e, 0x0a, 0x17, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x41, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x15, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2b, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x22, 0x58, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xac, 0x01, 0x0a, 0x13,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x65, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xab, 0x01, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x36, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x5e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x22, 0xbe, 0x0b, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x79, 0x0a, 0x17, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x15,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x74, 0x73, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c,
	0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x6c, 0x6f, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x6f, 0x74, 0x73, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x64, 0x12, 0x61, 0x0a, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x14, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x12, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x67, 0x0a, 0x16, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x60, 0x0a, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x13, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x67,
	0x69, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x12, 0x53, 0x0a,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x35, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x16, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x4f, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x22, 0xcf, 0x01, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x47, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x41, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xe4, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x69,
	0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4b,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x0a, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x01, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x78, 0x4c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4b,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0xe5, 0x05, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x78,
	0x4c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x66, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x78, 0x4c, 0x6f, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x56, 0x69, 0x65, 0x77, 0x52, 0x09, 0x62, 0x75, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x12, 0x73, 0x0a, 0x11, 0x62, 0x75, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x78, 0x4c, 0x6f, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x0f, 0x62, 0x75, 0x79, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x69, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x78, 0x4c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x12, 0x76, 0x0a, 0x12, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x78, 0x4c, 0x6f, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x56, 0x69, 0x65, 0x77, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x1a, 0xbc, 0x01, 0x0a, 0x0d, 0x42, 0x75, 0x79,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x56, 0x69, 0x65, 0x77, 0x12, 0x5a, 0x0a, 0x10, 0x62, 0x75,
	0x79, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x62, 0x75, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x75, 0x79, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x75,
	0x79, 0x4d, 0x61, 0x78, 0x4c, 0x6f, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x62, 0x75, 0x79, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x62, 0x75, 0x79, 0x4d, 0x61, 0x78, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x74, 0x73, 0x1a, 0x34, 0x0a, 0x0e, 0x53, 0x65, 0x6c, 0x6c, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x56, 0x69, 0x65, 0x77, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65, 0x6c,
	0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x78, 0x4c, 0x6f, 0x74, 0x73, 0x22, 0x93, 0x02,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x53, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x22, 0xae, 0x09, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a,
	0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x63,
	0x0a, 0x14, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x6f, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x62, 0x0a, 0x13, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x69,
	0x0a, 0x17, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x15, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x62, 0x12, 0x60, 0x0a, 0x12, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x0f, 0x64,
	0x65, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x64, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x42,
	0x6f, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x42, 0x6f, 0x6e, 0x64,
	0x12, 0x6d, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x48, 0x00, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x1a,
	0xc5, 0x01, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x42, 0x6f, 0x6e, 0x64, 0x12, 0x4e, 0x0a,
	0x09, 0x61, 0x63, 0x69, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x61, 0x63, 0x69, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x68, 0x0a,
	0x17, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x15, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x1a, 0x67, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x12, 0x58, 0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x42, 0x12, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x22, 0x7c, 0x0a, 0x17, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x11, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x22, 0xa2, 0x02, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x4d,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xab, 0x13, 0x0a, 0x18, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x61, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xa6, 0x0d, 0x0a, 0x0a, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x79,
	0x0a, 0x17, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x41, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x15, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x75, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4f,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x61, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x01, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x74, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x6f, 0x74, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x53, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x02, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x63, 0x0a, 0x14, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x6c,
	0x6f, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x6f, 0x74, 0x73, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x74, 0x73, 0x5f,
	0x6c, 0x65, 0x66, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x74, 0x73,
	0x4c, 0x65, 0x66, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x74, 0x73, 0x5f, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x6f,
	0x74, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x67, 0x0a, 0x06, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48, 0x03, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x21,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12,
	0x43, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x72, 0x22, 0xaf, 0x01, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x52, 0x5f,
	0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x41, 0x52, 0x4b,
	0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x52,
	0x4b, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x50, 0x45, 0x52, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4d,
	0x41, 0x52, 0x4b, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x10, 0x04, 0x12, 0x10,
	0x0a, 0x0c, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x52, 0x5f, 0x54, 0x4b, 0x42, 0x4e, 0x4d, 0x10, 0x05,
	0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54,
	0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x50, 0x45,
	0x43, 0x4d, 0x4d, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x52, 0x5f,
	0x50, 0x4f, 0x10, 0x08, 0x22, 0x93, 0x02, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x61, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x55, 0x53,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1d, 0x0a, 0x19, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c,
	0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x0f, 0x12, 0x1f,
	0x0a, 0x1b, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45,
	0x44, 0x5f, 0x42, 0x59, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12,
	0x27, 0x0a, 0x23, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c,
	0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x41, 0x55, 0x53,
	0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x43,
	0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x1c, 0x0a,
	0x18, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f,
	0x42, 0x59, 0x5f, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x43,
	0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x59,
	0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x43,
	0x41, 0x55, 0x53, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x42,
	0x59, 0x5f, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x10, 0x06, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2a, 0x64, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x59, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x02, 0x2a, 0x6e, 0x0a, 0x09, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10,
	0x02, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x45, 0x53, 0x54, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x03, 0x2a, 0x80, 0x02, 0x0a, 0x1a,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x58,
	0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46,
	0x49, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x45,
	0x57, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50,
	0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x46, 0x49, 0x4c, 0x4c, 0x10, 0x05, 0x2a, 0x88,
	0x01, 0x0a, 0x0f, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x4f,
	0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x52,
	0x43, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x41,
	0x4e, 0x44, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x5f,
	0x4f, 0x52, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x03, 0x32, 0xb9, 0x02, 0x0a, 0x13, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x89, 0x01, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x3a, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x95, 0x01,
	0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x3e, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xbf, 0x08, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7e, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x37, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x3c, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x73, 0x79, 0x6e,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x39, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x3b, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x7e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x37, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x84, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x3a, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x78, 0x4c, 0x6f, 0x74, 0x73, 0x12, 0x38, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x78, 0x4c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x39, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x78, 0x4c, 0x6f,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x61, 0x0a, 0x1c, 0x72, 0x75, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x69, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x0c, 0x2e, 0x2f, 0x3b, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x61, 0x70, 0x69, 0xa2, 0x02, 0x05, 0x54, 0x49, 0x41, 0x50, 0x49, 0xaa,
	0x02, 0x14, 0x54, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x41, 0x70, 0x69, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x11, 0x54, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x5c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x5c, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_orders_proto_rawDescOnce sync.Once
	file_orders_proto_rawDescData = file_orders_proto_rawDesc
)

func file_orders_proto_rawDescGZIP() []byte {
	file_orders_proto_rawDescOnce.Do(func() {
		file_orders_proto_rawDescData = protoimpl.X.CompressGZIP(file_orders_proto_rawDescData)
	})
	return file_orders_proto_rawDescData
}

var file_orders_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_orders_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_orders_proto_goTypes = []interface{}{
	(OrderDirection)(0),                           // 0: tinkoff.public.invest.api.contract.v1.OrderDirection
	(OrderType)(0),                                // 1: tinkoff.public.invest.api.contract.v1.OrderType
	(OrderExecutionReportStatus)(0),               // 2: tinkoff.public.invest.api.contract.v1.OrderExecutionReportStatus
	(TimeInForceType)(0),                          // 3: tinkoff.public.invest.api.contract.v1.TimeInForceType
	(OrderStateStreamResponse_MarkerType)(0),      // 4: tinkoff.public.invest.api.contract.v1.OrderStateStreamResponse.MarkerType
	(OrderStateStreamResponse_StatusCauseInfo)(0), // 5: tinkoff.public.invest.api.contract.v1.OrderStateStreamResponse.StatusCauseInfo
	(*TradesStreamRequest)(nil),                   // 6: tinkoff.public.invest.api.contract.v1.TradesStreamRequest
	(*TradesStreamResponse)(nil),                  // 7: tinkoff.public.invest.api.contract.v1.TradesStreamResponse
	(*OrderTrades)(nil),                           // 8: tinkoff.public.invest.api.contract.v1.OrderTrades
	(*OrderTrade)(nil),                            // 9: tinkoff.public.invest.api.contract.v1.OrderTrade
	(*PostOrderRequest)(nil),                      // 10: tinkoff.public.invest.api.contract.v1.PostOrderRequest
	(*PostOrderResponse)(nil),                     // 11: tinkoff.public.invest.api.contract.v1.PostOrderResponse
	(*PostOrderAsyncRequest)(nil),                 // 12: tinkoff.public.invest.api.contract.v1.PostOrderAsyncRequest
	(*PostOrderAsyncResponse)(nil),                // 13: tinkoff.public.invest.api.contract.v1.PostOrderAsyncResponse
	(*CancelOrderRequest)(nil),                    // 14: tinkoff.public.invest.api.contract.v1.CancelOrderRequest
	(*CancelOrderResponse)(nil),                   // 15: tinkoff.public.invest.api.contract.v1.CancelOrderResponse
	(*GetOrderStateRequest)(nil),                  // 16: tinkoff.public.invest.api.contract.v1.GetOrderStateRequest
	(*GetOrdersRequest)(nil),                      // 17: tinkoff.public.invest.api.contract.v1.GetOrdersRequest
	(*GetOrdersResponse)(nil),                     // 18: tinkoff.public.invest.api.contract.v1.GetOrdersResponse
	(*OrderState)(nil),                            // 19: tinkoff.public.invest.api.contract.v1.OrderState
	(*OrderStage)(nil),                            // 20: tinkoff.public.invest.api.contract.v1.OrderStage
	(*ReplaceOrderRequest)(nil),                   // 21: tinkoff.public.invest.api.contract.v1.ReplaceOrderRequest
	(*GetMaxLotsRequest)(nil),                     // 22: tinkoff.public.invest.api.contract.v1.GetMaxLotsRequest
	(*GetMaxLotsResponse)(nil),                    // 23: tinkoff.public.invest.api.contract.v1.GetMaxLotsResponse
	(*GetOrderPriceRequest)(nil),                  // 24: tinkoff.public.invest.api.contract.v1.GetOrderPriceRequest
	(*GetOrderPriceResponse)(nil),                 // 25: tinkoff.public.invest.api.contract.v1.GetOrderPriceResponse
	(*OrderStateStreamRequest)(nil),               // 26: tinkoff.public.invest.api.contract.v1.OrderStateStreamRequest
	(*SubscriptionResponse)(nil),                  // 27: tinkoff.public.invest.api.contract.v1.SubscriptionResponse
	(*OrderStateStreamResponse)(nil),              // 28: tinkoff.public.invest.api.contract.v1.OrderStateStreamResponse
	(*GetMaxLotsResponse_BuyLimitsView)(nil),      // 29: tinkoff.public.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView
	(*GetMaxLotsResponse_SellLimitsView)(nil),     // 30: tinkoff.public.invest.api.contract.v1.GetMaxLotsResponse.SellLimitsView
	(*GetOrderPriceResponse_ExtraBond)(nil),       // 31: tinkoff.public.invest.api.contract.v1.GetOrderPriceResponse.ExtraBond
	(*GetOrderPriceResponse_ExtraFuture)(nil),     // 32: tinkoff.public.invest.api.contract.v1.GetOrderPriceResponse.ExtraFuture
	(*OrderStateStreamResponse_OrderState)(nil),   // 33: tinkoff.public.invest.api.contract.v1.OrderStateStreamResponse.OrderState
	(*Ping)(nil),                                  // 34: tinkoff.public.invest.api.contract.v1.Ping
	(*timestamppb.Timestamp)(nil),                 // 35: google.protobuf.Timestamp
	(*Quotation)(nil),                             // 36: tinkoff.public.invest.api.contract.v1.Quotation
	(PriceType)(0),                                // 37: tinkoff.public.invest.api.contract.v1.PriceType
	(*MoneyValue)(nil),                            // 38: tinkoff.public.invest.api.contract.v1.MoneyValue
	(*ResponseMetadata)(nil),                      // 39: tinkoff.public.invest.api.contract.v1.ResponseMetadata
	(ResultSubscriptionStatus)(0),                 // 40: tinkoff.public.invest.api.contract.v1.ResultSubscriptionStatus
	(*ErrorDetail)(nil),                           // 41: tinkoff.public.invest.api.contract.v1.ErrorDetail
}
var file_orders_proto_depIdxs = []int32{
	8,  // 0: tinkoff.public.invest.api.contract.v1.TradesStreamResponse.order_trades:type_name -> tinkoff.public.invest.api.contract.v1.OrderTrades
	34, // 1: tinkoff.public.invest.api.contract.v1.TradesStreamResponse.ping:type_name -> tinkoff.public.invest.api.contract.v1.Ping
	27, // 2: tinkoff.public.invest.api.contract.v1.TradesStreamResponse.subscription:type_name -> tinkoff.public.invest.api.contract.v1.SubscriptionResponse
	35, // 3: tinkoff.public.invest.api.contract.v1.OrderTrades.created_at:type_name -> google.protobuf.Timestamp
	0,  // 4: tinkoff.public.invest.api.contract.v1.OrderTrades.direction:type_name -> tinkoff.public.invest.api.contract.v1.OrderDirection
	9,  // 5: tinkoff.public.invest.api.contract.v1.OrderTrades.trades:type_name -> tinkoff.public.invest.api.contract.v1.OrderTrade
	35, // 6: tinkoff.public.invest.api.contract.v1.OrderTrade.date_time:type_name -> google.protobuf.Timestamp
	36, // 7: tinkoff.public.invest.api.contract.v1.OrderTrade.price:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	36, // 8: tinkoff.public.invest.api.contract.v1.PostOrderRequest.price:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	0,  // 9: tinkoff.public.invest.api.contract.v1.PostOrderRequest.direction:type_name -> tinkoff.public.invest.api.contract.v1.OrderDirection
	1,  // 10: tinkoff.public.invest.api.contract.v1.PostOrderRequest.order_type:type_name -> tinkoff.public.invest.api.contract.v1.OrderType
	3,  // 11: tinkoff.public.invest.api.contract.v1.PostOrderRequest.time_in_force:type_name -> tinkoff.public.invest.api.contract.v1.TimeInForceType
	37, // 12: tinkoff.public.invest.api.contract.v1.PostOrderRequest.price_type:type_name -> tinkoff.public.invest.api.contract.v1.PriceType
	2,  // 13: tinkoff.public.invest.api.contract.v1.PostOrderResponse.execution_report_status:type_name -> tinkoff.public.invest.api.contract.v1.OrderExecutionReportStatus
	38, // 14: tinkoff.public.invest.api.contract.v1.PostOrderResponse.initial_order_price:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	38, // 15: tinkoff.public.invest.api.contract.v1.PostOrderResponse.executed_order_price:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	38, // 16: tinkoff.public.invest.api.contract.v1.PostOrderResponse.total_order_amount:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	38, // 17: tinkoff.public.invest.api.contract.v1.PostOrderResponse.initial_commission:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	38, // 18: tinkoff.public.invest.api.contract.v1.PostOrderResponse.executed_commission:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	38, // 19: tinkoff.public.invest.api.contract.v1.PostOrderResponse.aci_value:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	0,  // 20: tinkoff.public.invest.api.contract.v1.PostOrderResponse.direction:type_name -> tinkoff.public.invest.api.contract.v1.OrderDirection
	38, // 21: tinkoff.public.invest.api.contract.v1.PostOrderResponse.initial_security_price:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	1,  // 22: tinkoff.public.invest.api.contract.v1.PostOrderResponse.order_type:type_name -> tinkoff.public.invest.api.contract.v1.OrderType
	36, // 23: tinkoff.public.invest.api.contract.v1.PostOrderResponse.initial_order_price_pt:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	39, // 24: tinkoff.public.invest.api.contract.v1.PostOrderResponse.response_metadata:type_name -> tinkoff.public.invest.api.contract.v1.ResponseMetadata
	36, // 25: tinkoff.public.invest.api.contract.v1.PostOrderAsyncRequest.price:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	0,  // 26: tinkoff.public.invest.api.contract.v1.PostOrderAsyncRequest.direction:type_name -> tinkoff.public.invest.api.contract.v1.OrderDirection
	1,  // 27: tinkoff.public.invest.api.contract.v1.PostOrderAsyncRequest.order_type:type_name -> tinkoff.public.invest.api.contract.v1.OrderType
	3,  // 28: tinkoff.public.invest.api.contract.v1.PostOrderAsyncRequest.time_in_force:type_name -> tinkoff.public.invest.api.contract.v1.TimeInForceType
	37, // 29: tinkoff.public.invest.api.contract.v1.PostOrderAsyncRequest.price_type:type_name -> tinkoff.public.invest.api.contract.v1.PriceType
	2,  // 30: tinkoff.public.invest.api.contract.v1.PostOrderAsyncResponse.execution_report_status:type_name -> tinkoff.public.invest.api.contract.v1.OrderExecutionReportStatus
	35, // 31: tinkoff.public.invest.api.contract.v1.CancelOrderResponse.time:type_name -> google.protobuf.Timestamp
	39, // 32: tinkoff.public.invest.api.contract.v1.CancelOrderResponse.response_metadata:type_name -> tinkoff.public.invest.api.contract.v1.ResponseMetadata
	37, // 33: tinkoff.public.invest.api.contract.v1.GetOrderStateRequest.price_type:type_name -> tinkoff.public.invest.api.contract.v1.PriceType
	19, // 34: tinkoff.public.invest.api.contract.v1.GetOrdersResponse.orders:type_name -> tinkoff.public.invest.api.contract.v1.OrderState
	2,  // 35: tinkoff.public.invest.api.contract.v1.OrderState.execution_report_status:type_name -> tinkoff.public.invest.api.contract.v1.OrderExecutionReportStatus
	38, // 36: tinkoff.public.invest.api.contract.v1.OrderState.initial_order_price:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	38, // 37: tinkoff.public.invest.api.contract.v1.OrderState.executed_order_price:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	38, // 38: tinkoff.public.invest.api.contract.v1.OrderState.total_order_amount:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	38, // 39: tinkoff.public.invest.api.contract.v1.OrderState.average_position_price:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	38, // 40: tinkoff.public.invest.api.contract.v1.OrderState.initial_commission:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	38, // 41: tinkoff.public.invest.api.contract.v1.OrderState.executed_commission:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	0,  // 42: tinkoff.public.invest.api.contract.v1.OrderState.direction:type_name -> tinkoff.public.invest.api.contract.v1.OrderDirection
	38, // 43: tinkoff.public.invest.api.contract.v1.OrderState.initial_security_price:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	20, // 44: tinkoff.public.invest.api.contract.v1.OrderState.stages:type_name -> tinkoff.public.invest.api.contract.v1.OrderStage
	38, // 45: tinkoff.public.invest.api.contract.v1.OrderState.service_commission:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	1,  // 46: tinkoff.public.invest.api.contract.v1.OrderState.order_type:type_name -> tinkoff.public.invest.api.contract.v1.OrderType
	35, // 47: tinkoff.public.invest.api.contract.v1.OrderState.order_date:type_name -> google.protobuf.Timestamp
	38, // 48: tinkoff.public.invest.api.contract.v1.OrderStage.price:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	35, // 49: tinkoff.public.invest.api.contract.v1.OrderStage.execution_time:type_name -> google.protobuf.Timestamp
	36, // 50: tinkoff.public.invest.api.contract.v1.ReplaceOrderRequest.price:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	37, // 51: tinkoff.public.invest.api.contract.v1.ReplaceOrderRequest.price_type:type_name -> tinkoff.public.invest.api.contract.v1.PriceType
	36, // 52: tinkoff.public.invest.api.contract.v1.GetMaxLotsRequest.price:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	29, // 53: tinkoff.public.invest.api.contract.v1.GetMaxLotsResponse.buy_limits:type_name -> tinkoff.public.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView
	29, // 54: tinkoff.public.invest.api.contract.v1.GetMaxLotsResponse.buy_margin_limits:type_name -> tinkoff.public.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView
	30, // 55: tinkoff.public.invest.api.contract.v1.GetMaxLotsResponse.sell_limits:type_name -> tinkoff.public.invest.api.contract.v1.GetMaxLotsResponse.SellLimitsView
	30, // 56: tinkoff.public.invest.api.contract.v1.GetMaxLotsResponse.sell_margin_limits:type_name -> tinkoff.public.invest.api.contract.v1.GetMaxLotsResponse.SellLimitsView
	36, // 57: tinkoff.public.invest.api.contract.v1.GetOrderPriceRequest.price:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	0,  // 58: tinkoff.public.invest.api.contract.v1.GetOrderPriceRequest.direction:type_name -> tinkoff.public.invest.api.contract.v1.OrderDirection
	38, // 59: tinkoff.public.invest.api.contract.v1.GetOrderPriceResponse.total_order_amount:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	38, // 60: tinkoff.public.invest.api.contract.v1.GetOrderPriceResponse.initial_order_amount:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	38, // 61: tinkoff.public.invest.api.contract.v1.GetOrderPriceResponse.executed_commission:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	38, // 62: tinkoff.public.invest.api.contract.v1.GetOrderPriceResponse.executed_commission_rub:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	38, // 63: tinkoff.public.invest.api.contract.v1.GetOrderPriceResponse.service_commission:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	38, // 64: tinkoff.public.invest.api.contract.v1.GetOrderPriceResponse.deal_commission:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	31, // 65: tinkoff.public.invest.api.contract.v1.GetOrderPriceResponse.extra_bond:type_name -> tinkoff.public.invest.api.contract.v1.GetOrderPriceResponse.ExtraBond
	32, // 66: tinkoff.public.invest.api.contract.v1.GetOrderPriceResponse.extra_future:type_name -> tinkoff.public.invest.api.contract.v1.GetOrderPriceResponse.ExtraFuture
	40, // 67: tinkoff.public.invest.api.contract.v1.SubscriptionResponse.status:type_name -> tinkoff.public.invest.api.contract.v1.ResultSubscriptionStatus
	41, // 68: tinkoff.public.invest.api.contract.v1.SubscriptionResponse.error:type_name -> tinkoff.public.invest.api.contract.v1.ErrorDetail
	33, // 69: tinkoff.public.invest.api.contract.v1.OrderStateStreamResponse.order_state:type_name -> tinkoff.public.invest.api.contract.v1.OrderStateStreamResponse.OrderState
	34, // 70: tinkoff.public.invest.api.contract.v1.OrderStateStreamResponse.ping:type_name -> tinkoff.public.invest.api.contract.v1.Ping
	27, // 71: tinkoff.public.invest.api.contract.v1.OrderStateStreamResponse.subscription:type_name -> tinkoff.public.invest.api.contract.v1.SubscriptionResponse
	36, // 72: tinkoff.public.invest.api.contract.v1.GetMaxLotsResponse.BuyLimitsView.buy_money_amount:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	38, // 73: tinkoff.public.invest.api.contract.v1.GetOrderPriceResponse.ExtraBond.aci_value:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	36, // 74: tinkoff.public.invest.api.contract.v1.GetOrderPriceResponse.ExtraBond.nominal_conversion_rate:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	38, // 75: tinkoff.public.invest.api.contract.v1.GetOrderPriceResponse.ExtraFuture.initial_margin:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	35, // 76: tinkoff.public.invest.api.contract.v1.OrderStateStreamResponse.OrderState.created_at:type_name -> google.protobuf.Timestamp
	2,  // 77: tinkoff.public.invest.api.contract.v1.OrderStateStreamResponse.OrderState.execution_report_status:type_name -> tinkoff.public.invest.api.contract.v1.OrderExecutionReportStatus
	5,  // 78: tinkoff.public.invest.api.contract.v1.OrderStateStreamResponse.OrderState.status_info:type_name -> tinkoff.public.invest.api.contract.v1.OrderStateStreamResponse.StatusCauseInfo
	0,  // 79: tinkoff.public.invest.api.contract.v1.OrderStateStreamResponse.OrderState.direction:type_name -> tinkoff.public.invest.api.contract.v1.OrderDirection
	3,  // 80: tinkoff.public.invest.api.contract.v1.OrderStateStreamResponse.OrderState.time_in_force:type_name -> tinkoff.public.invest.api.contract.v1.TimeInForceType
	1,  // 81: tinkoff.public.invest.api.contract.v1.OrderStateStreamResponse.OrderState.order_type:type_name -> tinkoff.public.invest.api.contract.v1.OrderType
	38, // 82: tinkoff.public.invest.api.contract.v1.OrderStateStreamResponse.OrderState.initial_order_price:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	38, // 83: tinkoff.public.invest.api.contract.v1.OrderStateStreamResponse.OrderState.order_price:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	38, // 84: tinkoff.public.invest.api.contract.v1.OrderStateStreamResponse.OrderState.amount:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	38, // 85: tinkoff.public.invest.api.contract.v1.OrderStateStreamResponse.OrderState.executed_order_price:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	4,  // 86: tinkoff.public.invest.api.contract.v1.OrderStateStreamResponse.OrderState.marker:type_name -> tinkoff.public.invest.api.contract.v1.OrderStateStreamResponse.MarkerType
	9,  // 87: tinkoff.public.invest.api.contract.v1.OrderStateStreamResponse.OrderState.trades:type_name -> tinkoff.public.invest.api.contract.v1.OrderTrade
	35, // 88: tinkoff.public.invest.api.contract.v1.OrderStateStreamResponse.OrderState.completion_time:type_name -> google.protobuf.Timestamp
	6,  // 89: tinkoff.public.invest.api.contract.v1.OrdersStreamService.TradesStream:input_type -> tinkoff.public.invest.api.contract.v1.TradesStreamRequest
	26, // 90: tinkoff.public.invest.api.contract.v1.OrdersStreamService.OrderStateStream:input_type -> tinkoff.public.invest.api.contract.v1.OrderStateStreamRequest
	10, // 91: tinkoff.public.invest.api.contract.v1.OrdersService.PostOrder:input_type -> tinkoff.public.invest.api.contract.v1.PostOrderRequest
	12, // 92: tinkoff.public.invest.api.contract.v1.OrdersService.PostOrderAsync:input_type -> tinkoff.public.invest.api.contract.v1.PostOrderAsyncRequest
	14, // 93: tinkoff.public.invest.api.contract.v1.OrdersService.CancelOrder:input_type -> tinkoff.public.invest.api.contract.v1.CancelOrderRequest
	16, // 94: tinkoff.public.invest.api.contract.v1.OrdersService.GetOrderState:input_type -> tinkoff.public.invest.api.contract.v1.GetOrderStateRequest
	17, // 95: tinkoff.public.invest.api.contract.v1.OrdersService.GetOrders:input_type -> tinkoff.public.invest.api.contract.v1.GetOrdersRequest
	21, // 96: tinkoff.public.invest.api.contract.v1.OrdersService.ReplaceOrder:input_type -> tinkoff.public.invest.api.contract.v1.ReplaceOrderRequest
	22, // 97: tinkoff.public.invest.api.contract.v1.OrdersService.GetMaxLots:input_type -> tinkoff.public.invest.api.contract.v1.GetMaxLotsRequest
	24, // 98: tinkoff.public.invest.api.contract.v1.OrdersService.GetOrderPrice:input_type -> tinkoff.public.invest.api.contract.v1.GetOrderPriceRequest
	7,  // 99: tinkoff.public.invest.api.contract.v1.OrdersStreamService.TradesStream:output_type -> tinkoff.public.invest.api.contract.v1.TradesStreamResponse
	28, // 100: tinkoff.public.invest.api.contract.v1.OrdersStreamService.OrderStateStream:output_type -> tinkoff.public.invest.api.contract.v1.OrderStateStreamResponse
	11, // 101: tinkoff.public.invest.api.contract.v1.OrdersService.PostOrder:output_type -> tinkoff.public.invest.api.contract.v1.PostOrderResponse
	13, // 102: tinkoff.public.invest.api.contract.v1.OrdersService.PostOrderAsync:output_type -> tinkoff.public.invest.api.contract.v1.PostOrderAsyncResponse
	15, // 103: tinkoff.public.invest.api.contract.v1.OrdersService.CancelOrder:output_type -> tinkoff.public.invest.api.contract.v1.CancelOrderResponse
	19, // 104: tinkoff.public.invest.api.contract.v1.OrdersService.GetOrderState:output_type -> tinkoff.public.invest.api.contract.v1.OrderState
	18, // 105: tinkoff.public.invest.api.contract.v1.OrdersService.GetOrders:output_type -> tinkoff.public.invest.api.contract.v1.GetOrdersResponse
	11, // 106: tinkoff.public.invest.api.contract.v1.OrdersService.ReplaceOrder:output_type -> tinkoff.public.invest.api.contract.v1.PostOrderResponse
	23, // 107: tinkoff.public.invest.api.contract.v1.OrdersService.GetMaxLots:output_type -> tinkoff.public.invest.api.contract.v1.GetMaxLotsResponse
	25, // 108: tinkoff.public.invest.api.contract.v1.OrdersService.GetOrderPrice:output_type -> tinkoff.public.invest.api.contract.v1.GetOrderPriceResponse
	99, // [99:109] is the sub-list for method output_type
	89, // [89:99] is the sub-list for method input_type
	89, // [89:89] is the sub-list for extension type_name
	89, // [89:89] is the sub-list for extension extendee
	0,  // [0:89] is the sub-list for field type_name
}

func init() { file_orders_proto_init() }
func file_orders_proto_init() {
	if File_orders_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_orders_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orders_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orders_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderTrades); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orders_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderTrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orders_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orders_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orders_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostOrderAsyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orders_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostOrderAsyncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orders_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orders_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orders_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orders_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orders_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orders_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orders_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orders_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orders_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMaxLotsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orders_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMaxLotsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orders_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orders_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderPriceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orders_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderStateStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orders_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orders_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderStateStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orders_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMaxLotsResponse_BuyLimitsView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orders_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMaxLotsResponse_SellLimitsView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orders_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderPriceResponse_ExtraBond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orders_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderPriceResponse_ExtraFuture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orders_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderStateStreamResponse_OrderState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_orders_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*TradesStreamResponse_OrderTrades)(nil),
		(*TradesStreamResponse_Ping)(nil),
		(*TradesStreamResponse_Subscription)(nil),
	}
	file_orders_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_orders_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_orders_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_orders_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_orders_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_orders_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*GetOrderPriceResponse_ExtraBond_)(nil),
		(*GetOrderPriceResponse_ExtraFuture_)(nil),
	}
	file_orders_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_orders_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_orders_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*OrderStateStreamResponse_OrderState_)(nil),
		(*OrderStateStreamResponse_Ping)(nil),
		(*OrderStateStreamResponse_Subscription)(nil),
	}
	file_orders_proto_msgTypes[27].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_orders_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_orders_proto_goTypes,
		DependencyIndexes: file_orders_proto_depIdxs,
		EnumInfos:         file_orders_proto_enumTypes,
		MessageInfos:      file_orders_proto_msgTypes,
	}.Build()
	File_orders_proto = out.File
	file_orders_proto_rawDesc = nil
	file_orders_proto_goTypes = nil
	file_orders_proto_depIdxs = nil
}
