// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.26.1
// source: stoporders.proto

package investapi

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Направление сделки стоп-заявки.
type StopOrderDirection int32

const (
	StopOrderDirection_STOP_ORDER_DIRECTION_UNSPECIFIED StopOrderDirection = 0 //Значение не указано
	StopOrderDirection_STOP_ORDER_DIRECTION_BUY         StopOrderDirection = 1 //Покупка
	StopOrderDirection_STOP_ORDER_DIRECTION_SELL        StopOrderDirection = 2 //Продажа
)

// Enum value maps for StopOrderDirection.
var (
	StopOrderDirection_name = map[int32]string{
		0: "STOP_ORDER_DIRECTION_UNSPECIFIED",
		1: "STOP_ORDER_DIRECTION_BUY",
		2: "STOP_ORDER_DIRECTION_SELL",
	}
	StopOrderDirection_value = map[string]int32{
		"STOP_ORDER_DIRECTION_UNSPECIFIED": 0,
		"STOP_ORDER_DIRECTION_BUY":         1,
		"STOP_ORDER_DIRECTION_SELL":        2,
	}
)

func (x StopOrderDirection) Enum() *StopOrderDirection {
	p := new(StopOrderDirection)
	*p = x
	return p
}

func (x StopOrderDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StopOrderDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_stoporders_proto_enumTypes[0].Descriptor()
}

func (StopOrderDirection) Type() protoreflect.EnumType {
	return &file_stoporders_proto_enumTypes[0]
}

func (x StopOrderDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StopOrderDirection.Descriptor instead.
func (StopOrderDirection) EnumDescriptor() ([]byte, []int) {
	return file_stoporders_proto_rawDescGZIP(), []int{0}
}

// Тип экспирации стоп-заявке.
type StopOrderExpirationType int32

const (
	StopOrderExpirationType_STOP_ORDER_EXPIRATION_TYPE_UNSPECIFIED      StopOrderExpirationType = 0 //Значение не указано
	StopOrderExpirationType_STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_CANCEL StopOrderExpirationType = 1 //Действительно до отмены
	StopOrderExpirationType_STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_DATE   StopOrderExpirationType = 2 //Действительно до даты снятия
)

// Enum value maps for StopOrderExpirationType.
var (
	StopOrderExpirationType_name = map[int32]string{
		0: "STOP_ORDER_EXPIRATION_TYPE_UNSPECIFIED",
		1: "STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_CANCEL",
		2: "STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_DATE",
	}
	StopOrderExpirationType_value = map[string]int32{
		"STOP_ORDER_EXPIRATION_TYPE_UNSPECIFIED":      0,
		"STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_CANCEL": 1,
		"STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_DATE":   2,
	}
)

func (x StopOrderExpirationType) Enum() *StopOrderExpirationType {
	p := new(StopOrderExpirationType)
	*p = x
	return p
}

func (x StopOrderExpirationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StopOrderExpirationType) Descriptor() protoreflect.EnumDescriptor {
	return file_stoporders_proto_enumTypes[1].Descriptor()
}

func (StopOrderExpirationType) Type() protoreflect.EnumType {
	return &file_stoporders_proto_enumTypes[1]
}

func (x StopOrderExpirationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StopOrderExpirationType.Descriptor instead.
func (StopOrderExpirationType) EnumDescriptor() ([]byte, []int) {
	return file_stoporders_proto_rawDescGZIP(), []int{1}
}

// Тип стоп-заявки.
type StopOrderType int32

const (
	StopOrderType_STOP_ORDER_TYPE_UNSPECIFIED StopOrderType = 0 //Значение не указано
	StopOrderType_STOP_ORDER_TYPE_TAKE_PROFIT StopOrderType = 1 //Take-profit заявка
	StopOrderType_STOP_ORDER_TYPE_STOP_LOSS   StopOrderType = 2 //Stop-loss заявка
	StopOrderType_STOP_ORDER_TYPE_STOP_LIMIT  StopOrderType = 3 //Stop-limit заявка
)

// Enum value maps for StopOrderType.
var (
	StopOrderType_name = map[int32]string{
		0: "STOP_ORDER_TYPE_UNSPECIFIED",
		1: "STOP_ORDER_TYPE_TAKE_PROFIT",
		2: "STOP_ORDER_TYPE_STOP_LOSS",
		3: "STOP_ORDER_TYPE_STOP_LIMIT",
	}
	StopOrderType_value = map[string]int32{
		"STOP_ORDER_TYPE_UNSPECIFIED": 0,
		"STOP_ORDER_TYPE_TAKE_PROFIT": 1,
		"STOP_ORDER_TYPE_STOP_LOSS":   2,
		"STOP_ORDER_TYPE_STOP_LIMIT":  3,
	}
)

func (x StopOrderType) Enum() *StopOrderType {
	p := new(StopOrderType)
	*p = x
	return p
}

func (x StopOrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StopOrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_stoporders_proto_enumTypes[2].Descriptor()
}

func (StopOrderType) Type() protoreflect.EnumType {
	return &file_stoporders_proto_enumTypes[2]
}

func (x StopOrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StopOrderType.Descriptor instead.
func (StopOrderType) EnumDescriptor() ([]byte, []int) {
	return file_stoporders_proto_rawDescGZIP(), []int{2}
}

// Статус стоп-заяки.
type StopOrderStatusOption int32

const (
	StopOrderStatusOption_STOP_ORDER_STATUS_UNSPECIFIED StopOrderStatusOption = 0 //Значение не указано
	StopOrderStatusOption_STOP_ORDER_STATUS_ALL         StopOrderStatusOption = 1 //Все заявки
	StopOrderStatusOption_STOP_ORDER_STATUS_ACTIVE      StopOrderStatusOption = 2 //Активные заявки
	StopOrderStatusOption_STOP_ORDER_STATUS_EXECUTED    StopOrderStatusOption = 3 //Исполненные заявки
	StopOrderStatusOption_STOP_ORDER_STATUS_CANCELED    StopOrderStatusOption = 4 //Отмененные заявки
	StopOrderStatusOption_STOP_ORDER_STATUS_EXPIRED     StopOrderStatusOption = 5 //Истекшие заявки
)

// Enum value maps for StopOrderStatusOption.
var (
	StopOrderStatusOption_name = map[int32]string{
		0: "STOP_ORDER_STATUS_UNSPECIFIED",
		1: "STOP_ORDER_STATUS_ALL",
		2: "STOP_ORDER_STATUS_ACTIVE",
		3: "STOP_ORDER_STATUS_EXECUTED",
		4: "STOP_ORDER_STATUS_CANCELED",
		5: "STOP_ORDER_STATUS_EXPIRED",
	}
	StopOrderStatusOption_value = map[string]int32{
		"STOP_ORDER_STATUS_UNSPECIFIED": 0,
		"STOP_ORDER_STATUS_ALL":         1,
		"STOP_ORDER_STATUS_ACTIVE":      2,
		"STOP_ORDER_STATUS_EXECUTED":    3,
		"STOP_ORDER_STATUS_CANCELED":    4,
		"STOP_ORDER_STATUS_EXPIRED":     5,
	}
)

func (x StopOrderStatusOption) Enum() *StopOrderStatusOption {
	p := new(StopOrderStatusOption)
	*p = x
	return p
}

func (x StopOrderStatusOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StopOrderStatusOption) Descriptor() protoreflect.EnumDescriptor {
	return file_stoporders_proto_enumTypes[3].Descriptor()
}

func (StopOrderStatusOption) Type() protoreflect.EnumType {
	return &file_stoporders_proto_enumTypes[3]
}

func (x StopOrderStatusOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StopOrderStatusOption.Descriptor instead.
func (StopOrderStatusOption) EnumDescriptor() ([]byte, []int) {
	return file_stoporders_proto_rawDescGZIP(), []int{3}
}

// Тип выставляемой заявки.
type ExchangeOrderType int32

const (
	ExchangeOrderType_EXCHANGE_ORDER_TYPE_UNSPECIFIED ExchangeOrderType = 0 //Значение не указано
	ExchangeOrderType_EXCHANGE_ORDER_TYPE_MARKET      ExchangeOrderType = 1 //Заявка по рыночной цене
	ExchangeOrderType_EXCHANGE_ORDER_TYPE_LIMIT       ExchangeOrderType = 2 //Лимитная заявка
)

// Enum value maps for ExchangeOrderType.
var (
	ExchangeOrderType_name = map[int32]string{
		0: "EXCHANGE_ORDER_TYPE_UNSPECIFIED",
		1: "EXCHANGE_ORDER_TYPE_MARKET",
		2: "EXCHANGE_ORDER_TYPE_LIMIT",
	}
	ExchangeOrderType_value = map[string]int32{
		"EXCHANGE_ORDER_TYPE_UNSPECIFIED": 0,
		"EXCHANGE_ORDER_TYPE_MARKET":      1,
		"EXCHANGE_ORDER_TYPE_LIMIT":       2,
	}
)

func (x ExchangeOrderType) Enum() *ExchangeOrderType {
	p := new(ExchangeOrderType)
	*p = x
	return p
}

func (x ExchangeOrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExchangeOrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_stoporders_proto_enumTypes[4].Descriptor()
}

func (ExchangeOrderType) Type() protoreflect.EnumType {
	return &file_stoporders_proto_enumTypes[4]
}

func (x ExchangeOrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExchangeOrderType.Descriptor instead.
func (ExchangeOrderType) EnumDescriptor() ([]byte, []int) {
	return file_stoporders_proto_rawDescGZIP(), []int{4}
}

// Тип TakeProfit заявки.
type TakeProfitType int32

const (
	TakeProfitType_TAKE_PROFIT_TYPE_UNSPECIFIED TakeProfitType = 0 //Значение не указано
	TakeProfitType_TAKE_PROFIT_TYPE_REGULAR     TakeProfitType = 1 //Обычная заявка (значение по умолчанию)
	TakeProfitType_TAKE_PROFIT_TYPE_TRAILING    TakeProfitType = 2 //Трейлинг-стоп
)

// Enum value maps for TakeProfitType.
var (
	TakeProfitType_name = map[int32]string{
		0: "TAKE_PROFIT_TYPE_UNSPECIFIED",
		1: "TAKE_PROFIT_TYPE_REGULAR",
		2: "TAKE_PROFIT_TYPE_TRAILING",
	}
	TakeProfitType_value = map[string]int32{
		"TAKE_PROFIT_TYPE_UNSPECIFIED": 0,
		"TAKE_PROFIT_TYPE_REGULAR":     1,
		"TAKE_PROFIT_TYPE_TRAILING":    2,
	}
)

func (x TakeProfitType) Enum() *TakeProfitType {
	p := new(TakeProfitType)
	*p = x
	return p
}

func (x TakeProfitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TakeProfitType) Descriptor() protoreflect.EnumDescriptor {
	return file_stoporders_proto_enumTypes[5].Descriptor()
}

func (TakeProfitType) Type() protoreflect.EnumType {
	return &file_stoporders_proto_enumTypes[5]
}

func (x TakeProfitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TakeProfitType.Descriptor instead.
func (TakeProfitType) EnumDescriptor() ([]byte, []int) {
	return file_stoporders_proto_rawDescGZIP(), []int{5}
}

// Тип параметров значений Трейлинг-стопа
type TrailingValueType int32

const (
	TrailingValueType_TRAILING_VALUE_UNSPECIFIED TrailingValueType = 0 //Значение не указано
	TrailingValueType_TRAILING_VALUE_ABSOLUTE    TrailingValueType = 1 //Абсолютное значение в единицах цены
	TrailingValueType_TRAILING_VALUE_RELATIVE    TrailingValueType = 2 //Относительное значение в процентах
)

// Enum value maps for TrailingValueType.
var (
	TrailingValueType_name = map[int32]string{
		0: "TRAILING_VALUE_UNSPECIFIED",
		1: "TRAILING_VALUE_ABSOLUTE",
		2: "TRAILING_VALUE_RELATIVE",
	}
	TrailingValueType_value = map[string]int32{
		"TRAILING_VALUE_UNSPECIFIED": 0,
		"TRAILING_VALUE_ABSOLUTE":    1,
		"TRAILING_VALUE_RELATIVE":    2,
	}
)

func (x TrailingValueType) Enum() *TrailingValueType {
	p := new(TrailingValueType)
	*p = x
	return p
}

func (x TrailingValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrailingValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_stoporders_proto_enumTypes[6].Descriptor()
}

func (TrailingValueType) Type() protoreflect.EnumType {
	return &file_stoporders_proto_enumTypes[6]
}

func (x TrailingValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrailingValueType.Descriptor instead.
func (TrailingValueType) EnumDescriptor() ([]byte, []int) {
	return file_stoporders_proto_rawDescGZIP(), []int{6}
}

// Статус Трейлинг-стопа
type TrailingStopStatus int32

const (
	TrailingStopStatus_TRAILING_STOP_UNSPECIFIED TrailingStopStatus = 0 //Значение не указано
	TrailingStopStatus_TRAILING_STOP_ACTIVE      TrailingStopStatus = 1 //Активный
	TrailingStopStatus_TRAILING_STOP_ACTIVATED   TrailingStopStatus = 2 //Активированный
)

// Enum value maps for TrailingStopStatus.
var (
	TrailingStopStatus_name = map[int32]string{
		0: "TRAILING_STOP_UNSPECIFIED",
		1: "TRAILING_STOP_ACTIVE",
		2: "TRAILING_STOP_ACTIVATED",
	}
	TrailingStopStatus_value = map[string]int32{
		"TRAILING_STOP_UNSPECIFIED": 0,
		"TRAILING_STOP_ACTIVE":      1,
		"TRAILING_STOP_ACTIVATED":   2,
	}
)

func (x TrailingStopStatus) Enum() *TrailingStopStatus {
	p := new(TrailingStopStatus)
	*p = x
	return p
}

func (x TrailingStopStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrailingStopStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_stoporders_proto_enumTypes[7].Descriptor()
}

func (TrailingStopStatus) Type() protoreflect.EnumType {
	return &file_stoporders_proto_enumTypes[7]
}

func (x TrailingStopStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrailingStopStatus.Descriptor instead.
func (TrailingStopStatus) EnumDescriptor() ([]byte, []int) {
	return file_stoporders_proto_rawDescGZIP(), []int{7}
}

// Запрос выставления стоп-заявки.
type PostStopOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in stoporders.proto.
	Figi              *string                            `protobuf:"bytes,1,opt,name=figi,proto3,oneof" json:"figi,omitempty"`                                                                                                               //Deprecated Figi-идентификатор инструмента. Необходимо использовать instrument_id.
	Quantity          int64                              `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`                                                                                                            //Количество лотов
	Price             *Quotation                         `protobuf:"bytes,3,opt,name=price,proto3,oneof" json:"price,omitempty"`                                                                                                             //Цена за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента.
	StopPrice         *Quotation                         `protobuf:"bytes,4,opt,name=stop_price,json=stopPrice,proto3,oneof" json:"stop_price,omitempty"`                                                                                    //Стоп-цена заявки за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента.
	Direction         StopOrderDirection                 `protobuf:"varint,5,opt,name=direction,proto3,enum=tinkoff.public.invest.api.contract.v1.StopOrderDirection" json:"direction,omitempty"`                                            //Направление операции
	AccountId         string                             `protobuf:"bytes,6,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                                                                          //Номер счёта
	ExpirationType    StopOrderExpirationType            `protobuf:"varint,7,opt,name=expiration_type,json=expirationType,proto3,enum=tinkoff.public.invest.api.contract.v1.StopOrderExpirationType" json:"expiration_type,omitempty"`       //Тип экспирации заявки
	StopOrderType     StopOrderType                      `protobuf:"varint,8,opt,name=stop_order_type,json=stopOrderType,proto3,enum=tinkoff.public.invest.api.contract.v1.StopOrderType" json:"stop_order_type,omitempty"`                  //Тип заявки
	ExpireDate        *timestamppb.Timestamp             `protobuf:"bytes,9,opt,name=expire_date,json=expireDate,proto3,oneof" json:"expire_date,omitempty"`                                                                                 //Дата и время окончания действия стоп-заявки в часовом поясе UTC. **Для ExpirationType = GoodTillDate заполнение обязательно, для GoodTillCancel игнорируется**.
	InstrumentId      string                             `protobuf:"bytes,10,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"`                                                                                //Идентификатор инструмента, принимает значения Figi или instrument_uid.
	ExchangeOrderType ExchangeOrderType                  `protobuf:"varint,11,opt,name=exchange_order_type,json=exchangeOrderType,proto3,enum=tinkoff.public.invest.api.contract.v1.ExchangeOrderType" json:"exchange_order_type,omitempty"` //Тип дочерней биржевой заявки для тейкпрофита
	TakeProfitType    TakeProfitType                     `protobuf:"varint,12,opt,name=take_profit_type,json=takeProfitType,proto3,enum=tinkoff.public.invest.api.contract.v1.TakeProfitType" json:"take_profit_type,omitempty"`             //Подтип стоп-заявки TakeProfit
	TrailingData      *PostStopOrderRequest_TrailingData `protobuf:"bytes,13,opt,name=trailing_data,json=trailingData,proto3" json:"trailing_data,omitempty"`                                                                                //Массив с параметрами трейлинг-стопа
	PriceType         PriceType                          `protobuf:"varint,14,opt,name=price_type,json=priceType,proto3,enum=tinkoff.public.invest.api.contract.v1.PriceType" json:"price_type,omitempty"`                                   //Тип цены
	OrderId           string                             `protobuf:"bytes,15,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`                                                                                               //Идентификатор запроса выставления поручения для целей идемпотентности в формате UID. Максимальная длина 36 символов.
}

func (x *PostStopOrderRequest) Reset() {
	*x = PostStopOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stoporders_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostStopOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostStopOrderRequest) ProtoMessage() {}

func (x *PostStopOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stoporders_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostStopOrderRequest.ProtoReflect.Descriptor instead.
func (*PostStopOrderRequest) Descriptor() ([]byte, []int) {
	return file_stoporders_proto_rawDescGZIP(), []int{0}
}

// Deprecated: Marked as deprecated in stoporders.proto.
func (x *PostStopOrderRequest) GetFigi() string {
	if x != nil && x.Figi != nil {
		return *x.Figi
	}
	return ""
}

func (x *PostStopOrderRequest) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *PostStopOrderRequest) GetPrice() *Quotation {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *PostStopOrderRequest) GetStopPrice() *Quotation {
	if x != nil {
		return x.StopPrice
	}
	return nil
}

func (x *PostStopOrderRequest) GetDirection() StopOrderDirection {
	if x != nil {
		return x.Direction
	}
	return StopOrderDirection_STOP_ORDER_DIRECTION_UNSPECIFIED
}

func (x *PostStopOrderRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *PostStopOrderRequest) GetExpirationType() StopOrderExpirationType {
	if x != nil {
		return x.ExpirationType
	}
	return StopOrderExpirationType_STOP_ORDER_EXPIRATION_TYPE_UNSPECIFIED
}

func (x *PostStopOrderRequest) GetStopOrderType() StopOrderType {
	if x != nil {
		return x.StopOrderType
	}
	return StopOrderType_STOP_ORDER_TYPE_UNSPECIFIED
}

func (x *PostStopOrderRequest) GetExpireDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireDate
	}
	return nil
}

func (x *PostStopOrderRequest) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

func (x *PostStopOrderRequest) GetExchangeOrderType() ExchangeOrderType {
	if x != nil {
		return x.ExchangeOrderType
	}
	return ExchangeOrderType_EXCHANGE_ORDER_TYPE_UNSPECIFIED
}

func (x *PostStopOrderRequest) GetTakeProfitType() TakeProfitType {
	if x != nil {
		return x.TakeProfitType
	}
	return TakeProfitType_TAKE_PROFIT_TYPE_UNSPECIFIED
}

func (x *PostStopOrderRequest) GetTrailingData() *PostStopOrderRequest_TrailingData {
	if x != nil {
		return x.TrailingData
	}
	return nil
}

func (x *PostStopOrderRequest) GetPriceType() PriceType {
	if x != nil {
		return x.PriceType
	}
	return PriceType_PRICE_TYPE_UNSPECIFIED
}

func (x *PostStopOrderRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

// Результат выставления стоп-заявки.
type PostStopOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StopOrderId      string            `protobuf:"bytes,1,opt,name=stop_order_id,json=stopOrderId,proto3" json:"stop_order_id,omitempty"`                //Уникальный идентификатор стоп-заявки
	OrderRequestId   string            `protobuf:"bytes,2,opt,name=order_request_id,json=orderRequestId,proto3" json:"order_request_id,omitempty"`       //Идентификатор ключа идемпотентности, переданный клиентом, в формате UID. Максимальная длина 36 символов.
	ResponseMetadata *ResponseMetadata `protobuf:"bytes,254,opt,name=response_metadata,json=responseMetadata,proto3" json:"response_metadata,omitempty"` //Метадата
}

func (x *PostStopOrderResponse) Reset() {
	*x = PostStopOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stoporders_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostStopOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostStopOrderResponse) ProtoMessage() {}

func (x *PostStopOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stoporders_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostStopOrderResponse.ProtoReflect.Descriptor instead.
func (*PostStopOrderResponse) Descriptor() ([]byte, []int) {
	return file_stoporders_proto_rawDescGZIP(), []int{1}
}

func (x *PostStopOrderResponse) GetStopOrderId() string {
	if x != nil {
		return x.StopOrderId
	}
	return ""
}

func (x *PostStopOrderResponse) GetOrderRequestId() string {
	if x != nil {
		return x.OrderRequestId
	}
	return ""
}

func (x *PostStopOrderResponse) GetResponseMetadata() *ResponseMetadata {
	if x != nil {
		return x.ResponseMetadata
	}
	return nil
}

// Запрос получения списка активных стоп-заявок.
type GetStopOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string                 `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`                                            //Идентификатор счёта клиента
	Status    StopOrderStatusOption  `protobuf:"varint,2,opt,name=status,proto3,enum=tinkoff.public.invest.api.contract.v1.StopOrderStatusOption" json:"status,omitempty"` //Статус заявок
	From      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`                                                                       //Левая граница
	To        *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`                                                                           //Правая граница
}

func (x *GetStopOrdersRequest) Reset() {
	*x = GetStopOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stoporders_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStopOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStopOrdersRequest) ProtoMessage() {}

func (x *GetStopOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stoporders_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStopOrdersRequest.ProtoReflect.Descriptor instead.
func (*GetStopOrdersRequest) Descriptor() ([]byte, []int) {
	return file_stoporders_proto_rawDescGZIP(), []int{2}
}

func (x *GetStopOrdersRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *GetStopOrdersRequest) GetStatus() StopOrderStatusOption {
	if x != nil {
		return x.Status
	}
	return StopOrderStatusOption_STOP_ORDER_STATUS_UNSPECIFIED
}

func (x *GetStopOrdersRequest) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *GetStopOrdersRequest) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

// Список активных стоп-заявок.
type GetStopOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StopOrders []*StopOrder `protobuf:"bytes,1,rep,name=stop_orders,json=stopOrders,proto3" json:"stop_orders,omitempty"` //Массив стоп-заявок по счёту
}

func (x *GetStopOrdersResponse) Reset() {
	*x = GetStopOrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stoporders_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStopOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStopOrdersResponse) ProtoMessage() {}

func (x *GetStopOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stoporders_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStopOrdersResponse.ProtoReflect.Descriptor instead.
func (*GetStopOrdersResponse) Descriptor() ([]byte, []int) {
	return file_stoporders_proto_rawDescGZIP(), []int{3}
}

func (x *GetStopOrdersResponse) GetStopOrders() []*StopOrder {
	if x != nil {
		return x.StopOrders
	}
	return nil
}

// Запрос отмены выставленной стоп-заявки.
type CancelStopOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`         //Идентификатор счёта клиента
	StopOrderId string `protobuf:"bytes,2,opt,name=stop_order_id,json=stopOrderId,proto3" json:"stop_order_id,omitempty"` //Уникальный идентификатор стоп-заявки
}

func (x *CancelStopOrderRequest) Reset() {
	*x = CancelStopOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stoporders_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelStopOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelStopOrderRequest) ProtoMessage() {}

func (x *CancelStopOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stoporders_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelStopOrderRequest.ProtoReflect.Descriptor instead.
func (*CancelStopOrderRequest) Descriptor() ([]byte, []int) {
	return file_stoporders_proto_rawDescGZIP(), []int{4}
}

func (x *CancelStopOrderRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CancelStopOrderRequest) GetStopOrderId() string {
	if x != nil {
		return x.StopOrderId
	}
	return ""
}

// Результат отмены выставленной стоп-заявки.
type CancelStopOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"` //Время отмены заявки в часовом поясе UTC
}

func (x *CancelStopOrderResponse) Reset() {
	*x = CancelStopOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stoporders_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelStopOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelStopOrderResponse) ProtoMessage() {}

func (x *CancelStopOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stoporders_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelStopOrderResponse.ProtoReflect.Descriptor instead.
func (*CancelStopOrderResponse) Descriptor() ([]byte, []int) {
	return file_stoporders_proto_rawDescGZIP(), []int{5}
}

func (x *CancelStopOrderResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

// Информация о стоп-заявке.
type StopOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StopOrderId        string                  `protobuf:"bytes,1,opt,name=stop_order_id,json=stopOrderId,proto3" json:"stop_order_id,omitempty"`                                                                                  //Идентификатор-идентификатор стоп-заявки
	LotsRequested      int64                   `protobuf:"varint,2,opt,name=lots_requested,json=lotsRequested,proto3" json:"lots_requested,omitempty"`                                                                             //Запрошено лотов
	Figi               string                  `protobuf:"bytes,3,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                                     //Figi-идентификатор инструмента
	Direction          StopOrderDirection      `protobuf:"varint,4,opt,name=direction,proto3,enum=tinkoff.public.invest.api.contract.v1.StopOrderDirection" json:"direction,omitempty"`                                            //Направление операции
	Currency           string                  `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`                                                                                                             //Валюта стоп-заявки
	OrderType          StopOrderType           `protobuf:"varint,6,opt,name=order_type,json=orderType,proto3,enum=tinkoff.public.invest.api.contract.v1.StopOrderType" json:"order_type,omitempty"`                                //Тип стоп-заявки
	CreateDate         *timestamppb.Timestamp  `protobuf:"bytes,7,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`                                                                                       //Дата и время выставления заявки в часовом поясе UTC
	ActivationDateTime *timestamppb.Timestamp  `protobuf:"bytes,8,opt,name=activation_date_time,json=activationDateTime,proto3" json:"activation_date_time,omitempty"`                                                             //Дата и время конвертации стоп-заявки в биржевую в часовом поясе UTC
	ExpirationTime     *timestamppb.Timestamp  `protobuf:"bytes,9,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`                                                                           //Дата и время снятия заявки в часовом поясе UTC
	Price              *MoneyValue             `protobuf:"bytes,10,opt,name=price,proto3" json:"price,omitempty"`                                                                                                                  //Цена заявки за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента.
	StopPrice          *MoneyValue             `protobuf:"bytes,11,opt,name=stop_price,json=stopPrice,proto3" json:"stop_price,omitempty"`                                                                                         //Цена активации стоп-заявки за 1 инструмент. Для получения стоимости лота требуется умножить на лотность инструмента.
	InstrumentUid      string                  `protobuf:"bytes,12,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                                                                             //instrument_uid идентификатор инструмента
	TakeProfitType     TakeProfitType          `protobuf:"varint,13,opt,name=take_profit_type,json=takeProfitType,proto3,enum=tinkoff.public.invest.api.contract.v1.TakeProfitType" json:"take_profit_type,omitempty"`             //Подтип стоп-заявки TakeProfit
	TrailingData       *StopOrder_TrailingData `protobuf:"bytes,14,opt,name=trailing_data,json=trailingData,proto3" json:"trailing_data,omitempty"`                                                                                //Параметры трейлинг-стопа
	Status             StopOrderStatusOption   `protobuf:"varint,15,opt,name=status,proto3,enum=tinkoff.public.invest.api.contract.v1.StopOrderStatusOption" json:"status,omitempty"`                                              //Статус заявки
	ExchangeOrderType  ExchangeOrderType       `protobuf:"varint,16,opt,name=exchange_order_type,json=exchangeOrderType,proto3,enum=tinkoff.public.invest.api.contract.v1.ExchangeOrderType" json:"exchange_order_type,omitempty"` //Тип дочерней биржевой заявки для тейкпрофита
}

func (x *StopOrder) Reset() {
	*x = StopOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stoporders_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopOrder) ProtoMessage() {}

func (x *StopOrder) ProtoReflect() protoreflect.Message {
	mi := &file_stoporders_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopOrder.ProtoReflect.Descriptor instead.
func (*StopOrder) Descriptor() ([]byte, []int) {
	return file_stoporders_proto_rawDescGZIP(), []int{6}
}

func (x *StopOrder) GetStopOrderId() string {
	if x != nil {
		return x.StopOrderId
	}
	return ""
}

func (x *StopOrder) GetLotsRequested() int64 {
	if x != nil {
		return x.LotsRequested
	}
	return 0
}

func (x *StopOrder) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *StopOrder) GetDirection() StopOrderDirection {
	if x != nil {
		return x.Direction
	}
	return StopOrderDirection_STOP_ORDER_DIRECTION_UNSPECIFIED
}

func (x *StopOrder) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *StopOrder) GetOrderType() StopOrderType {
	if x != nil {
		return x.OrderType
	}
	return StopOrderType_STOP_ORDER_TYPE_UNSPECIFIED
}

func (x *StopOrder) GetCreateDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateDate
	}
	return nil
}

func (x *StopOrder) GetActivationDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ActivationDateTime
	}
	return nil
}

func (x *StopOrder) GetExpirationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationTime
	}
	return nil
}

func (x *StopOrder) GetPrice() *MoneyValue {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *StopOrder) GetStopPrice() *MoneyValue {
	if x != nil {
		return x.StopPrice
	}
	return nil
}

func (x *StopOrder) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

func (x *StopOrder) GetTakeProfitType() TakeProfitType {
	if x != nil {
		return x.TakeProfitType
	}
	return TakeProfitType_TAKE_PROFIT_TYPE_UNSPECIFIED
}

func (x *StopOrder) GetTrailingData() *StopOrder_TrailingData {
	if x != nil {
		return x.TrailingData
	}
	return nil
}

func (x *StopOrder) GetStatus() StopOrderStatusOption {
	if x != nil {
		return x.Status
	}
	return StopOrderStatusOption_STOP_ORDER_STATUS_UNSPECIFIED
}

func (x *StopOrder) GetExchangeOrderType() ExchangeOrderType {
	if x != nil {
		return x.ExchangeOrderType
	}
	return ExchangeOrderType_EXCHANGE_ORDER_TYPE_UNSPECIFIED
}

type PostStopOrderRequest_TrailingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indent     *Quotation        `protobuf:"bytes,1,opt,name=indent,proto3" json:"indent,omitempty"`                                                                                         //Отступ
	IndentType TrailingValueType `protobuf:"varint,2,opt,name=indent_type,json=indentType,proto3,enum=tinkoff.public.invest.api.contract.v1.TrailingValueType" json:"indent_type,omitempty"` //Тип величины отступа
	Spread     *Quotation        `protobuf:"bytes,3,opt,name=spread,proto3" json:"spread,omitempty"`                                                                                         //Размер защитного спреда
	SpreadType TrailingValueType `protobuf:"varint,4,opt,name=spread_type,json=spreadType,proto3,enum=tinkoff.public.invest.api.contract.v1.TrailingValueType" json:"spread_type,omitempty"` //Тип величины защитного спреда
}

func (x *PostStopOrderRequest_TrailingData) Reset() {
	*x = PostStopOrderRequest_TrailingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stoporders_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostStopOrderRequest_TrailingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostStopOrderRequest_TrailingData) ProtoMessage() {}

func (x *PostStopOrderRequest_TrailingData) ProtoReflect() protoreflect.Message {
	mi := &file_stoporders_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostStopOrderRequest_TrailingData.ProtoReflect.Descriptor instead.
func (*PostStopOrderRequest_TrailingData) Descriptor() ([]byte, []int) {
	return file_stoporders_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PostStopOrderRequest_TrailingData) GetIndent() *Quotation {
	if x != nil {
		return x.Indent
	}
	return nil
}

func (x *PostStopOrderRequest_TrailingData) GetIndentType() TrailingValueType {
	if x != nil {
		return x.IndentType
	}
	return TrailingValueType_TRAILING_VALUE_UNSPECIFIED
}

func (x *PostStopOrderRequest_TrailingData) GetSpread() *Quotation {
	if x != nil {
		return x.Spread
	}
	return nil
}

func (x *PostStopOrderRequest_TrailingData) GetSpreadType() TrailingValueType {
	if x != nil {
		return x.SpreadType
	}
	return TrailingValueType_TRAILING_VALUE_UNSPECIFIED
}

type StopOrder_TrailingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indent     *Quotation         `protobuf:"bytes,1,opt,name=indent,proto3" json:"indent,omitempty"`                                                                                         //Отступ
	IndentType TrailingValueType  `protobuf:"varint,2,opt,name=indent_type,json=indentType,proto3,enum=tinkoff.public.invest.api.contract.v1.TrailingValueType" json:"indent_type,omitempty"` //Тип величины отступа
	Spread     *Quotation         `protobuf:"bytes,3,opt,name=spread,proto3" json:"spread,omitempty"`                                                                                         //Размер защитного спреда
	SpreadType TrailingValueType  `protobuf:"varint,4,opt,name=spread_type,json=spreadType,proto3,enum=tinkoff.public.invest.api.contract.v1.TrailingValueType" json:"spread_type,omitempty"` //Тип величины защитного спреда
	Status     TrailingStopStatus `protobuf:"varint,5,opt,name=status,proto3,enum=tinkoff.public.invest.api.contract.v1.TrailingStopStatus" json:"status,omitempty"`                          //Статус трейлинг-стопа
	Price      *Quotation         `protobuf:"bytes,7,opt,name=price,proto3" json:"price,omitempty"`                                                                                           //Цена исполнения
	Extr       *Quotation         `protobuf:"bytes,8,opt,name=extr,proto3" json:"extr,omitempty"`                                                                                             //Локальный экстремум
}

func (x *StopOrder_TrailingData) Reset() {
	*x = StopOrder_TrailingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stoporders_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopOrder_TrailingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopOrder_TrailingData) ProtoMessage() {}

func (x *StopOrder_TrailingData) ProtoReflect() protoreflect.Message {
	mi := &file_stoporders_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopOrder_TrailingData.ProtoReflect.Descriptor instead.
func (*StopOrder_TrailingData) Descriptor() ([]byte, []int) {
	return file_stoporders_proto_rawDescGZIP(), []int{6, 0}
}

func (x *StopOrder_TrailingData) GetIndent() *Quotation {
	if x != nil {
		return x.Indent
	}
	return nil
}

func (x *StopOrder_TrailingData) GetIndentType() TrailingValueType {
	if x != nil {
		return x.IndentType
	}
	return TrailingValueType_TRAILING_VALUE_UNSPECIFIED
}

func (x *StopOrder_TrailingData) GetSpread() *Quotation {
	if x != nil {
		return x.Spread
	}
	return nil
}

func (x *StopOrder_TrailingData) GetSpreadType() TrailingValueType {
	if x != nil {
		return x.SpreadType
	}
	return TrailingValueType_TRAILING_VALUE_UNSPECIFIED
}

func (x *StopOrder_TrailingData) GetStatus() TrailingStopStatus {
	if x != nil {
		return x.Status
	}
	return TrailingStopStatus_TRAILING_STOP_UNSPECIFIED
}

func (x *StopOrder_TrailingData) GetPrice() *Quotation {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *StopOrder_TrailingData) GetExtr() *Quotation {
	if x != nil {
		return x.Extr
	}
	return nil
}

var File_stoporders_proto protoreflect.FileDescriptor

var file_stoporders_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x74, 0x6f, 0x70, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x25, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xee, 0x0b, 0x0a, 0x14, 0x50, 0x6f,
	0x73, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69, 0x67, 0x69, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x4b, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a,
	0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x6c, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x61, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x68, 0x0a, 0x13, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x38, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5f, 0x0a, 0x10,
	0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x74,
	0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6d, 0x0a,
	0x0d, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4f, 0x0a, 0x0a,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x1a, 0xd8, 0x02,
	0x0a, 0x0c, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x48,
	0x0a, 0x06, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x0b, 0x69, 0x6e, 0x64, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x12, 0x59, 0x0a,
	0x0b, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x38, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x70,
	0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66, 0x69, 0x67,
	0x69, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x15, 0x50,
	0x6f, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f,
	0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x65, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xec, 0x01, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x02,
	0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x6a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x51, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x22, 0x65, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74,
	0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b,
	0x73, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x17, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x87, 0x0d, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x70, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f,
	0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x74, 0x73,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x69, 0x67, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66,
	0x69, 0x67, 0x69, 0x12, 0x57, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x53, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x14, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73,
	0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12,
	0x5f, 0x0a, 0x10, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x62, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f,
	0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x68, 0x0a, 0x13, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66,
	0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x1a, 0xb9, 0x04, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x06, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x12,
	0x59, 0x0a, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x70,
	0x72, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x70,
	0x72, 0x65, 0x61, 0x64, 0x12, 0x59, 0x0a, 0x0b, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x51, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x39, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x46, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x65, 0x78,
	0x74, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f,
	0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x65, 0x78, 0x74, 0x72,
	0x2a, 0x77, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18,
	0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x59, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54,
	0x4f, 0x50, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x02, 0x2a, 0xa5, 0x01, 0x0a, 0x17, 0x53, 0x74,
	0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x45, 0x58, 0x50, 0x49, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x47, 0x4f, 0x4f, 0x44, 0x5f, 0x54, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x47, 0x4f, 0x4f, 0x44, 0x5f, 0x54, 0x49, 0x4c, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x02, 0x2a, 0x90, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x54, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x4f,
	0x53, 0x53, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x10, 0x03, 0x2a, 0xd2, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x1d, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18,
	0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54,
	0x4f, 0x50, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54,
	0x4f, 0x50, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54,
	0x4f, 0x50, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x77, 0x0a, 0x11, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x1f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45,
	0x54, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x10, 0x02, 0x2a, 0x6f, 0x0a, 0x0e, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x55, 0x4c,
	0x41, 0x52, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4c, 0x49, 0x4e,
	0x47, 0x10, 0x02, 0x2a, 0x6d, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41, 0x49,
	0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x52, 0x41, 0x49,
	0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x41, 0x42, 0x53, 0x4f, 0x4c,
	0x55, 0x54, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x52, 0x41, 0x49, 0x4c, 0x49, 0x4e,
	0x47, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x02, 0x2a, 0x6a, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x49,
	0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x52, 0x41, 0x49, 0x4c,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x52, 0x41, 0x49, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54,
	0x4f, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x32, 0xc0,
	0x03, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x6f,
	0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3b, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x8a, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x3b, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x70,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x90,
	0x01, 0x0a, 0x0f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x3d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3e, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x61, 0x0a, 0x1c, 0x72, 0x75, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x2e,
	0x70, 0x69, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x50, 0x01, 0x5a, 0x0c, 0x2e, 0x2f, 0x3b, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x61, 0x70,
	0x69, 0xa2, 0x02, 0x05, 0x54, 0x49, 0x41, 0x50, 0x49, 0xaa, 0x02, 0x14, 0x54, 0x69, 0x6e, 0x6b,
	0x6f, 0x66, 0x66, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x11, 0x54, 0x69, 0x6e, 0x6b, 0x6f, 0x66, 0x66, 0x5c, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x5c, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stoporders_proto_rawDescOnce sync.Once
	file_stoporders_proto_rawDescData = file_stoporders_proto_rawDesc
)

func file_stoporders_proto_rawDescGZIP() []byte {
	file_stoporders_proto_rawDescOnce.Do(func() {
		file_stoporders_proto_rawDescData = protoimpl.X.CompressGZIP(file_stoporders_proto_rawDescData)
	})
	return file_stoporders_proto_rawDescData
}

var file_stoporders_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_stoporders_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_stoporders_proto_goTypes = []interface{}{
	(StopOrderDirection)(0),                   // 0: tinkoff.public.invest.api.contract.v1.StopOrderDirection
	(StopOrderExpirationType)(0),              // 1: tinkoff.public.invest.api.contract.v1.StopOrderExpirationType
	(StopOrderType)(0),                        // 2: tinkoff.public.invest.api.contract.v1.StopOrderType
	(StopOrderStatusOption)(0),                // 3: tinkoff.public.invest.api.contract.v1.StopOrderStatusOption
	(ExchangeOrderType)(0),                    // 4: tinkoff.public.invest.api.contract.v1.ExchangeOrderType
	(TakeProfitType)(0),                       // 5: tinkoff.public.invest.api.contract.v1.TakeProfitType
	(TrailingValueType)(0),                    // 6: tinkoff.public.invest.api.contract.v1.TrailingValueType
	(TrailingStopStatus)(0),                   // 7: tinkoff.public.invest.api.contract.v1.TrailingStopStatus
	(*PostStopOrderRequest)(nil),              // 8: tinkoff.public.invest.api.contract.v1.PostStopOrderRequest
	(*PostStopOrderResponse)(nil),             // 9: tinkoff.public.invest.api.contract.v1.PostStopOrderResponse
	(*GetStopOrdersRequest)(nil),              // 10: tinkoff.public.invest.api.contract.v1.GetStopOrdersRequest
	(*GetStopOrdersResponse)(nil),             // 11: tinkoff.public.invest.api.contract.v1.GetStopOrdersResponse
	(*CancelStopOrderRequest)(nil),            // 12: tinkoff.public.invest.api.contract.v1.CancelStopOrderRequest
	(*CancelStopOrderResponse)(nil),           // 13: tinkoff.public.invest.api.contract.v1.CancelStopOrderResponse
	(*StopOrder)(nil),                         // 14: tinkoff.public.invest.api.contract.v1.StopOrder
	(*PostStopOrderRequest_TrailingData)(nil), // 15: tinkoff.public.invest.api.contract.v1.PostStopOrderRequest.TrailingData
	(*StopOrder_TrailingData)(nil),            // 16: tinkoff.public.invest.api.contract.v1.StopOrder.TrailingData
	(*Quotation)(nil),                         // 17: tinkoff.public.invest.api.contract.v1.Quotation
	(*timestamppb.Timestamp)(nil),             // 18: google.protobuf.Timestamp
	(PriceType)(0),                            // 19: tinkoff.public.invest.api.contract.v1.PriceType
	(*ResponseMetadata)(nil),                  // 20: tinkoff.public.invest.api.contract.v1.ResponseMetadata
	(*MoneyValue)(nil),                        // 21: tinkoff.public.invest.api.contract.v1.MoneyValue
}
var file_stoporders_proto_depIdxs = []int32{
	17, // 0: tinkoff.public.invest.api.contract.v1.PostStopOrderRequest.price:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	17, // 1: tinkoff.public.invest.api.contract.v1.PostStopOrderRequest.stop_price:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	0,  // 2: tinkoff.public.invest.api.contract.v1.PostStopOrderRequest.direction:type_name -> tinkoff.public.invest.api.contract.v1.StopOrderDirection
	1,  // 3: tinkoff.public.invest.api.contract.v1.PostStopOrderRequest.expiration_type:type_name -> tinkoff.public.invest.api.contract.v1.StopOrderExpirationType
	2,  // 4: tinkoff.public.invest.api.contract.v1.PostStopOrderRequest.stop_order_type:type_name -> tinkoff.public.invest.api.contract.v1.StopOrderType
	18, // 5: tinkoff.public.invest.api.contract.v1.PostStopOrderRequest.expire_date:type_name -> google.protobuf.Timestamp
	4,  // 6: tinkoff.public.invest.api.contract.v1.PostStopOrderRequest.exchange_order_type:type_name -> tinkoff.public.invest.api.contract.v1.ExchangeOrderType
	5,  // 7: tinkoff.public.invest.api.contract.v1.PostStopOrderRequest.take_profit_type:type_name -> tinkoff.public.invest.api.contract.v1.TakeProfitType
	15, // 8: tinkoff.public.invest.api.contract.v1.PostStopOrderRequest.trailing_data:type_name -> tinkoff.public.invest.api.contract.v1.PostStopOrderRequest.TrailingData
	19, // 9: tinkoff.public.invest.api.contract.v1.PostStopOrderRequest.price_type:type_name -> tinkoff.public.invest.api.contract.v1.PriceType
	20, // 10: tinkoff.public.invest.api.contract.v1.PostStopOrderResponse.response_metadata:type_name -> tinkoff.public.invest.api.contract.v1.ResponseMetadata
	3,  // 11: tinkoff.public.invest.api.contract.v1.GetStopOrdersRequest.status:type_name -> tinkoff.public.invest.api.contract.v1.StopOrderStatusOption
	18, // 12: tinkoff.public.invest.api.contract.v1.GetStopOrdersRequest.from:type_name -> google.protobuf.Timestamp
	18, // 13: tinkoff.public.invest.api.contract.v1.GetStopOrdersRequest.to:type_name -> google.protobuf.Timestamp
	14, // 14: tinkoff.public.invest.api.contract.v1.GetStopOrdersResponse.stop_orders:type_name -> tinkoff.public.invest.api.contract.v1.StopOrder
	18, // 15: tinkoff.public.invest.api.contract.v1.CancelStopOrderResponse.time:type_name -> google.protobuf.Timestamp
	0,  // 16: tinkoff.public.invest.api.contract.v1.StopOrder.direction:type_name -> tinkoff.public.invest.api.contract.v1.StopOrderDirection
	2,  // 17: tinkoff.public.invest.api.contract.v1.StopOrder.order_type:type_name -> tinkoff.public.invest.api.contract.v1.StopOrderType
	18, // 18: tinkoff.public.invest.api.contract.v1.StopOrder.create_date:type_name -> google.protobuf.Timestamp
	18, // 19: tinkoff.public.invest.api.contract.v1.StopOrder.activation_date_time:type_name -> google.protobuf.Timestamp
	18, // 20: tinkoff.public.invest.api.contract.v1.StopOrder.expiration_time:type_name -> google.protobuf.Timestamp
	21, // 21: tinkoff.public.invest.api.contract.v1.StopOrder.price:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	21, // 22: tinkoff.public.invest.api.contract.v1.StopOrder.stop_price:type_name -> tinkoff.public.invest.api.contract.v1.MoneyValue
	5,  // 23: tinkoff.public.invest.api.contract.v1.StopOrder.take_profit_type:type_name -> tinkoff.public.invest.api.contract.v1.TakeProfitType
	16, // 24: tinkoff.public.invest.api.contract.v1.StopOrder.trailing_data:type_name -> tinkoff.public.invest.api.contract.v1.StopOrder.TrailingData
	3,  // 25: tinkoff.public.invest.api.contract.v1.StopOrder.status:type_name -> tinkoff.public.invest.api.contract.v1.StopOrderStatusOption
	4,  // 26: tinkoff.public.invest.api.contract.v1.StopOrder.exchange_order_type:type_name -> tinkoff.public.invest.api.contract.v1.ExchangeOrderType
	17, // 27: tinkoff.public.invest.api.contract.v1.PostStopOrderRequest.TrailingData.indent:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	6,  // 28: tinkoff.public.invest.api.contract.v1.PostStopOrderRequest.TrailingData.indent_type:type_name -> tinkoff.public.invest.api.contract.v1.TrailingValueType
	17, // 29: tinkoff.public.invest.api.contract.v1.PostStopOrderRequest.TrailingData.spread:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	6,  // 30: tinkoff.public.invest.api.contract.v1.PostStopOrderRequest.TrailingData.spread_type:type_name -> tinkoff.public.invest.api.contract.v1.TrailingValueType
	17, // 31: tinkoff.public.invest.api.contract.v1.StopOrder.TrailingData.indent:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	6,  // 32: tinkoff.public.invest.api.contract.v1.StopOrder.TrailingData.indent_type:type_name -> tinkoff.public.invest.api.contract.v1.TrailingValueType
	17, // 33: tinkoff.public.invest.api.contract.v1.StopOrder.TrailingData.spread:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	6,  // 34: tinkoff.public.invest.api.contract.v1.StopOrder.TrailingData.spread_type:type_name -> tinkoff.public.invest.api.contract.v1.TrailingValueType
	7,  // 35: tinkoff.public.invest.api.contract.v1.StopOrder.TrailingData.status:type_name -> tinkoff.public.invest.api.contract.v1.TrailingStopStatus
	17, // 36: tinkoff.public.invest.api.contract.v1.StopOrder.TrailingData.price:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	17, // 37: tinkoff.public.invest.api.contract.v1.StopOrder.TrailingData.extr:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	8,  // 38: tinkoff.public.invest.api.contract.v1.StopOrdersService.PostStopOrder:input_type -> tinkoff.public.invest.api.contract.v1.PostStopOrderRequest
	10, // 39: tinkoff.public.invest.api.contract.v1.StopOrdersService.GetStopOrders:input_type -> tinkoff.public.invest.api.contract.v1.GetStopOrdersRequest
	12, // 40: tinkoff.public.invest.api.contract.v1.StopOrdersService.CancelStopOrder:input_type -> tinkoff.public.invest.api.contract.v1.CancelStopOrderRequest
	9,  // 41: tinkoff.public.invest.api.contract.v1.StopOrdersService.PostStopOrder:output_type -> tinkoff.public.invest.api.contract.v1.PostStopOrderResponse
	11, // 42: tinkoff.public.invest.api.contract.v1.StopOrdersService.GetStopOrders:output_type -> tinkoff.public.invest.api.contract.v1.GetStopOrdersResponse
	13, // 43: tinkoff.public.invest.api.contract.v1.StopOrdersService.CancelStopOrder:output_type -> tinkoff.public.invest.api.contract.v1.CancelStopOrderResponse
	41, // [41:44] is the sub-list for method output_type
	38, // [38:41] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_stoporders_proto_init() }
func file_stoporders_proto_init() {
	if File_stoporders_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_stoporders_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostStopOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stoporders_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostStopOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stoporders_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStopOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stoporders_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStopOrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stoporders_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelStopOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stoporders_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelStopOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stoporders_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stoporders_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostStopOrderRequest_TrailingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stoporders_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopOrder_TrailingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_stoporders_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stoporders_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_stoporders_proto_goTypes,
		DependencyIndexes: file_stoporders_proto_depIdxs,
		EnumInfos:         file_stoporders_proto_enumTypes,
		MessageInfos:      file_stoporders_proto_msgTypes,
	}.Build()
	File_stoporders_proto = out.File
	file_stoporders_proto_rawDesc = nil
	file_stoporders_proto_goTypes = nil
	file_stoporders_proto_depIdxs = nil
}
